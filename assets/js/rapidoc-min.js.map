{"version":3,"file":"rapidoc-min.js","mappingsoRA;AACA;AACA;AAIA;AAIA;AAIA;AAEA;;;AAIA;;AAEA;AACA;AACA;AACA;;;;;AAKA;AAGA;;AAGA;AACA;AACA;;AAIA;;AAGA;AACA;;;;AAIA;AAGA;AACA;;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AAGA;;AAGA;AACA;;;AAKA;;AAKA;AAuBA;;;;AAIA;AAEA;;AAEA;;AAIA;;AAGA;AACA;;;AAGA;AACA;AAEA;AACA;AACA;;AAIA;;AAGA;AACA;;AAIA;;AAGA;;;AAMA;AAEA;;;AAGA;AACA;AACA;AAGA;AAGA;;;;;AAMA;AACA;;AAEA;;;AAGA;;AAEA;;;AAKA;;;AAIA;;;AAaA;;AAIA;;;AAtGA;;;AAqJA;AACA;AAEA;;;AAGA;;;AAMA;;AAEA;;;;;AAOA;;AAEA;AAKA;;AAGA;AAIA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;;;AAMA;;;AAvFA;;;AClfA;;AAYA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;;AC1BA;;AAEA;AACA;;;AAGA;;;AAGA;;AAEA;;AAEA;;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;ACtEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACoFA;AAQA;;;;AAIA;;AAGA;AAYA;;AAEA;;AAEA;AACA;;;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC2PA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7RA;AAQA;;AAEA;AACA;;;AAIA;AACA;;AAIA;AACA;AAEA;;AASA;AA0BA;AACA;AASA;AAyDA;AACA;AACA;AAMA;AACA;AACA;AAGA;;AAEA;;AAEA;AACA;AAGA;AACA;AAwBA;;;AAIA;AASA;AA4BA;AACA;AACA;AACA;AAMA;AACA;AACA;;;;AAIA;AAEA;AAKA;AAIA;AACA;AACA;AACA;;;AAIA;;AChUA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiEA;AAOA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AA0DA;;;;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAIA;AACA;AAKA;;AAEA;AACA;AACA;;AAEA;AAEA;AJpHA;AIwMA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAMA;AAEA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAKA;;AAIA;AAOA;AACA;;AAEA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAKA;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAMA;AAGA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;;AAGA;;;AAKA;;AAEA;AACA;;;AAIA;AAGA;;;AAGA;;AAGA;AA0EA;AACA;AACA;AACA;;;AAOA;AAqBA;;AAEA;AAGA;AACA;AACA;;;;AAKA;AAGA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;;;;;;AAOA;AACA;AACA;;AAEA;AACA;;;;;;AAWA;;AAoBA;;AAOA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AAIA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAIA;;;AAmBA;AAiBA;AACA;;;AAGA;AACA;;;;;;AAMA;AACA;AACA;AACA;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;;;AAMA;AAgBA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AAGA;;;;;;AAMA;AACA;;;;;;;;AAQA;;;AAIA;AACA;AACA;;;AAGA;;;AAGA;AAEA;AAGA;AAEA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;;AAOA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWA;;AAIA;;;AAMA;;;;AAMA;AACA;;;AAKA;;AAGA;;AAGA;;AAIA;;;;AAIA;AACA;;;AAGA;AAEA;AAIA;AACA;AACA;;AAGA;;AAuBA;;AAEA;;;AAGA;AAIA;AACA;AACA;;AAIA;AAEA;AACA;;;AAGA;AAIA;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AAEA;AAOA;AACA;;AAIA;;AAEA;AACA;;;AAIA;;AAEA;;AAMA;;;;AAIA;;;;AAIA;AAEA;AAEA;AAIA;;;AAOA;AAGA;;;AAGA;;AAEA;AAGA;;;AAGA;;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpiCA;AAQA;;AAEA;AACA;;;AAIA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;;;AAUA;AAyBA;AACA;AACA;AAUA;AAsCA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAMA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;;;;AAKA;;;AAGA;;AAKA;AAGA;AACA;AAwBA;;;AASA;AAYA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAMA;;AAEA;AACA;;AAOA;AACA;AACA;AACA;;;AAIA;AC/QA;AACA;AACA;;AAGA;AACA;;AAGA;;;;;AAKA;AACA;;AAIA;AAGA;AACA;AACA;;AAGA;;AAKA;AAGA;AACA;;AAIA;AACA;;;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAGA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AAKA;AACA;AACA;AACA;;AAEA;;;;AASA;;;AAhBA;;ACjKA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;;;AAKA;;AAQA;AACA;AACA;AACA;;AAGA;AACA;;;AAKA;AAKA;AACA;AACA;;AAEA;;;;AAIA;;;AAVA;;AC5CA;AACA;;AAGA;AACA;;AAEA;AAFA;;;AAOA;AAEA;AACA;AAGA;AAIA;AAEA;AAMA;AAIA;;AAGA;AACA;AAIA;;;;AAMA;;AASA;;AAKA;;;ACtCA;;AAEA;;AAEA;;AAGA;AACA;;AAEA;;;AAIA;AACA;AACA;;AAGA;AACA;;AAGA;;;;;AAMA;AACA;AACA;;;;AAIA;;;AAMA;AAOA;;;AAGA;AAGA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAbA;AAkBA;;;AAGA;AAEA;;;;AClDA;AACA;;AAEA;AAGA;AACA;;;;;;;AASA;;;;;AAKA;AAEA;;AAEA;;AAKA;AAGA;;;;;;AAQA;AACA;AAGA;AAEA;AAEA;AACA;;AAIA;;AAEA;AACA;;AAEA;;AAEA;;;AAIA;AACA;AAEA;;AA1BA;;AAgCA;AAIA;;AAKA;;AAEA;;;;;;;;;;AAWA;;;;;;AAQA;AAGA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;AAKA;AAEA;;AAIA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AAIA;;AAEA;;AAOA;;;AAGA;AACA;;;AAGA;AACA;AACA;;AAGA;AACA;;;;;AAQA;;;AAIA;;;;;AAMA;;;;AAKA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAUA;;ACzPA;AAEA;AAiBA;AACA;;AAGA;AAMA;AAIA;;;AAsBA;AC5BA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;AAGA;;AAGA;;AAKA;AAqBA;;AAEA;AAMA;;AAGA;;AAKA;;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AAKA;;AAGA;;;;AAIA;;;;AAIA;AAGA;AACA;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AAMA;AACA;AACA;;;AAIA;;AAGA;AAMA;AACA;AACA;;;;AAnDA;;;;ACtLA;AAEA;;;;;;;;;;;;;ACOA;;;AAGA;;;;;;;AASA;AACA;;;;;AAMA;;;;;AAOA;AACA;;;AAGA;;;AAIA;AAGA;;;;AAKA;AAGA;;;;;ADtDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE8EA;AAOA;AACA;AACA;;;AAGA;;;AAIA;AAgDA;AAEA;AACA;;AAIA;AAQA;AACA;;;AAGA;AACA;;;AAOA;AACA;;AAEA;AACA;;AAKA;;AAIA;AACA;AACA;;AAEA;;AAKA;AAEA;AACA;AAEA;;;AAIA;AAIA;;;AAMA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;AAEA;AAIA;AACA;AAEA;AAkBA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;;;;AAxCA;AACA;AAgDA;AASA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAvBA;AACA;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtUA;;;AAOA;;;;;;;;;AASA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;;;AAMA;;;AAGA;AACA;;AAEA;;AASA;AACA;AACA;;;;AAMA;ACvBA;;;;AAKA;AACA;;;;;;AAMA;;;;;;;AC8IA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AC3PA;AACA;AAGA;AACA;;AAEA;;;;AAIA;AACA;;;AAKA;AAEA;;;AAGA;;;;AAOA;AACA;;;AAGA;;;AAGA;;AAEA;;AAEA;;;;;AASA;AACA;AAGA;AAGA;AACA;AAGA;AACA;AACA;;;;AAIA;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC4RA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;AC5RA;;;;;;;;;ACvGA;;;;;;AAMA;AACA;AACA;;AAIA;;;;AAMA;AAKA;;AAEA;AAIA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;;;AAMA;AAEA;AACA;AACA;;AAGA;AAGA;;AAEA;AACA;;AAEA;;;;AAKA;;AAKA;AAyBA;AACA;AAGA;AACA;;AAEA;;;;;AAKA;AACA;;;AAKA;AAEA;;;AAGA;;;;AAOA;AACA;;;AAGA;;AAEA;;;AAGA;;;;;AAKA;AACA;AAGA;AAGA;AACA;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA","sources":["webpack://rapidoc/./src/styles/input-styles.js","webpack://rapidoc/./src/styles/flex-styles.js","webpack://rapidoc/./src/styles/table-styles.js","webpack://rapidoc/./src/styles/endpoint-styles.js","webpack://rapidoc/./src/styles/prism-styles.js","webpack://rapidoc/./src/styles/tab-styles.js","webpack://rapidoc/./src/styles/nav-styles.js","webpack://rapidoc/./src/styles/info-styles.js","webpack://rapidoc/./src/styles/custom-styles.js","webpack://rapidoc/./src/utils/common-utils.js","webpack://rapidoc/./src/templates/security-scheme-template.js","webpack://rapidoc/./src/templates/code-samples-template.js","webpack://rapidoc/./src/templates/callback-template.js","webpack://rapidoc/./src/utils/schema-utils.js","webpack://rapidoc/./src/components/json-tree.js","webpack://rapidoc/./src/components/schema-tree.js","webpack://rapidoc/./src/components/tag-input.js","webpack://rapidoc/./src/components/api-request.js","webpack://rapidoc/./src/components/schema-table.js","webpack://rapidoc/./src/templates/expanded-endpoint-template.js","webpack://rapidoc/./src/templates/components-template.js","webpack://rapidoc/./src/templates/overview-template.js","webpack://rapidoc/./src/templates/server-template.js","webpack://rapidoc/./src/templates/navbar-template.js","webpack://rapidoc/./src/templates/focused-endpoint-template.js","webpack://rapidoc/./src/templates/endpoint-template.js","webpack://rapidoc/./src/templates/logo-template.js","webpack://rapidoc/./src/templates/header-template.js","webpack://rapidoc/./src/components/api-response.js","webpack://rapidoc/./src/templates/advance-search-template.js","webpack://rapidoc/./src/components/dialog-box.js","webpack://rapidoc/./src/utils/theme.js","webpack://rapidoc/./src/templates/main-body-template.js","webpack://rapidoc/./src/rapidoc.js","webpack://rapidoc/./src/rapidoc-mini.js","webpack://rapidoc/./src/templates/json-schema-viewer-template.js","webpack://rapidoc/./src/json-schema-viewer.js"],"sourcesContent":["import { css } from 'lit';\r\n\r\n/* eslint-disable max-len */\r\nexport default css`\r\n/* Button */\r\n.m-btn {\r\n  border-radius: var(--border-radius);\r\n  font-weight: 600;\r\n  display: inline-block;\r\n  padding: 6px 16px;\r\n  font-size: var(--font-size-small);\r\n  outline: 0;\r\n  line-height: 1;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  border: 2px solid var(--primary-color);\r\n  background-color:transparent;\r\n  transition: background-color 0.2s;\r\n  user-select: none;\r\n  cursor: pointer;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\r\n}\r\n.m-btn.primary {\r\n  background-color: var(--primary-color);\r\n  color: var(--primary-color-invert);\r\n}\r\n.m-btn.thin-border { border-width: 1px; }\r\n.m-btn.large { padding:8px 14px; }\r\n.m-btn.small { padding:5px 12px; }\r\n.m-btn.tiny { padding:5px 6px; }\r\n.m-btn.circle { border-radius: 50%; }\r\n.m-btn:hover { \r\n  background-color: var(--primary-color);\r\n  color: var(--primary-color-invert);\r\n}\r\n.m-btn.nav { border: 2px solid var(--nav-accent-color); }\r\n.m-btn.nav:hover { \r\n  background-color: var(--nav-accent-color);\r\n}\r\n.m-btn:disabled{ \r\n  background-color: var(--bg3);\r\n  color: var(--fg3);\r\n  border-color: var(--fg3);\r\n  cursor: not-allowed;\r\n  opacity: 0.4;\r\n}\r\n.toolbar-btn{\r\n  cursor: pointer;\r\n  padding: 4px;\r\n  margin:0 2px;\r\n  font-size: var(--font-size-small);\r\n  min-width: 50px;\r\n  color: var(--primary-color-invert);\r\n  border-radius: 2px;\r\n  border: none;\r\n  background-color: var(--primary-color);\r\n}\r\n\r\ninput, textarea, select, button, pre {\r\n  color:var(--fg);\r\n  outline: none;\r\n  background-color: var(--input-bg);\r\n  border: 1px solid var(--border-color);\r\n  border-radius: var(--border-radius);\r\n}\r\nbutton {\r\n  font-family: var(--font-regular);\r\n}\r\n\r\n/* Form Inputs */\r\npre,\r\nselect,\r\ntextarea,\r\ninput[type=\"file\"],\r\ninput[type=\"text\"],\r\ninput[type=\"password\"] {\r\n  font-family: var(--font-mono);\r\n  font-weight: 400;\r\n  font-size: var(--font-size-small);\r\n  transition: border .2s;\r\n  padding: 6px 5px;\r\n}\r\n\r\nselect {\r\n  font-family: var(--font-regular);\r\n  padding: 5px 30px 5px 5px;\r\n  background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2212%22%20height%3D%2212%22%3E%3Cpath%20d%3D%22M10.3%203.3L6%207.6%201.7%203.3A1%201%200%2000.3%204.7l5%205a1%201%200%20001.4%200l5-5a1%201%200%2010-1.4-1.4z%22%20fill%3D%22%23777777%22%2F%3E%3C%2Fsvg%3E\"); \r\n  background-position: calc(100% - 5px) center;\r\n  background-repeat: no-repeat;  \r\n  background-size: 10px;\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  appearance: none;\r\n  cursor: pointer;\r\n}\r\n\r\nselect:hover {\r\n  border-color: var(--primary-color);\r\n}\r\n\r\ntextarea::placeholder,\r\ninput[type=\"text\"]::placeholder,\r\ninput[type=\"password\"]::placeholder {\r\n  color: var(--placeholder-color);\r\n  opacity:1;\r\n}\r\n\r\n\r\ninput[type=\"file\"]{\r\n  font-family: var(--font-regular);\r\n  padding:2px;\r\n  cursor:pointer;\r\n  border: 1px solid var(--primary-color);\r\n  min-height: calc(var(--font-size-small) + 18px);\r\n}\r\n\r\ninput[type=\"file\"]::-webkit-file-upload-button {\r\n  font-family: var(--font-regular);\r\n  font-size: var(--font-size-small);\r\n  outline: none;\r\n  cursor:pointer;\r\n  padding: 3px 8px;\r\n  border: 1px solid var(--primary-color);\r\n  background-color: var(--primary-color);\r\n  color: var(--primary-color-invert);\r\n  border-radius: var(--border-radius);;\r\n  -webkit-appearance: none;\r\n}\r\n\r\npre,\r\ntextarea {\r\n  scrollbar-width: thin;\r\n  scrollbar-color: var(--border-color) var(--input-bg);\r\n}\r\n\r\npre::-webkit-scrollbar,\r\ntextarea::-webkit-scrollbar {\r\n  width: 8px;\r\n  height: 8px;\r\n}\r\n\r\npre::-webkit-scrollbar-track,\r\ntextarea::-webkit-scrollbar-track {\r\n  background:var(--input-bg);\r\n}\r\n \r\npre::-webkit-scrollbar-thumb,\r\ntextarea::-webkit-scrollbar-thumb {\r\n  border-radius: 2px;\r\n  background-color: var(--border-color);\r\n}\r\n\r\n.link {\r\n  font-size:var(--font-size-small);\r\n  text-decoration: underline;\r\n  color:var(--blue);\r\n  font-family:var(--font-mono);\r\n  margin-bottom:2px;\r\n}\r\n\r\n/* Toggle Body */\r\ninput[type=\"checkbox\"] {\r\n  appearance: none;\r\n  display: inline-block;\r\n  background-color: var(--light-bg);\r\n  border: 1px solid var(--light-bg);\r\n  border-radius: 9px;\r\n  cursor: pointer;\r\n  height: 18px;\r\n  position: relative;\r\n  transition: border .25s .15s, box-shadow .25s .3s, padding .25s;\r\n  min-width: 36px;\r\n  width: 36px;\r\n  vertical-align: top;\r\n}\r\n/* Toggle Thumb */\r\ninput[type=\"checkbox\"]:after {\r\n  position: absolute;\r\n  background-color: var(--bg);\r\n  border: 1px solid var(--light-bg);\r\n  border-radius: 8px;\r\n  content: '';\r\n  top: 0px;\r\n  left: 0px;\r\n  right: 16px;\r\n  display: block;\r\n  height: 16px;\r\n  transition: border .25s .15s, left .25s .1s, right .15s .175s;\r\n}\r\n\r\n/* Toggle Body - Checked */\r\ninput[type=\"checkbox\"]:checked {\r\n  background-color: var(--green);\r\n  border-color: var(--green);\r\n}\r\n/* Toggle Thumb - Checked*/\r\ninput[type=\"checkbox\"]:checked:after {\r\n  border: 1px solid var(--green);\r\n  left: 16px;\r\n  right: 1px;\r\n  transition: border .25s, left .15s .25s, right .25s .175s;\r\n}`;\r\n","import { css } from 'lit';\r\n\r\nexport default css`\r\n.row, .col{\r\n  display:flex;\r\n} \r\n.row {\r\n  align-items:center;\r\n  flex-direction: row;\r\n}\r\n.col {\r\n  align-items:stretch;\r\n  flex-direction: column;\r\n}\r\n`;\r\n","import { css } from 'lit';\r\n\r\nexport default css`\r\n.m-table {\r\n  border-spacing: 0;  \r\n  border-collapse: separate;\r\n  border: 1px solid var(--light-border-color);\r\n  border-radius: var(--border-radius);\r\n  margin: 0;\r\n  max-width: 100%;\r\n  direction: ltr;\r\n}\r\n.m-table tr:first-child td,\r\n.m-table tr:first-child th {\r\n    border-top: 0 none;\r\n}\r\n.m-table td, \r\n.m-table th {\r\n  font-size: var(--font-size-small);\r\n  line-height: calc(var(--font-size-small) + 4px);\r\n  padding: 4px 5px 4px;\r\n  vertical-align: top;\r\n}\r\n\r\n.m-table.padded-12 td, \r\n.m-table.padded-12 th {\r\n  padding: 12px;\r\n}\r\n\r\n.m-table td:not([align]), \r\n.m-table th:not([align]) {\r\n  text-align: left;\r\n}\r\n\r\n.m-table th {\r\n  color: var(--fg2);\r\n  font-size: var(--font-size-small);\r\n  line-height: calc(var(--font-size-small) + 18px);\r\n  font-weight: 600;\r\n  letter-spacing: normal;\r\n  background-color: var(--bg2);\r\n  vertical-align: bottom;\r\n  border-bottom: 1px solid var(--light-border-color);\r\n}\r\n\r\n.m-table > tbody > tr > td,\r\n.m-table > tr > td {\r\n  border-top: 1px solid var(--light-border-color);\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n}\r\n.table-title {\r\n  font-size:var(--font-size-small);\r\n  font-weight:bold;\r\n  vertical-align: middle;\r\n  margin: 12px 0 4px 0;\r\n}\r\n`;\r\n","import { css } from 'lit';\r\n\r\nexport default css`\r\n.only-large-screen { display:none; }\r\n.endpoint-head .path{\r\n  display: flex;\r\n  font-family:var(--font-mono);\r\n  font-size: var(--font-size-small);\r\n  align-items: center;\r\n  overflow-wrap: break-word;\r\n  word-break: break-all;\r\n}\r\n\r\n.endpoint-head .descr {\r\n  font-size: var(--font-size-small);\r\n  color:var(--light-fg);\r\n  font-weight:400;\r\n  align-items: center;\r\n  overflow-wrap: break-word;\r\n  word-break: break-all;\r\n  display:none;\r\n}\r\n\r\n.m-endpoint.expanded{margin-bottom:16px; }\r\n.m-endpoint > .endpoint-head{\r\n  border-width:1px 1px 1px 5px;\r\n  border-style:solid;\r\n  border-color:transparent;\r\n  border-top-color:var(--light-border-color);\r\n  display:flex;\r\n  padding:6px 16px;\r\n  align-items: center;\r\n  cursor: pointer;\r\n}\r\n.m-endpoint > .endpoint-head.put:hover,\r\n.m-endpoint > .endpoint-head.put.expanded{\r\n  border-color:var(--orange); \r\n  background-color:var(--light-orange); \r\n}\r\n.m-endpoint > .endpoint-head.post:hover,\r\n.m-endpoint > .endpoint-head.post.expanded {\r\n  border-color:var(--green); \r\n  background-color:var(--light-green); \r\n}\r\n.m-endpoint > .endpoint-head.get:hover,\r\n.m-endpoint > .endpoint-head.get.expanded {\r\n  border-color:var(--blue); \r\n  background-color:var(--light-blue); \r\n}\r\n.m-endpoint > .endpoint-head.delete:hover,\r\n.m-endpoint > .endpoint-head.delete.expanded {\r\n  border-color:var(--red); \r\n  background-color:var(--light-red); \r\n}\r\n\r\n.m-endpoint > .endpoint-head.head:hover,\r\n.m-endpoint > .endpoint-head.head.expanded,\r\n.m-endpoint > .endpoint-head.patch:hover,\r\n.m-endpoint > .endpoint-head.patch.expanded,\r\n.m-endpoint > .endpoint-head.options:hover,\r\n.m-endpoint > .endpoint-head.options.expanded {\r\n  border-color:var(--yellow); \r\n  background-color:var(--light-yellow); \r\n}\r\n\r\n.m-endpoint > .endpoint-head.deprecated:hover,\r\n.m-endpoint > .endpoint-head.deprecated.expanded {\r\n  border-color:var(--border-color); \r\n  filter:opacity(0.6);\r\n}\r\n\r\n.m-endpoint .endpoint-body {\r\n  flex-wrap:wrap;\r\n  padding:16px 0px 0 0px;\r\n  border-width:0px 1px 1px 5px;\r\n  border-style:solid;\r\n  box-shadow: 0px 4px 3px -3px rgba(0, 0, 0, 0.15);\r\n}\r\n.m-endpoint .endpoint-body.delete{ border-color:var(--red); }\r\n.m-endpoint .endpoint-body.put{ border-color:var(--orange); }\r\n.m-endpoint .endpoint-body.post{border-color:var(--green);}\r\n.m-endpoint .endpoint-body.get{ border-color:var(--blue); }\r\n.m-endpoint .endpoint-body.head,\r\n.m-endpoint .endpoint-body.patch,\r\n.m-endpoint .endpoint-body.options { \r\n  border-color:var(--yellow); \r\n}\r\n\r\n.m-endpoint .endpoint-body.deprecated{ \r\n  border-color:var(--border-color);\r\n  filter:opacity(0.6);\r\n}\r\n\r\n.endpoint-head .deprecated{\r\n  color: var(--light-fg);\r\n  filter:opacity(0.6);\r\n}\r\n\r\n.summary{\r\n  padding:8px 8px;\r\n}\r\n.summary .title{\r\n  font-size:calc(var(--font-size-regular) + 2px);\r\n  margin-bottom: 6px;\r\n  word-break: break-all;\r\n}\r\n\r\n.endpoint-head .method{\r\n  padding:2px 5px;\r\n  vertical-align: middle;\r\n  font-size:var(--font-size-small);\r\n  height: calc(var(--font-size-small) + 16px);\r\n  line-height: calc(var(--font-size-small) + 8px);\r\n  width: 60px;\r\n  border-radius: 2px;\r\n  display:inline-block;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  text-transform:uppercase;\r\n  margin-right:5px;\r\n}\r\n.endpoint-head .method.delete{ border: 2px solid var(--red);}\r\n.endpoint-head .method.put{ border: 2px solid var(--orange); }\r\n.endpoint-head .method.post{ border: 2px solid var(--green); }\r\n.endpoint-head .method.get{ border: 2px solid var(--blue); }\r\n.endpoint-head .method.get.deprecated{ border: 2px solid var(--border-color); }\r\n.endpoint-head .method.head,\r\n.endpoint-head .method.patch,\r\n.endpoint-head .method.options { \r\n  border: 2px solid var(--yellow); \r\n}\r\n\r\n.req-resp-container {\r\n  display: flex;\r\n  margin-top:16px;\r\n  align-items: stretch;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n  border-top:1px solid var(--light-border-color);\r\n}\r\n\r\n.view-mode-request,\r\napi-response.view-mode {\r\n  flex:1; \r\n  min-height:100px;\r\n  padding:16px 8px;\r\n  overflow:hidden;\r\n}\r\n.view-mode-request {\r\n  border-width:0 0 1px 0;\r\n  border-style:dashed;\r\n}\r\n\r\n.head .view-mode-request,\r\n.patch .view-mode-request,\r\n.options .view-mode-request { \r\n  border-color:var(--yellow); \r\n}\r\n.put .view-mode-request { \r\n  border-color:var(--orange); \r\n}\r\n.post .view-mode-request { \r\n  border-color:var(--green); \r\n}\r\n.get .view-mode-request { \r\n  border-color:var(--blue); \r\n}\r\n.delete .view-mode-request { \r\n  border-color:var(--red); \r\n}\r\n\r\n@media only screen and (min-width: 1024px) {\r\n  .only-large-screen { display:block; }\r\n  .endpoint-head .path{\r\n    font-size: var(--font-size-regular);\r\n  }\r\n  .endpoint-head .descr{\r\n    display: flex;\r\n  }\r\n  .endpoint-head .m-markdown-small,\r\n  .descr .m-markdown-small{\r\n    display:block;\r\n  }\r\n  .req-resp-container{\r\n    flex-direction: var(--layout, row);\r\n    flex-wrap: nowrap;\r\n  }\r\n  api-response.view-mode {\r\n    padding:16px;\r\n  }\r\n  .view-mode-request.row-layout {\r\n    border-width:0 1px 0 0;\r\n    padding:16px;\r\n  }\r\n  .summary{\r\n    padding:8px 16px;\r\n  }\r\n}\r\n`;\r\n","import { css } from 'lit';\r\n\r\nexport default css`\r\ncode[class*=\"language-\"],\r\npre[class*=\"language-\"] {\r\n  text-align: left;\r\n  white-space: pre;\r\n  word-spacing: normal;\r\n  word-break: normal;\r\n  word-wrap: normal;\r\n  line-height: 1.5;\r\n  tab-size: 2;\r\n\r\n  -webkit-hyphens: none;\r\n  -moz-hyphens: none;\r\n  -ms-hyphens: none;\r\n  hyphens: none;\r\n}\r\n\r\n/* Code blocks */\r\npre[class*=\"language-\"] {\r\n  padding: 1em;\r\n  margin: .5em 0;\r\n  overflow: auto;\r\n}\r\n\r\n/* Inline code */\r\n:not(pre) > code[class*=\"language-\"] {\r\n  white-space: normal;\r\n}\r\n\r\n.token.comment,\r\n.token.block-comment,\r\n.token.prolog,\r\n.token.doctype,\r\n.token.cdata {\r\n  color: var(--light-fg)\r\n}\r\n\r\n.token.punctuation {\r\n  color: var(--fg);\r\n}\r\n\r\n.token.tag,\r\n.token.attr-name,\r\n.token.namespace,\r\n.token.deleted {\r\n  color:var(--pink);\r\n}\r\n\r\n.token.function-name {\r\n  color: var(--blue);\r\n}\r\n\r\n.token.boolean,\r\n.token.number,\r\n.token.function {\r\n  color: var(--red);\r\n}\r\n\r\n.token.property,\r\n.token.class-name,\r\n.token.constant,\r\n.token.symbol {\r\n  color: var(--code-property-color);\r\n}\r\n\r\n.token.selector,\r\n.token.important,\r\n.token.atrule,\r\n.token.keyword,\r\n.token.builtin {\r\n  color: var(--code-keyword-color);\r\n}\r\n\r\n.token.string,\r\n.token.char,\r\n.token.attr-value,\r\n.token.regex,\r\n.token.variable { \r\n  color: var(--green);\r\n}\r\n\r\n.token.operator,\r\n.token.entity,\r\n.token.url {\r\n  color: var(--code-operator-color);\r\n}\r\n\r\n.token.important,\r\n.token.bold {\r\n  font-weight: bold;\r\n}\r\n.token.italic {\r\n  font-style: italic;\r\n}\r\n\r\n.token.entity {\r\n  cursor: help;\r\n}\r\n\r\n.token.inserted {\r\n  color: green;\r\n}\r\n`;\r\n","import { css } from 'lit';\r\n\r\nexport default css`\r\n.tab-panel {\r\n  border: none;\r\n}\r\n.tab-buttons {\r\n  height:30px;\r\n  padding: 4px 4px 0 4px;\r\n  border-bottom: 1px solid var(--light-border-color) ;\r\n  align-items: stretch;\r\n  overflow-y: hidden;\r\n  overflow-x: auto;\r\n  scrollbar-width: thin;\r\n}\r\n.tab-buttons::-webkit-scrollbar {\r\n  height: 1px;\r\n  background-color: var(--border-color);\r\n}\r\n.tab-btn {\r\n  border: none;\r\n  border-bottom: 3px solid transparent; \r\n  color: var(--light-fg);\r\n  background-color: transparent;\r\n  white-space: nowrap;\r\n  cursor:pointer;\r\n  outline:none;\r\n  font-family:var(--font-regular); \r\n  font-size:var(--font-size-small);\r\n  margin-right:16px;\r\n  padding:1px;\r\n}\r\n.tab-btn.active {\r\n  border-bottom: 3px solid var(--primary-color); \r\n  font-weight:bold;\r\n  color:var(--primary-color);\r\n}\r\n\r\n.tab-btn:hover {\r\n  color:var(--primary-color);\r\n}\r\n.tab-content {\r\n  margin:-1px 0 0 0;\r\n  position:relative;\r\n  min-height: 50px;\r\n}\r\n`;\r\n","import { css } from 'lit';\r\n\r\nexport default css`\r\n.nav-bar-info:focus-visible,\r\n.nav-bar-tag:focus-visible,\r\n.nav-bar-path:focus-visible {\r\n  outline: 1px solid;\r\n  box-shadow: none;\r\n  outline-offset: -4px;\r\n}\r\n.nav-bar-expand-all:focus-visible,\r\n.nav-bar-collapse-all:focus-visible,\r\n.nav-bar-tag-icon:focus-visible {\r\n  outline: 1px solid;\r\n  box-shadow: none;\r\n  outline-offset: 2px;\r\n}\r\n.nav-bar {\r\n  width:0;\r\n  height:100%;\r\n  overflow: hidden;\r\n  color:var(--nav-text-color);\r\n  background-color: var(--nav-bg-color);\r\n  background-blend-mode: multiply;\r\n  line-height: calc(var(--font-size-small) + 4px);\r\n  display:none;\r\n  position:relative;\r\n  flex-direction:column;\r\n  flex-wrap:nowrap;\r\n  word-break:break-word;\r\n}\r\n::slotted([slot=nav-logo]){\r\n  padding:16px 16px 0 16px;\r\n}\r\n.nav-scroll {\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  overflow-y: overlay;\r\n  scrollbar-width: thin;\r\n  scrollbar-color: var(--nav-hover-bg-color) transparent;\r\n}\r\n\r\n.nav-bar-tag {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: row;\r\n}\r\n.nav-bar.read .nav-bar-tag-icon {\r\n  display:none;\r\n}\r\n.nav-bar-paths-under-tag {\r\n  overflow:hidden;\r\n  transition: max-height .2s ease-out, visibility .3s;\r\n}\r\n.collapsed .nav-bar-paths-under-tag {\r\n  visibility: hidden;\r\n}\r\n\r\n.nav-bar-expand-all {\r\n  transform: rotate(90deg); \r\n  cursor:pointer; \r\n  margin-right:10px;\r\n}\r\n.nav-bar-collapse-all {\r\n  transform: rotate(270deg); \r\n  cursor:pointer;\r\n}\r\n.nav-bar-expand-all:hover, .nav-bar-collapse-all:hover {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.nav-bar-tag-icon {\r\n  color: var(--nav-text-color);\r\n  font-size: 20px; \r\n}\r\n.nav-bar-tag-icon:hover {\r\n  color:var(--nav-hover-text-color);\r\n}\r\n.nav-bar.focused .nav-bar-tag-and-paths.collapsed .nav-bar-tag-icon::after {\r\n  content: '⌵';\r\n  width:16px;\r\n  height:16px;\r\n  text-align: center;\r\n  display: inline-block;\r\n  transform: rotate(-90deg);\r\n  transition: transform 0.2s ease-out 0s;\r\n}\r\n.nav-bar.focused .nav-bar-tag-and-paths.expanded .nav-bar-tag-icon::after {\r\n  content: '⌵';\r\n  width:16px;\r\n  height:16px;\r\n  text-align: center;\r\n  display: inline-block;\r\n  transition: transform 0.2s ease-out 0s;\r\n}\r\n.nav-scroll::-webkit-scrollbar {\r\n  width: var(--scroll-bar-width, 8px);\r\n}\r\n.nav-scroll::-webkit-scrollbar-track {\r\n  background:transparent;\r\n}\r\n.nav-scroll::-webkit-scrollbar-thumb {\r\n  background-color: var(--nav-hover-bg-color);\r\n}\r\n\r\n.nav-bar-tag {\r\n  font-size: var(--font-size-regular);\r\n  color: var(--nav-accent-color);\r\n  border-left:4px solid transparent;\r\n  font-weight:bold;\r\n  padding: 15px 15px 15px 10px;\r\n  text-transform: capitalize;\r\n}\r\n\r\n.nav-bar-components,\r\n.nav-bar-h1,\r\n.nav-bar-h2,\r\n.nav-bar-info,\r\n.nav-bar-tag,\r\n.nav-bar-path {\r\n  display:flex;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  border: none;\r\n  border-radius:4px; \r\n  color: var(--nav-text-color);\r\n  background: transparent;\r\n  border-left:4px solid transparent;\r\n}\r\n\r\n.nav-bar-h1,\r\n.nav-bar-h2,\r\n.nav-bar-path {\r\n  font-size: calc(var(--font-size-small) + 1px);\r\n  padding: var(--nav-item-padding);\r\n}\r\n.nav-bar-path.small-font {\r\n  font-size: var(--font-size-small);\r\n}\r\n\r\n.nav-bar-info {\r\n  font-size: var(--font-size-regular);\r\n  padding: 16px 10px;\r\n  font-weight:bold;\r\n}\r\n.nav-bar-section {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  font-size: var(--font-size-small);\r\n  color: var(--nav-text-color);\r\n  padding: var(--nav-item-padding);\r\n  font-weight:bold;\r\n}\r\n.nav-bar-section.operations {\r\n  cursor:pointer;\r\n}\r\n.nav-bar-section.operations:hover {\r\n  color:var(--nav-hover-text-color);\r\n  background-color:var(--nav-hover-bg-color);\r\n}\r\n\r\n.nav-bar-section:first-child {\r\n  display: none;\r\n}\r\n.nav-bar-h2 {margin-left:12px;}\r\n\r\n.nav-bar-h1.left-bar.active,\r\n.nav-bar-h2.left-bar.active,\r\n.nav-bar-info.left-bar.active,\r\n.nav-bar-tag.left-bar.active,\r\n.nav-bar-path.left-bar.active,\r\n.nav-bar-section.left-bar.operations.active {\r\n  border-left:4px solid var(--nav-accent-color);\r\n  color:var(--nav-hover-text-color);\r\n}\r\n\r\n.nav-bar-h1.colored-block.active,\r\n.nav-bar-h2.colored-block.active,\r\n.nav-bar-info.colored-block.active,\r\n.nav-bar-tag.colored-block.active,\r\n.nav-bar-path.colored-block.active,\r\n.nav-bar-section.colored-block.operations.active {\r\n  background-color: var(--nav-accent-color);\r\n  color: var(--nav-accent-text-color);\r\n  border-radius: 0;\r\n}\r\n\r\n.nav-bar-h1:hover,\r\n.nav-bar-h2:hover,\r\n.nav-bar-info:hover,\r\n.nav-bar-tag:hover,\r\n.nav-bar-path:hover {\r\n  color:var(--nav-hover-text-color);\r\n  background-color:var(--nav-hover-bg-color);\r\n}\r\n`;\r\n","import { css } from 'lit';\r\n\r\nexport default css`\r\n#api-info {\r\n  font-size: calc(var(--font-size-regular) - 1px);\r\n  margin-top: 8px;\r\n  margin-left: -15px;\r\n}\r\n\r\n#api-info span:before {\r\n  content: \"|\";\r\n  display: inline-block;\r\n  opacity: 0.5;\r\n  width: 15px;\r\n  text-align: center;\r\n}\r\n#api-info span:first-child:before {\r\n  content: \"\";\r\n  width: 0px;\r\n}\r\n`;\r\n","import { css } from 'lit';\r\n\r\n/*\r\nThis file is reserved for any custom css that developers want to add to\r\ncustomize their theme. Simply add your css to this file and yarn build.\r\n*/\r\n\r\nexport default css`\r\n\r\n`;\r\n","/* For Delayed Event Handler Execution */\r\nexport function debounce(fn, delay) {\r\n  let timeoutID = null;\r\n  return (...args) => {\r\n    clearTimeout(timeoutID);\r\n    const that = this;\r\n    timeoutID = setTimeout(() => {\r\n      fn.apply(that, args);\r\n    }, delay);\r\n  };\r\n}\r\n\r\nexport const invalidCharsRegEx = /[\\s#:?&={}]/g; // used for generating valid html element ids by replacing the invalid chars with hyphen (-)\r\nexport const rapidocApiKey = '_rapidoc_api_key';\r\n\r\nexport function sleep(ms) {\r\n  // eslint-disable-next-line no-promise-executor-return\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function copyToClipboard(data, e) {\r\n  const btnEl = e.target;\r\n  const textArea = document.createElement('textarea');\r\n  textArea.value = data;\r\n  textArea.style.position = 'fixed'; // avoid scrolling to bottom\r\n  document.body.appendChild(textArea);\r\n  textArea.focus();\r\n  textArea.select();\r\n  try {\r\n    document.execCommand('copy');\r\n    btnEl.innerText = 'Copied';\r\n    setTimeout(() => {\r\n      btnEl.innerText = 'Copy';\r\n    }, 5000);\r\n  } catch (err) {\r\n    console.error('Unable to copy', err); // eslint-disable-line no-console\r\n  }\r\n  document.body.removeChild(textArea);\r\n}\r\n\r\nexport function getBaseUrlFromUrl(url) {\r\n  const pathArray = url.split('/');\r\n  return `${pathArray[0]}//${pathArray[2]}`;\r\n}\r\n\r\nexport async function wait(ms) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, ms);\r\n  });\r\n}\r\n\r\nexport function componentIsInSearch(searchVal, component) {\r\n  return component.name.toLowerCase().includes(searchVal.toLowerCase());\r\n}\r\n\r\nexport function pathIsInSearch(searchVal, path, matchType = 'includes') {\r\n  if (matchType === 'includes') {\r\n    const stringToSearch = `${path.method} ${path.path} ${path.summary || path.description || ''} ${path.operationId || ''}`.toLowerCase();\r\n    return stringToSearch.includes(searchVal.toLowerCase());\r\n  }\r\n  const regex = new RegExp(searchVal, 'i');\r\n  return regex.test(`${path.method} ${path.path}`);\r\n}\r\n\r\nexport function schemaKeys(schemaProps, result = new Set()) {\r\n  if (!schemaProps) {\r\n    return result;\r\n  }\r\n  Object.keys(schemaProps).forEach((key) => {\r\n    result.add(key);\r\n    if (schemaProps[key].properties) {\r\n      schemaKeys(schemaProps[key].properties, result);\r\n    } else if (schemaProps[key].items?.properties) {\r\n      schemaKeys(schemaProps[key].items?.properties, result);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\nexport function advancedSearch(searchVal, allSpecTags, searchOptions = []) {\r\n  if (!searchVal.trim() || searchOptions.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const pathsMatched = [];\r\n  allSpecTags.forEach((tag) => {\r\n    tag.paths.forEach((path) => {\r\n      let stringToSearch = '';\r\n      if (searchOptions.includes('search-api-path')) {\r\n        stringToSearch = path.path;\r\n      }\r\n      if (searchOptions.includes('search-api-descr')) {\r\n        stringToSearch = `${stringToSearch} ${path.summary || path.description || ''}`;\r\n      }\r\n      if (searchOptions.includes('search-api-params')) {\r\n        stringToSearch = `${stringToSearch} ${path.parameters?.map((v) => v.name).join(' ') || ''}`;\r\n      }\r\n\r\n      if (searchOptions.includes('search-api-request-body') && path.requestBody) {\r\n        let schemaKeySet = new Set();\r\n        for (const contentType in path.requestBody?.content) {\r\n          if (path.requestBody.content[contentType].schema?.properties) {\r\n            schemaKeySet = schemaKeys(path.requestBody.content[contentType].schema?.properties);\r\n          }\r\n          stringToSearch = `${stringToSearch} ${[...schemaKeySet].join(' ')}`;\r\n        }\r\n      }\r\n\r\n      if (searchOptions.includes('search-api-resp-descr')) {\r\n        stringToSearch = `${stringToSearch} ${Object.values(path.responses).map((v) => v.description || '').join(' ')}`;\r\n      }\r\n\r\n      if (stringToSearch.toLowerCase().includes(searchVal.trim().toLowerCase())) {\r\n        pathsMatched.push({\r\n          elementId: path.elementId,\r\n          method: path.method,\r\n          path: path.path,\r\n          summary: path.summary || path.description || '',\r\n          deprecated: path.deprecated,\r\n        });\r\n      }\r\n    });\r\n  });\r\n  return pathsMatched;\r\n}\r\n\r\n/*\r\nexport function prettyXml(sourceXmlString) {\r\n  const xmlDoc = new DOMParser().parseFromString(sourceXmlString, 'text/xml');\r\n  const xsltDoc = new DOMParser().parseFromString([\r\n    // describes how we want to modify the XML - indent everything\r\n    `<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n      <xsl:strip-space elements=\"*\"/>\r\n        <xsl:template match=\"para[content-style][not(text())]\">\r\n          <xsl:value-of select=\"normalize-space(.)\"/>\r\n        </xsl:template>\r\n        <xsl:template match=\"node()|@*\">\r\n          <xsl:copy><xsl:apply-templates select=\"node()|@*\"/></xsl:copy>\r\n        </xsl:template>\r\n        <xsl:output indent=\"yes\"/>\r\n      </xsl:stylesheet>`,\r\n  ].join('\\n'), 'application/xml');\r\n  const xsltProcessor = new XSLTProcessor();\r\n  xsltProcessor.importStylesheet(xsltDoc);\r\n  const resultDoc = xsltProcessor.transformToDocument(xmlDoc);\r\n  return new XMLSerializer().serializeToString(resultDoc);\r\n}\r\n*/\r\n\r\nexport function downloadResource(url, fileName) {\r\n  if (url) {\r\n    const a = document.createElement('a');\r\n    document.body.appendChild(a);\r\n    a.style = 'display: none';\r\n    a.href = url;\r\n    a.download = fileName;\r\n    a.click();\r\n    a.remove();\r\n  }\r\n}\r\n\r\nexport function viewResource(url) {\r\n  if (url) {\r\n    const a = document.createElement('a');\r\n    document.body.appendChild(a);\r\n    a.style = 'display: none';\r\n    a.href = url;\r\n    a.target = '_blank';\r\n    a.click();\r\n    a.remove();\r\n  }\r\n}\r\n","/* eslint-disable arrow-body-style */\r\nimport { html } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\n\r\nconst codeVerifier = '731DB1C3F7EA533B85E29492D26AA-1234567890-1234567890';\r\nconst codeChallenge = '4FatVDBJKPAo4JgLLaaQFMUcQPn5CrPRvLlaob9PTYc'; // Base64 encoded SHA-256\r\n\r\nconst localStorageKey = 'rapidoc';\r\n\r\nexport function applyApiKey(securitySchemeId, username = '', password = '', providedApikeyVal = '') {\r\n  const securityObj = this.resolvedSpec.securitySchemes?.find((v) => (v.securitySchemeId === securitySchemeId));\r\n  if (!securityObj) {\r\n    return false;\r\n  }\r\n  let finalApiKeyValue = '';\r\n  if (securityObj.scheme?.toLowerCase() === 'basic') {\r\n    if (username) {\r\n      finalApiKeyValue = `Basic ${Buffer.from(`${username}:${password}`, 'utf8').toString('base64')}`;\r\n    }\r\n  } else if (providedApikeyVal) {\r\n    securityObj.value = providedApikeyVal;\r\n    finalApiKeyValue = `${securityObj.scheme?.toLowerCase() === 'bearer' ? 'Bearer ' : ''}${providedApikeyVal}`;\r\n  }\r\n  if (finalApiKeyValue) {\r\n    securityObj.finalKeyValue = finalApiKeyValue;\r\n    this.requestUpdate();\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function onClearAllApiKeys() {\r\n  this.resolvedSpec.securitySchemes?.forEach((v) => {\r\n    v.user = '';\r\n    v.password = '';\r\n    v.value = '';\r\n    v.finalKeyValue = '';\r\n  });\r\n  this.requestUpdate();\r\n}\r\n\r\nfunction getPersistedApiKeys() {\r\n  return JSON.parse(localStorage.getItem(localStorageKey)) || {};\r\n}\r\n\r\nfunction setPersistedApiKeys(obj) {\r\n  localStorage.setItem(localStorageKey, JSON.stringify(obj));\r\n}\r\n\r\nexport function recoverPersistedApiKeys() {\r\n  const rapidocLs = getPersistedApiKeys.call(this);\r\n  Object.values(rapidocLs).forEach((p) => {\r\n    applyApiKey.call(this, p.securitySchemeId, p.username, p.password, p.value);\r\n  });\r\n}\r\n\r\nfunction onApiKeyChange(securitySchemeId) {\r\n  let apiKeyValue = '';\r\n  const securityObj = this.resolvedSpec.securitySchemes.find((v) => (v.securitySchemeId === securitySchemeId));\r\n  if (securityObj) {\r\n    const trEl = this.shadowRoot.getElementById(`security-scheme-${securitySchemeId}`);\r\n    if (trEl) {\r\n      if (securityObj.type && securityObj.scheme && securityObj.type === 'http' && securityObj.scheme.toLowerCase() === 'basic') {\r\n        const userVal = trEl.querySelector('.api-key-user').value.trim();\r\n        const passwordVal = trEl.querySelector('.api-key-password').value.trim();\r\n        applyApiKey.call(this, securitySchemeId, userVal, passwordVal);\r\n      } else {\r\n        apiKeyValue = trEl.querySelector('.api-key-input').value.trim();\r\n        applyApiKey.call(this, securitySchemeId, '', '', apiKeyValue);\r\n      }\r\n      if (this.persistAuth === 'true') {\r\n        const rapidocLs = getPersistedApiKeys.call(this);\r\n        rapidocLs[securitySchemeId] = securityObj;\r\n        setPersistedApiKeys.call(this, rapidocLs);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Updates the OAuth Access Token (API key), so it reflects in UI and gets used in TRY calls\r\nfunction updateOAuthKey(securitySchemeId, accessToken, tokenType = 'Bearer') {\r\n  const securityObj = this.resolvedSpec.securitySchemes.find((v) => (v.securitySchemeId === securitySchemeId));\r\n  securityObj.finalKeyValue = `${(tokenType.toLowerCase() === 'bearer' ? 'Bearer' : (tokenType.toLowerCase() === 'mac' ? 'MAC' : tokenType))} ${accessToken}`;\r\n  this.requestUpdate();\r\n}\r\n\r\n/* eslint-disable no-console */\r\n// Gets Access-Token in exchange of Authorization Code\r\nasync function fetchAccessToken(tokenUrl, clientId, clientSecret, redirectUrl, grantType, authCode, securitySchemeId, authFlowDivEl, sendClientSecretIn = 'header', scopes = null, username = null, password = null) {\r\n  const respDisplayEl = authFlowDivEl ? authFlowDivEl.querySelector('.oauth-resp-display') : undefined;\r\n  const urlFormParams = new URLSearchParams();\r\n  const headers = new Headers();\r\n  urlFormParams.append('grant_type', grantType);\r\n  if (grantType === 'authorization_code') {\r\n    urlFormParams.append('client_id', clientId);\r\n    urlFormParams.append('client_secret', clientSecret);\r\n  }\r\n  if (grantType !== 'client_credentials' && grantType !== 'password') {\r\n    urlFormParams.append('redirect_uri', redirectUrl);\r\n  }\r\n  if (authCode) {\r\n    urlFormParams.append('code', authCode);\r\n    urlFormParams.append('code_verifier', codeVerifier); // for PKCE\r\n  }\r\n  if (sendClientSecretIn === 'header') {\r\n    headers.set('Authorization', `Basic ${Buffer.from(`${clientId}:${clientSecret}`, 'utf8').toString('base64')}`);\r\n  } else if (grantType !== 'authorization_code') {\r\n    urlFormParams.append('client_id', clientId);\r\n    urlFormParams.append('client_secret', clientSecret);\r\n  }\r\n  if (grantType === 'password') {\r\n    urlFormParams.append('username', username);\r\n    urlFormParams.append('password', password);\r\n  }\r\n  if (scopes) {\r\n    urlFormParams.append('scope', scopes);\r\n  }\r\n\r\n  try {\r\n    const resp = await fetch(tokenUrl, { method: 'POST', headers, body: urlFormParams });\r\n    const tokenResp = await resp.json();\r\n    if (resp.ok) {\r\n      if (tokenResp.token_type && tokenResp.access_token) {\r\n        updateOAuthKey.call(this, securitySchemeId, tokenResp.access_token, tokenResp.token_type);\r\n        if (respDisplayEl) {\r\n          respDisplayEl.innerHTML = '<span style=\"color:var(--green)\">Access Token Received</span>';\r\n        }\r\n        return true;\r\n      }\r\n    } else {\r\n      if (respDisplayEl) {\r\n        respDisplayEl.innerHTML = `<span style=\"color:var(--red)\">${tokenResp.error_description || tokenResp.error_description || 'Unable to get access token'}</span>`;\r\n      }\r\n      return false;\r\n    }\r\n  } catch (err) {\r\n    if (respDisplayEl) {\r\n      respDisplayEl.innerHTML = '<span style=\"color:var(--red)\">Failed to get access token</span>';\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n// Gets invoked when it receives the Authorization Code from the other window via message-event\r\nasync function onWindowMessageEvent(msgEvent, winObj, tokenUrl, clientId, clientSecret, redirectUrl, grantType, sendClientSecretIn, securitySchemeId, authFlowDivEl) {\r\n  sessionStorage.removeItem('winMessageEventActive');\r\n  winObj.close();\r\n  if (msgEvent.data.fake) {\r\n    return;\r\n  }\r\n  if (!msgEvent.data) {\r\n    console.warn('RapiDoc: Received no data with authorization message');\r\n  }\r\n  if (msgEvent.data.error) {\r\n    console.warn('RapiDoc: Error while receiving data');\r\n  }\r\n  if (msgEvent.data) {\r\n    if (msgEvent.data.responseType === 'code') {\r\n      // Authorization Code flow\r\n      fetchAccessToken.call(this, tokenUrl, clientId, clientSecret, redirectUrl, grantType, msgEvent.data.code, securitySchemeId, authFlowDivEl, sendClientSecretIn);\r\n    } else if (msgEvent.data.responseType === 'token') {\r\n      // Implicit flow\r\n      updateOAuthKey.call(this, securitySchemeId, msgEvent.data.access_token, msgEvent.data.token_type);\r\n    }\r\n  }\r\n}\r\n\r\n// code_challenge generator for PKCE flow\r\n// TODO: Implement dynamic generation of code-challenge based on code-verifier\r\n/*\r\nasync function generateCodeChallenge() {\r\n  const encoder = new TextEncoder();\r\n  const data = encoder.encode(codeVerifier);\r\n  const sha256Hash = await window.crypto.subtle.digest('SHA-256', data); // returns Unit8Array\r\n  // const utf8Decoder = new TextDecoder();\r\n  // const b64EncodedSha256 = btoa(utf8Decoder.decode(sha256Hash));\r\n  const b64EncodedSha256 = base64encode(sha256Hash);\r\n  return b64EncodedSha256;\r\n}\r\n*/\r\n\r\nasync function onInvokeOAuthFlow(securitySchemeId, flowType, authUrl, tokenUrl, e) {\r\n  const authFlowDivEl = e.target.closest('.oauth-flow');\r\n  const clientId = authFlowDivEl.querySelector('.oauth-client-id') ? authFlowDivEl.querySelector('.oauth-client-id').value.trim() : '';\r\n  const clientSecret = authFlowDivEl.querySelector('.oauth-client-secret') ? authFlowDivEl.querySelector('.oauth-client-secret').value.trim() : '';\r\n  const username = authFlowDivEl.querySelector('.api-key-user') ? authFlowDivEl.querySelector('.api-key-user').value.trim() : '';\r\n  const password = authFlowDivEl.querySelector('.api-key-password') ? authFlowDivEl.querySelector('.api-key-password').value.trim() : '';\r\n  const sendClientSecretIn = authFlowDivEl.querySelector('.oauth-send-client-secret-in') ? authFlowDivEl.querySelector('.oauth-send-client-secret-in').value.trim() : 'header';\r\n  const checkedScopeEls = [...authFlowDivEl.querySelectorAll('.scope-checkbox:checked')];\r\n  const pkceCheckboxEl = authFlowDivEl.querySelector(`#${securitySchemeId}-pkce`);\r\n  const state = (`${Math.random().toString(36).slice(2, 9)}random${Math.random().toString(36).slice(2, 9)}`);\r\n  const nonce = (`${Math.random().toString(36).slice(2, 9)}random${Math.random().toString(36).slice(2, 9)}`);\r\n  // const codeChallenge = await generateCodeChallenge(codeVerifier);\r\n  const redirectUrlObj = new URL(`${window.location.origin}${window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/'))}/${this.oauthReceiver}`);\r\n  let grantType = '';\r\n  let responseType = '';\r\n  let newWindow;\r\n\r\n  // clear previous error messages\r\n  const errEls = [...authFlowDivEl.parentNode.querySelectorAll('.oauth-resp-display')];\r\n  errEls.forEach((v) => { v.innerHTML = ''; });\r\n\r\n  if (flowType === 'authorizationCode' || flowType === 'implicit') {\r\n    const authUrlObj = new URL(authUrl);\r\n    if (flowType === 'authorizationCode') {\r\n      grantType = 'authorization_code';\r\n      responseType = 'code';\r\n    } else if (flowType === 'implicit') {\r\n      responseType = 'token';\r\n    }\r\n    const authCodeParams = new URLSearchParams(authUrlObj.search);\r\n    const selectedScopes = checkedScopeEls.map((v) => v.value).join(' ');\r\n    if (selectedScopes) {\r\n      authCodeParams.set('scope', selectedScopes);\r\n    }\r\n    authCodeParams.set('client_id', clientId);\r\n    authCodeParams.set('redirect_uri', redirectUrlObj.toString());\r\n    authCodeParams.set('response_type', responseType);\r\n    authCodeParams.set('state', state);\r\n    authCodeParams.set('nonce', nonce);\r\n    if (pkceCheckboxEl && pkceCheckboxEl.checked) {\r\n      authCodeParams.set('code_challenge', codeChallenge);\r\n      authCodeParams.set('code_challenge_method', 'S256');\r\n    }\r\n    authCodeParams.set('show_dialog', true);\r\n    authUrlObj.search = authCodeParams.toString();\r\n    // If any older message-event-listener is active then fire a fake message to remove it (these are single time listeners)\r\n    if (sessionStorage.getItem('winMessageEventActive') === 'true') {\r\n      window.postMessage({ fake: true }, this);\r\n    }\r\n    setTimeout(() => {\r\n      newWindow = window.open(authUrlObj.toString());\r\n      if (!newWindow) {\r\n        console.error(`RapiDoc: Unable to open ${authUrlObj.toString()} in a new window`);\r\n      } else {\r\n        sessionStorage.setItem('winMessageEventActive', 'true');\r\n        window.addEventListener(\r\n          'message',\r\n          (msgEvent) => onWindowMessageEvent.call(this, msgEvent, newWindow, tokenUrl, clientId, clientSecret, redirectUrlObj.toString(), grantType, sendClientSecretIn, securitySchemeId, authFlowDivEl),\r\n          { once: true },\r\n        );\r\n      }\r\n    }, 10);\r\n  } else if (flowType === 'clientCredentials') {\r\n    grantType = 'client_credentials';\r\n    const selectedScopes = checkedScopeEls.map((v) => v.value).join(' ');\r\n    fetchAccessToken.call(this, tokenUrl, clientId, clientSecret, redirectUrlObj.toString(), grantType, '', securitySchemeId, authFlowDivEl, sendClientSecretIn, selectedScopes);\r\n  } else if (flowType === 'password') {\r\n    grantType = 'password';\r\n    const selectedScopes = checkedScopeEls.map((v) => v.value).join(' ');\r\n    fetchAccessToken.call(this, tokenUrl, clientId, clientSecret, redirectUrlObj.toString(), grantType, '', securitySchemeId, authFlowDivEl, sendClientSecretIn, selectedScopes, username, password);\r\n  }\r\n}\r\n/* eslint-enable no-console */\r\n\r\n/* eslint-disable indent */\r\n\r\nfunction oAuthFlowTemplate(flowName, clientId, clientSecret, securitySchemeId, authFlow, defaultScopes = [], receiveTokenIn = 'header') {\r\n  let { authorizationUrl, tokenUrl, refreshUrl } = authFlow;\r\n  const pkceOnly = authFlow['x-pkce-only'] || false;\r\n  const isUrlAbsolute = (url) => (url.indexOf('://') > 0 || url.indexOf('//') === 0);\r\n  // Calculcate base URL\r\n  const url = new URL(this.selectedServer.computedUrl);\r\n  const baseUrl = url.origin;\r\n\r\n  if (refreshUrl && !isUrlAbsolute(refreshUrl)) {\r\n    refreshUrl = `${baseUrl}/${refreshUrl.replace(/^\\//, '')}`;\r\n  }\r\n  if (tokenUrl && !isUrlAbsolute(tokenUrl)) {\r\n    tokenUrl = `${baseUrl}/${tokenUrl.replace(/^\\//, '')}`;\r\n  }\r\n  if (authorizationUrl && !isUrlAbsolute(authorizationUrl)) {\r\n    authorizationUrl = `${baseUrl}/${authorizationUrl.replace(/^\\//, '')}`;\r\n  }\r\n  let flowNameDisplay;\r\n  if (flowName === 'authorizationCode') {\r\n    flowNameDisplay = 'Authorization Code Flow';\r\n  } else if (flowName === 'clientCredentials') {\r\n    flowNameDisplay = 'Client Credentials Flow';\r\n  } else if (flowName === 'implicit') {\r\n    flowNameDisplay = 'Implicit Flow';\r\n  } else if (flowName === 'password') {\r\n    flowNameDisplay = 'Password Flow';\r\n  } else {\r\n    flowNameDisplay = flowName;\r\n  }\r\n  return html`\r\n    <div class=\"oauth-flow ${flowName}\" style=\"padding: 12px 0; margin-bottom:12px;\">\r\n      <div class=\"tiny-title upper\" style=\"margin-bottom:8px;\">${flowNameDisplay}</div>\r\n      ${authorizationUrl\r\n        ? html`<div style=\"margin-bottom:5px\"><span style=\"width:75px; display: inline-block;\">Auth URL</span> <span class=\"mono-font\"> ${authorizationUrl} </span></div>`\r\n        : ''\r\n      }\r\n      ${tokenUrl\r\n        ? html`<div style=\"margin-bottom:5px\"><span style=\"width:75px; display: inline-block;\">Token URL</span> <span class=\"mono-font\">${tokenUrl}</span></div>`\r\n        : ''\r\n      }\r\n      ${refreshUrl\r\n        ? html`<div style=\"margin-bottom:5px\"><span style=\"width:75px; display: inline-block;\">Refresh URL</span> <span class=\"mono-font\">${refreshUrl}</span></div>`\r\n        : ''\r\n      }\r\n      ${flowName === 'authorizationCode' || flowName === 'clientCredentials' || flowName === 'implicit' || flowName === 'password'\r\n        ? html`\r\n          ${authFlow.scopes\r\n            ? html`\r\n              <span> Scopes </span>\r\n              <div class= \"oauth-scopes\" part=\"section-auth-scopes\" style = \"width:100%; display:flex; flex-direction:column; flex-wrap:wrap; margin:0 0 10px 24px\">\r\n                ${Object.entries(authFlow.scopes).map((scopeAndDescr, index) => html`\r\n                  <div class=\"m-checkbox\" style=\"display:inline-flex; align-items:center\">\r\n                    <input type=\"checkbox\" part=\"checkbox checkbox-auth-scope\" class=\"scope-checkbox\" id=\"${securitySchemeId}${flowName}${index}\" ?checked=\"${defaultScopes.includes(scopeAndDescr[0])}\" value=\"${scopeAndDescr[0]}\">\r\n                    <label for=\"${securitySchemeId}${flowName}${index}\" style=\"margin-left:5px; cursor:pointer\">\r\n                      <span class=\"mono-font\">${scopeAndDescr[0]}</span>\r\n                        ${scopeAndDescr[0] !== scopeAndDescr[1] ? ` - ${scopeAndDescr[1] || ''}` : ''}\r\n                    </label>\r\n                  </div>\r\n                `)}\r\n              </div>\r\n            `\r\n            : ''\r\n          }\r\n          ${flowName === 'password'\r\n            ? html`\r\n              <div style=\"margin:5px 0\">\r\n                <input type=\"text\" value = \"\" placeholder=\"username\" spellcheck=\"false\" class=\"oauth2 ${flowName} ${securitySchemeId} api-key-user\" part=\"textbox textbox-username\">\r\n                <input type=\"password\" value = \"\" placeholder=\"password\" spellcheck=\"false\" class=\"oauth2 ${flowName} ${securitySchemeId} api-key-password\" style = \"margin:0 5px;\" part=\"textbox textbox-password\">\r\n              </div>`\r\n            : ''\r\n          }\r\n          <div>\r\n            ${flowName === 'authorizationCode'\r\n              ? html`\r\n                <div style=\"margin: 16px 0 4px\">\r\n                  <input type=\"checkbox\" part=\"checkbox checkbox-auth-scope\" id=\"${securitySchemeId}-pkce\" checked ?disabled=${pkceOnly}>\r\n                  <label for=\"${securitySchemeId}-pkce\" style=\"margin:0 16px 0 4px; line-height:24px; cursor:pointer\">\r\n                   Send Proof Key for Code Exchange (PKCE)\r\n                  </label>\r\n                </div>\r\n              `\r\n              : ''\r\n            }\r\n            <input type=\"text\" part=\"textbox textbox-auth-client-id\" value = \"${clientId || ''}\" placeholder=\"client-id\" spellcheck=\"false\" class=\"oauth2 ${flowName} ${securitySchemeId} oauth-client-id\">\r\n            ${flowName === 'authorizationCode' || flowName === 'clientCredentials' || flowName === 'password'\r\n              ? html`\r\n                <input\r\n                  type=\"password\" part=\"textbox textbox-auth-client-secret\"\r\n                  value = \"${clientSecret || ''}\" placeholder=\"client-secret\" spellcheck=\"false\"\r\n                  class=\"oauth2 ${flowName} ${securitySchemeId}\r\n                  oauth-client-secret\"\r\n                  style = \"margin:0 5px;${pkceOnly ? 'display:none;' : ''}\"\r\n                >\r\n                <select style=\"margin-right:5px;${pkceOnly ? 'display:none;' : ''}\" class=\"${flowName} ${securitySchemeId} oauth-send-client-secret-in\">\r\n                  <option value = 'header' .selected = ${receiveTokenIn === 'header'} > Authorization Header </option>\r\n                  <option value = 'request-body' .selected = ${receiveTokenIn === 'request-body'}> Request Body </option>\r\n                </select>`\r\n              : ''\r\n            }\r\n            ${flowName === 'authorizationCode' || flowName === 'clientCredentials' || flowName === 'implicit' || flowName === 'password'\r\n              ? html`\r\n                <button class=\"m-btn thin-border\" part=\"btn btn-outline\"\r\n                  @click=\"${(e) => { onInvokeOAuthFlow.call(this, securitySchemeId, flowName, authorizationUrl, tokenUrl, e); }}\"\r\n                > GET TOKEN </button>`\r\n              : ''\r\n            }\r\n          </div>\r\n          <div class=\"oauth-resp-display red-text small-font-size\"></div>\r\n          `\r\n        : ''\r\n      }\r\n    </div>\r\n  `;\r\n}\r\n\r\nfunction removeApiKey(securitySchemeId) {\r\n  const securityObj = this.resolvedSpec.securitySchemes?.find((v) => (v.securitySchemeId === securitySchemeId));\r\n  securityObj.user = '';\r\n  securityObj.password = '';\r\n  securityObj.value = '';\r\n  securityObj.finalKeyValue = '';\r\n  if (this.persistAuth === 'true') {\r\n    const rapidocLs = getPersistedApiKeys.call(this);\r\n    delete rapidocLs[securityObj.securitySchemeId];\r\n    setPersistedApiKeys.call(this, rapidocLs);\r\n  }\r\n  this.requestUpdate();\r\n}\r\n\r\nexport default function securitySchemeTemplate() {\r\n  if (!this.resolvedSpec) { return ''; }\r\n  const providedApiKeys = this.resolvedSpec.securitySchemes?.filter((v) => (v.finalKeyValue));\r\n  if (!providedApiKeys) {\r\n    return;\r\n  }\r\n  return html`\r\n  <section id='auth' part=\"section-auth\" style=\"text-align:left; direction:ltr; margin-top:24px; margin-bottom:24px;\" class = 'observe-me ${'read focused'.includes(this.renderStyle) ? 'section-gap--read-mode' : 'section-gap '}'>\r\n    <div class='sub-title regular-font'> AUTHENTICATION </div>\r\n\r\n    <div class=\"small-font-size\" style=\"display:flex; align-items: center; min-height:30px\">\r\n      ${providedApiKeys.length > 0\r\n        ? html`\r\n          <div class=\"blue-text\"> ${providedApiKeys.length} API key applied </div>\r\n          <div style=\"flex:1\"></div>\r\n          <button class=\"m-btn thin-border\" part=\"btn btn-outline\" @click=${() => { onClearAllApiKeys.call(this); }}>CLEAR ALL API KEYS</button>`\r\n        : html`<div class=\"red-text\">No API key applied</div>`\r\n      }\r\n    </div>\r\n    ${this.resolvedSpec.securitySchemes && this.resolvedSpec.securitySchemes.length > 0\r\n      ? html`\r\n        <table role=\"presentation\" id=\"auth-table\" class='m-table padded-12' style=\"width:100%;\">\r\n          ${this.resolvedSpec.securitySchemes.map((v) => html`\r\n            <tr id=\"security-scheme-${v.securitySchemeId}\" class=\"${v.type.toLowerCase()}\">\r\n              <td style=\"max-width:500px; overflow-wrap: break-word;\">\r\n                <div style=\"line-height:28px; margin-bottom:5px;\">\r\n                  <span style=\"font-weight:bold; font-size:var(--font-size-regular)\">${v.typeDisplay}</span>\r\n                  ${v.finalKeyValue\r\n                    ? html`\r\n                      <span class='blue-text'>  ${v.finalKeyValue ? 'Key Applied' : ''} </span>\r\n                      <button class=\"m-btn thin-border small\" part=\"btn btn-outline\" @click=${() => { removeApiKey.call(this, v.securitySchemeId); }}>REMOVE</button>\r\n                      `\r\n                    : ''\r\n                  }\r\n                </div>\r\n                ${v.description\r\n                  ? html`\r\n                    <div class=\"m-markdown\">\r\n                      ${unsafeHTML(marked(v.description || ''))}\r\n                    </div>`\r\n                  : ''\r\n                }\r\n\r\n                ${(v.type.toLowerCase() === 'apikey') || (v.type.toLowerCase() === 'http' && v.scheme.toLowerCase() === 'bearer')\r\n                  ? html`\r\n                    <div style=\"margin-bottom:5px\">\r\n                      ${v.type.toLowerCase() === 'apikey'\r\n                        ? html`Send <code>${v.name}</code> in <code>${v.in}</code>`\r\n                        : html`Send <code>Authorization</code> in <code>header</code> containing the word <code>Bearer</code> followed by a space and a Token String.`\r\n                      }\r\n                    </div>\r\n                    <div style=\"max-height:28px;\">\r\n                      ${v.in !== 'cookie'\r\n                        ? html`\r\n                          <input type = \"text\" value = \"${v.value}\" class=\"${v.type} ${v.securitySchemeId} api-key-input\" placeholder = \"api-token\" spellcheck = \"false\">\r\n                          <button class=\"m-btn thin-border\" style = \"margin-left:5px;\"\r\n                            part = \"btn btn-outline\"\r\n                            @click=\"${(e) => { onApiKeyChange.call(this, v.securitySchemeId, e); }}\">\r\n                            ${v.finalKeyValue ? 'UPDATE' : 'SET'}\r\n                          </button>`\r\n                        : html`<span class=\"gray-text\" style=\"font-size::var(--font-size-small)\"> cookies cannot be set from here</span>`\r\n                      }\r\n                    </div>`\r\n                  : ''\r\n                }\r\n                ${v.type.toLowerCase() === 'http' && v.scheme.toLowerCase() === 'basic'\r\n                  ? html`\r\n                    <div style=\"margin-bottom:5px\">\r\n                      Send <code>Authorization</code> in <code>header</code> containing the word <code>Basic</code> followed by a space and a base64 encoded string of <code>username:password</code>.\r\n                    </div>\r\n                    <div>\r\n                      <input type=\"text\" value = \"${v.user}\" placeholder=\"username\" spellcheck=\"false\" class=\"${v.type} ${v.securitySchemeId} api-key-user\" style=\"width:100px\">\r\n                      <input type=\"password\" value = \"${v.password}\" placeholder=\"password\" spellcheck=\"false\" class=\"${v.type} ${v.securitySchemeId} api-key-password\" style = \"width:100px; margin:0 5px;\">\r\n                      <button class=\"m-btn thin-border\"\r\n                        @click=\"${(e) => { onApiKeyChange.call(this, v.securitySchemeId, e); }}\"\r\n                        part = \"btn btn-outline\"\r\n                      >\r\n                        ${v.finalKeyValue ? 'UPDATE' : 'SET'}\r\n                      </button>\r\n                    </div>`\r\n                  : ''\r\n                }\r\n              </td>\r\n            </tr>\r\n            ${v.type.toLowerCase() === 'oauth2'\r\n              ? html`\r\n                <tr>\r\n                  <td style=\"border:none; padding-left:48px\">\r\n                    ${Object.keys(v.flows).map((f) => oAuthFlowTemplate\r\n                      .call(\r\n                        this,\r\n                        f,\r\n                        (v.flows[f]['x-client-id'] || v['x-client-id'] || ''),\r\n                        (v.flows[f]['x-client-secret'] || v['x-client-secret'] || ''),\r\n                        v.securitySchemeId,\r\n                        v.flows[f],\r\n                        (v.flows[f]['x-default-scopes'] || v['x-default-scopes']),\r\n                        (v.flows[f]['x-receive-token-in'] || v['x-receive-token-in']),\r\n                      ))}\r\n                  </td>\r\n                </tr>\r\n                `\r\n              : ''\r\n            }\r\n          `)}\r\n        </table>`\r\n      : ''\r\n    }\r\n    <slot name=\"auth\"></slot>\r\n  </section>\r\n`;\r\n}\r\n\r\nexport function pathSecurityTemplate(pathSecurity) {\r\n  if (this.resolvedSpec.securitySchemes && pathSecurity) {\r\n    const orSecurityKeys1 = [];\r\n    if (Array.isArray(pathSecurity)) {\r\n      if (pathSecurity.length === 0) {\r\n        return '';\r\n      }\r\n    } else {\r\n      return '';\r\n    }\r\n    pathSecurity.forEach((pSecurity) => {\r\n      const andSecurityKeys1 = [];\r\n      const andKeyTypes = [];\r\n      if (Object.keys(pSecurity).length === 0) {\r\n        orSecurityKeys1.push({\r\n          securityTypes: 'None',\r\n          securityDefs: [],\r\n        });\r\n      } else {\r\n        Object.keys(pSecurity).forEach((pathSecurityKey) => {\r\n          let pathScopes = '';\r\n          const s = this.resolvedSpec.securitySchemes.find((ss) => ss.securitySchemeId === pathSecurityKey);\r\n          if (pSecurity[pathSecurityKey] && Array.isArray(pSecurity[pathSecurityKey])) {\r\n            pathScopes = pSecurity[pathSecurityKey].join(', ');\r\n          }\r\n          if (s) {\r\n            andKeyTypes.push(s.typeDisplay);\r\n            andSecurityKeys1.push({ ...s, ...({ scopes: pathScopes }) });\r\n          }\r\n        });\r\n        orSecurityKeys1.push({\r\n          securityTypes: andKeyTypes.length > 1 ? `${andKeyTypes[0]} + ${andKeyTypes.length - 1} more` : andKeyTypes[0],\r\n          securityDefs: andSecurityKeys1,\r\n        });\r\n      }\r\n    });\r\n    return html`<div style=\"position:absolute; top:3px; right:2px; font-size:var(--font-size-small); line-height: 1.5;\">\r\n      <div style=\"position:relative; display:flex; min-width:350px; max-width:700px; justify-content: flex-end;\">\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" fill=\"none\" style=\"stroke:var(--fg3)\"> <rect x=\"5\" y=\"11\" width=\"14\" height=\"10\" rx=\"2\" /> <circle cx=\"12\" cy=\"16\" r=\"1\" /> <path d=\"M8 11v-4a4 4 0 0 1 8 0v4\" /></svg>\r\n          ${orSecurityKeys1.map((orSecurityItem1, i) => html`\r\n          ${orSecurityItem1.securityTypes\r\n            ? html`\r\n              ${i !== 0 ? html`<div style=\"padding:3px 4px;\"> OR </div>` : ''}\r\n              <div class=\"tooltip\">\r\n                <div style = \"padding:2px 4px; white-space:nowrap; text-overflow:ellipsis;max-width:150px; overflow:hidden;\">\r\n                  ${this.updateRoute === 'true' && this.allowAuthentication === 'true'\r\n                    ? html`<a part=\"anchor anchor-operation-security\" href=\"#auth\"> ${orSecurityItem1.securityTypes} </a>`\r\n                    : html`${orSecurityItem1.securityTypes}`\r\n                  }\r\n                </div>\r\n                <div class=\"tooltip-text\" style=\"position:absolute; color: var(--fg); top:26px; right:0; border:1px solid var(--border-color);padding:2px 4px; display:block;\">\r\n                  ${orSecurityItem1.securityDefs.length > 1 ? html`<div>Requires <b>all</b> of the following </div>` : ''}\r\n                  <div style=\"padding-left: 8px\">\r\n                    ${orSecurityItem1.securityDefs.map((andSecurityItem, j) => {\r\n                      const scopeHtml = html`${andSecurityItem.scopes !== ''\r\n                        ? html`\r\n                          <div>\r\n                            <b>Required scopes:</b>\r\n                            <br/>\r\n                            <div style=\"margin-left:8px\">\r\n                              ${andSecurityItem.scopes.split(',').map((scope, cnt) => html`${cnt === 0 ? '' : '┃'}<span>${scope}</span>`)}\r\n                            </div>\r\n                          </div>`\r\n                        : ''\r\n                      }`;\r\n\r\n                      return html`\r\n                      ${andSecurityItem.type === 'oauth2'\r\n                        ? html`\r\n                          <div>\r\n                            ${orSecurityItem1.securityDefs.length > 1\r\n                              ? html`<b>${j + 1}.</b> &nbsp;`\r\n                              : 'Needs'\r\n                            }\r\n                            OAuth Token <span style=\"font-family:var(--font-mono); color:var(--primary-color);\">${andSecurityItem.securitySchemeId}</span> in <b>Authorization header</b>\r\n                            ${scopeHtml}\r\n                          </div>`\r\n                        : andSecurityItem.type === 'http'\r\n                          ? html`\r\n                            <div>\r\n                              ${orSecurityItem1.securityDefs.length > 1 ? html`<b>${j + 1}.</b> &nbsp;` : html`Requires`}\r\n                              ${andSecurityItem.scheme === 'basic' ? 'Base 64 encoded username:password' : 'Bearer Token'} in <b>Authorization header</b>\r\n                              ${scopeHtml}\r\n                            </div>`\r\n                          : html`\r\n                            <div>\r\n                              ${orSecurityItem1.securityDefs.length > 1 ? html`<b>${j + 1}.</b> &nbsp;` : html`Requires`}\r\n                              Token in <b>${andSecurityItem.name} ${andSecurityItem.in}</b>\r\n                              ${scopeHtml}\r\n                            </div>`\r\n                      }`;\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            `\r\n            : ''\r\n          }\r\n        `)\r\n        }\r\n      </div>\r\n    `;\r\n  }\r\n  return '';\r\n}\r\n\r\n/* eslint-enable indent */\r\n","import { html } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport Prism from 'prismjs';\r\nimport { copyToClipboard } from '~/utils/common-utils';\r\n\r\n/* eslint-disable indent */\r\nexport default function codeSamplesTemplate(xCodeSamples) {\r\n  return html`\r\n  <section class=\"table-title\" style=\"margin-top:24px;\">CODE SAMPLES</div>\r\n  <div class=\"tab-panel col\"\r\n    @click=\"${\r\n      (e) => {\r\n        if (!e.target.classList.contains('tab-btn')) { return; }\r\n        const clickedTab = e.target.dataset.tab;\r\n\r\n        const tabButtons = [...e.currentTarget.querySelectorAll('.tab-btn')];\r\n        const tabContents = [...e.currentTarget.querySelectorAll('.tab-content')];\r\n        tabButtons.forEach((tabBtnEl) => tabBtnEl.classList[tabBtnEl.dataset.tab === clickedTab ? 'add' : 'remove']('active'));\r\n        tabContents.forEach((tabBodyEl) => { tabBodyEl.style.display = (tabBodyEl.dataset.tab === clickedTab ? 'block' : 'none'); });\r\n      }\r\n    }\">\r\n    <div class=\"tab-buttons row\" style=\"width:100; overflow\">\r\n      ${xCodeSamples.map((v, i) => html`<button class=\"tab-btn ${i === 0 ? 'active' : ''}\" data-tab = '${v.lang}${i}'> ${v.label || v.lang} </button>`)}\r\n    </div>\r\n    ${xCodeSamples.map((v, i) => html`\r\n      <div class=\"tab-content m-markdown\" style= \"display:${i === 0 ? 'block' : 'none'}\" data-tab = '${v.lang}${i}'>\r\n        <button class=\"toolbar-btn\" style = \"position:absolute; top:12px; right:8px\" @click='${(e) => { copyToClipboard(v.source, e); }}'> Copy </button>\r\n        <pre><code class=\"language\">${Prism.languages[v.lang?.toLowerCase()] ? unsafeHTML(Prism.highlight(v.source, Prism.languages[v.lang?.toLowerCase()], v.lang?.toLowerCase())) : v.source}</code></pre>\r\n      </div>`)\r\n    }\r\n  </div>  \r\n  </section>`;\r\n}\r\n/* eslint-enable indent */\r\n","import { html } from 'lit';\r\n\r\n/* eslint-disable indent */\r\nexport default function callbackTemplate(callbacks) {\r\n  return html`\r\n    <div class=\"req-res-title\" style=\"margin-top:12px\">CALLBACKS</div>\r\n    ${Object.entries(callbacks).map((kv) => html`\r\n      <div class=\"tiny-title\" style=\"padding: 12px; border:1px solid var(--light-border-color)\"> \r\n        ${kv[0]}\r\n        ${Object.entries(kv[1]).map((pathObj) => html`\r\n          <div class=\"mono-font small-font-size\" style=\"display:flex; margin-left:16px;\">\r\n            <div style=\"width:100%\"> \r\n              ${Object.entries(pathObj[1]).map((method) => html`\r\n                <div>\r\n                  <div style=\"margin-top:12px;\">\r\n                    <div class=\"method method-fg ${method[0]}\" style=\"width:70px; border:none; margin:0; padding:0; line-height:20px; vertical-align: baseline;text-align:left\"> \r\n                      <span style=\"font-size:20px;\"> &#x2944; </span> \r\n                      ${method[0]} \r\n                    </div>\r\n                    <span style=\"line-height:20px; vertical-align: baseline;\">${pathObj[0]} </span>\r\n                  </div>  \r\n                  <div class='expanded-req-resp-container'>\r\n                    <api-request\r\n                      class = \"${this.renderStyle}-mode callback\"  \r\n                      style = \"width:100%;\"\r\n                      callback = \"true\"\r\n                      method = \"${method[0] || ''}\", \r\n                      path = \"${pathObj[0] || ''}\" \r\n                      .parameters = \"${method[1]?.parameters || ''}\" \r\n                      .request_body = \"${method[1]?.requestBody || ''}\"\r\n                      fill-request-fields-with-example = \"${this.fillRequestFieldsWithExample}\"\r\n                      allow-try = \"false\"\r\n                      render-style=\"${this.renderStyle}\" \r\n                      schema-style = \"${this.schemaStyle}\"\r\n                      active-schema-tab = \"${this.defaultSchemaTab}\"\r\n                      schema-expand-level = \"${this.schemaExpandLevel}\"\r\n                      schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n                      allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n                      schema-hide-read-only = \"false\"\r\n                      schema-hide-write-only = \"${this.schemaHideWriteOnly === 'never' ? 'false' : 'true'}\"\r\n                      fetch-credentials = \"${this.fetchCredentials}\"\r\n                      exportparts = \"wrap-request-btn:wrap-request-btn, btn:btn, btn-fill:btn-fill, btn-outline:btn-outline, btn-try:btn-try, btn-clear:btn-clear, btn-clear-resp:btn-clear-resp,\r\n                        file-input:file-input, textbox:textbox, textbox-param:textbox-param, textarea:textarea, textarea-param:textarea-param, \r\n                        anchor:anchor, anchor-param-example:anchor-param-example, schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n                      > </api-request>\r\n\r\n                    <api-response\r\n                      style = \"width:100%;\"\r\n                      class = \"${this.renderStyle}-mode\"\r\n                      callback = \"true\"\r\n                      .responses=\"${method[1]?.responses}\"\r\n                      render-style=\"${this.renderStyle}\"\r\n                      schema-style=\"${this.schemaStyle}\"\r\n                      active-schema-tab = \"${this.defaultSchemaTab}\"\r\n                      schema-expand-level = \"${this.schemaExpandLevel}\"\r\n                      schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n                      allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n                      schema-hide-read-only = \"${this.schemaHideReadOnly === 'never' ? 'false' : 'true'}\"\r\n                      schema-hide-write-only = \"false\"\r\n                      exportparts = \"btn:btn, btn-response-status:btn-response-status, btn-selected-response-status:btn-selected-response-status, btn-fill:btn-fill, btn-copy:btn-copy,\r\n                      schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n                    > </api-response>\r\n                  </div>\r\n                </div>  \r\n              `)}\r\n            </div>  \r\n          </div>  \r\n        `)}\r\n      </div>  \r\n    `)}\r\n  `;\r\n}\r\n/* eslint-enable indent */\r\n","// Takes a value as input and provides a printable string to replresent null values, spaces, blankstring etc\r\nexport function getPrintableVal(val) {\r\n  if (val === undefined) {\r\n    return '';\r\n  }\r\n  if (val === null) {\r\n    return 'null';\r\n  }\r\n  if (val === '') {\r\n    return '∅';\r\n  }\r\n  if (typeof val === 'boolean' || typeof val === 'number') {\r\n    return `${val}`;\r\n  }\r\n  if (Array.isArray(val)) {\r\n    return val.map((v) => (v === null ? 'null' : v === '' ? '∅' : v.toString().replace(/^ +| +$/g, (m) => '●'.repeat(m.length)) || '')).join(', ');\r\n  }\r\n  if (typeof val === 'object') {\r\n    const keys = Object.keys(val);\r\n    return `{ ${keys[0]}:${val[keys[0]]}${keys.length > 1 ? ',' : ''} ... }`;\r\n  }\r\n  return val.toString().replace(/^ +| +$/g, (m) => '●'.repeat(m.length)) || '';\r\n}\r\n\r\n/* Generates an schema object containing type and constraint info */\r\nexport function getTypeInfo(schema) {\r\n  if (!schema) {\r\n    return;\r\n  }\r\n  let dataType = '';\r\n  let constrain = '';\r\n  // let examples;\r\n\r\n  if (schema.$ref) {\r\n    const n = schema.$ref.lastIndexOf('/');\r\n    const schemaNode = schema.$ref.substring(n + 1);\r\n    dataType = `{recursive: ${schemaNode}} `;\r\n  } else if (schema.type) {\r\n    dataType = Array.isArray(schema.type) ? schema.type.join(schema.length === 2 ? ' or ' : '┃') : schema.type;\r\n    if (schema.format || schema.enum || schema.const) {\r\n      dataType = dataType.replace('string', schema.enum ? 'enum' : schema.const ? 'const' : schema.format);\r\n    }\r\n    if (schema.nullable) {\r\n      dataType += '┃null';\r\n    }\r\n  } else if (schema.const) {\r\n    dataType = 'const';\r\n  } else if (Object.keys(schema).length === 0) {\r\n    dataType = 'any';\r\n  } else {\r\n    dataType = '{missing-type-info}';\r\n  }\r\n\r\n  const info = {\r\n    type: dataType,\r\n    format: schema.format || '',\r\n    pattern: (schema.pattern && !schema.enum) ? schema.pattern : '',\r\n    readOrWriteOnly: (schema.readOnly ? '🆁' : schema.writeOnly ? '🆆' : ''),\r\n    deprecated: schema.deprecated ? '❌' : '',\r\n    examples: schema.examples || schema.example,\r\n    default: getPrintableVal(schema.default),\r\n    description: schema.description || '',\r\n    constrain: '',\r\n    allowedValues: '',\r\n    arrayType: '',\r\n    html: '',\r\n  };\r\n\r\n  if (info.type === '{recursive}') {\r\n    info.description = schema.$ref.substring(schema.$ref.lastIndexOf('/') + 1);\r\n  } else if (info.type === '{missing-type-info}' || info.type === 'any') {\r\n    info.description = info.description || '';\r\n  }\r\n  // Set Allowed Values\r\n  info.allowedValues = schema.const\r\n    ? schema.const\r\n    : Array.isArray(schema.enum)\r\n      ? schema.enum.map((v) => (getPrintableVal(v))).join('┃')\r\n      : '';\r\n\r\n  if (dataType === 'array' && schema.items) {\r\n    const arrayItemType = schema.items?.type;\r\n    const arrayItemDefault = getPrintableVal(schema.items.default);\r\n\r\n    info.arrayType = `${schema.type} of ${Array.isArray(arrayItemType) ? arrayItemType.join('') : arrayItemType}`;\r\n    info.default = arrayItemDefault;\r\n    info.allowedValues = schema.items.const\r\n      ? schema.const\r\n      : Array.isArray(schema.items?.enum)\r\n        ? schema.items.enum.map((v) => (getPrintableVal(v))).join('┃')\r\n        : '';\r\n  }\r\n  if (dataType.match(/integer|number/g)) {\r\n    if (schema.minimum !== undefined || schema.exclusiveMinimum !== undefined) {\r\n      constrain += schema.minimum !== undefined ? `Min ${schema.minimum}` : `More than ${schema.exclusiveMinimum}`;\r\n    }\r\n    if (schema.maximum !== undefined || schema.exclusiveMaximum !== undefined) {\r\n      constrain += schema.maximum !== undefined ? `${constrain ? '┃' : ''}Max ${schema.maximum}` : `${constrain ? '┃' : ''}Less than ${schema.exclusiveMaximum}`;\r\n    }\r\n    if (schema.multipleOf !== undefined) {\r\n      constrain += `${constrain ? '┃' : ''} multiple of ${schema.multipleOf}`;\r\n    }\r\n  }\r\n  if (dataType.match(/string/g)) {\r\n    if (schema.minLength !== undefined && schema.maxLength !== undefined) {\r\n      constrain += `${constrain ? '┃' : ''}${schema.minLength} to ${schema.maxLength} chars`;\r\n    } else if (schema.minLength !== undefined) {\r\n      constrain += `${constrain ? '┃' : ''}Min ${schema.minLength} chars`;\r\n    } else if (schema.maxLength !== undefined) {\r\n      constrain += `Max ${constrain ? '┃' : ''}${schema.maxLength} chars`;\r\n    }\r\n  }\r\n  info.constrain = constrain;\r\n  info.html = `${info.type}~|~${info.readOrWriteOnly}~|~${info.constrain}~|~${info.default}~|~${info.allowedValues}~|~${info.pattern}~|~${info.description}~|~${schema.title || ''}~|~${info.deprecated ? 'deprecated' : ''}`;\r\n  return info;\r\n}\r\n\r\nexport function nestExampleIfPresent(example) {\r\n  if (typeof example === 'boolean' || typeof example === 'number') {\r\n    return {\r\n      Example: { value: `${example}` },\r\n    };\r\n  }\r\n  if (example === '') {\r\n    return {\r\n      Example: { value: '' },\r\n    };\r\n  }\r\n  return example ? { Example: { value: example } } : example;\r\n}\r\n\r\n/**\r\n *  Normalize example object in the following format (List of object which is used to render example links and fill the input boxes)\r\n *  [{\r\n *     exampleVal  : 'value to be rendered on the input control (text-box)',\r\n *     exampleList : [\r\n *       value         : '',\r\n *       printableValue: '',\r\n *       summary       : '',\r\n *       description   : ''\r\n *     ]\r\n *  }]\r\n * */\r\nexport function normalizeExamples(examples, dataType = 'string') {\r\n  if (!examples) {\r\n    return {\r\n      exampleVal: '',\r\n      exampleList: [],\r\n    };\r\n  }\r\n  if (examples.constructor === Object) {\r\n    const exampleList = Object.values(examples)\r\n      .filter((v) => (v['x-example-show-value'] !== false))\r\n      .map((v) => ({\r\n        value: (typeof v.value === 'boolean' || typeof v.value === 'number' ? `${v.value}` : (v.value || '')),\r\n        printableValue: getPrintableVal(v.value),\r\n        summary: v.summary || '',\r\n        description: v.description || '',\r\n      }));\r\n    const exampleVal = exampleList.length > 0\r\n      ? exampleList[0].value\r\n      : '';\r\n    return { exampleVal, exampleList };\r\n  }\r\n\r\n  // This is non-standard way to provide example but will support for now\r\n  if (!Array.isArray(examples)) {\r\n    examples = examples ? [examples] : [];\r\n  }\r\n\r\n  if (examples.length === 0) {\r\n    return {\r\n      exampleVal: '',\r\n      exampleList: [],\r\n    };\r\n  }\r\n\r\n  if (dataType === 'array') {\r\n    const [exampleVal] = examples;\r\n    const exampleList = examples.map((v) => ({\r\n      value: v,\r\n      printableValue: getPrintableVal(v),\r\n    }));\r\n    return { exampleVal, exampleList };\r\n  }\r\n\r\n  const exampleVal = examples[0].toString();\r\n  const exampleList = examples.map((v) => ({\r\n    value: v.toString(),\r\n    printableValue: getPrintableVal(v),\r\n  }));\r\n  return { exampleVal, exampleList };\r\n}\r\n\r\nexport function anyExampleWithSummaryOrDescription(examples) {\r\n  return examples.some((x) => x.summary?.length > 0 || x.description?.length > 0);\r\n}\r\n\r\nexport function getSampleValueByType(schemaObj) {\r\n  const example = schemaObj.examples\r\n    ? schemaObj.examples[0]\r\n    : schemaObj.example === null\r\n      ? null\r\n      : schemaObj.example || undefined;\r\n  if (example === '') { return ''; }\r\n  if (example === null) { return null; }\r\n  if (example === 0) { return 0; }\r\n  if (example === false) { return false; }\r\n  if (example instanceof Date) {\r\n    switch (schemaObj.format.toLowerCase()) {\r\n      case 'date':\r\n        return example.toISOString().split('T')[0];\r\n      case 'time':\r\n        return example.toISOString().split('T')[1];\r\n      default:\r\n        return example.toISOString();\r\n    }\r\n  }\r\n  if (example) { return example; }\r\n\r\n  if (Object.keys(schemaObj).length === 0) {\r\n    return null;\r\n  }\r\n  if (schemaObj.$ref) {\r\n    // Indicates a Circular ref\r\n    return schemaObj.$ref;\r\n  }\r\n  if (schemaObj.const === false || schemaObj.const === 0 || schemaObj.const === null || schemaObj.const === '') {\r\n    return schemaObj.const;\r\n  }\r\n  if (schemaObj.const) {\r\n    return schemaObj.const;\r\n  }\r\n  const typeValue = Array.isArray(schemaObj.type) ? schemaObj.type[0] : schemaObj.type;\r\n  if (!typeValue) {\r\n    return '?';\r\n  }\r\n  if (typeValue.match(/^integer|^number/g)) {\r\n    const multipleOf = Number.isNaN(Number(schemaObj.multipleOf)) ? undefined : Number(schemaObj.multipleOf);\r\n    const maximum = Number.isNaN(Number(schemaObj.maximum)) ? undefined : Number(schemaObj.maximum);\r\n    const minimumPossibleVal = Number.isNaN(Number(schemaObj.minimum))\r\n      ? Number.isNaN(Number(schemaObj.exclusiveMinimum))\r\n        ? maximum || 0\r\n        : Number(schemaObj.exclusiveMinimum) + (typeValue.startsWith('integer') ? 1 : 0.001)\r\n      : Number(schemaObj.minimum);\r\n    const finalVal = multipleOf\r\n      ? multipleOf >= minimumPossibleVal\r\n        ? multipleOf\r\n        : minimumPossibleVal % multipleOf === 0\r\n          ? minimumPossibleVal\r\n          : Math.ceil(minimumPossibleVal / multipleOf) * multipleOf\r\n      : minimumPossibleVal;\r\n    return finalVal;\r\n  }\r\n  if (typeValue.match(/^boolean/g)) { return false; }\r\n  if (typeValue.match(/^null/g)) { return null; }\r\n  if (typeValue.match(/^string/g)) {\r\n    if (schemaObj.enum) { return schemaObj.enum[0]; }\r\n    if (schemaObj.const) { return schemaObj.const; }\r\n    if (schemaObj.pattern) { return schemaObj.pattern; }\r\n    if (schemaObj.format) {\r\n      const u = `${Date.now().toString(16)}${Math.random().toString(16)}0`.repeat(16);\r\n      switch (schemaObj.format.toLowerCase()) {\r\n        case 'url':\r\n        case 'uri':\r\n          return 'http://example.com';\r\n        case 'date':\r\n          return (new Date(0)).toISOString().split('T')[0];\r\n        case 'time':\r\n          return (new Date(0)).toISOString().split('T')[1];\r\n        case 'date-time':\r\n          return (new Date(0)).toISOString();\r\n        case 'duration':\r\n          return 'P3Y6M4DT12H30M5S'; // P=Period 3-Years 6-Months 4-Days 12-Hours 30-Minutes 5-Seconds\r\n        case 'email':\r\n        case 'idn-email':\r\n          return 'user@example.com';\r\n        case 'hostname':\r\n        case 'idn-hostname':\r\n          return 'www.example.com';\r\n        case 'ipv4':\r\n          return '198.51.100.42';\r\n        case 'ipv6':\r\n          return '2001:0db8:5b96:0000:0000:426f:8e17:642a';\r\n        case 'uuid':\r\n          return [u.substr(0, 8), u.substr(8, 4), `4000-8${u.substr(13, 3)}`, u.substr(16, 12)].join('-');\r\n        default:\r\n          return '';\r\n      }\r\n    } else {\r\n      const minLength = Number.isNaN(schemaObj.minLength) ? undefined : Number(schemaObj.minLength);\r\n      const maxLength = Number.isNaN(schemaObj.maxLength) ? undefined : Number(schemaObj.maxLength);\r\n      const finalLength = minLength || (maxLength > 6 ? 6 : maxLength || undefined);\r\n      return finalLength ? 'A'.repeat(finalLength) : 'string';\r\n    }\r\n  }\r\n  // If type cannot be determined\r\n  return '?';\r\n}\r\n\r\n/*\r\njson2xml- TestCase\r\n  {\r\n    'prop1' : 'one',\r\n    'prop2' : 'two',\r\n    'prop3' : [ 'a', 'b', 'c' ],\r\n    'prop4' : {\r\n      'ob1' : 'val-1',\r\n      'ob2' : 'val-2'\r\n    }\r\n  }\r\n  <root>\r\n    <prop1>simple</prop1>\r\n    <prop2>\r\n      <0>a</0>\r\n      <1>b</1>\r\n      <2>c</2>\r\n    </prop2>\r\n    <prop3>\r\n      <ob1>val-1</ob1>\r\n      <ob2>val-2</ob2>\r\n    </prop3>\r\n  </root>\r\n*/\r\nexport function json2xml(obj, level = 1) {\r\n  const indent = '  '.repeat(level);\r\n  let xmlText = '';\r\n  if (level === 1 && typeof obj !== 'object') {\r\n    return `\\n${indent}${obj.toString()}`;\r\n  }\r\n  for (const prop in obj) {\r\n    const tagNameOrProp = (obj[prop]['::XML_TAG'] || prop);\r\n    let tagName = '';\r\n    if (Array.isArray(obj[prop])) {\r\n      tagName = tagNameOrProp[0]['::XML_TAG'] || `${prop}`;\r\n    } else {\r\n      tagName = tagNameOrProp;\r\n    }\r\n    if (prop.startsWith('::')) {\r\n      continue;\r\n    }\r\n    if (Array.isArray(obj[prop])) {\r\n      xmlText = `${xmlText}\\n${indent}<${tagName}>${json2xml(obj[prop], level + 1)}\\n${indent}</${tagName}>`;\r\n    } else if (typeof obj[prop] === 'object') {\r\n      xmlText = `${xmlText}\\n${indent}<${tagName}>${json2xml(obj[prop], level + 1)}\\n${indent}</${tagName}>`;\r\n    } else {\r\n      xmlText = `${xmlText}\\n${indent}<${tagName}>${obj[prop].toString()}</${tagName}>`;\r\n    }\r\n  }\r\n  return xmlText;\r\n}\r\n\r\nfunction addSchemaInfoToExample(schema, obj) {\r\n  if (typeof obj !== 'object' || obj === null) {\r\n    return;\r\n  }\r\n  if (schema.title) {\r\n    obj['::TITLE'] = schema.title;\r\n  }\r\n  if (schema.description) {\r\n    obj['::DESCRIPTION'] = schema.description;\r\n  }\r\n  if (schema.xml?.name) {\r\n    obj['::XML_TAG'] = schema.xml?.name;\r\n  }\r\n  if (schema.xml?.wrapped) {\r\n    obj['::XML_WRAP'] = schema.xml?.wrapped.toString();\r\n  }\r\n}\r\n\r\nfunction removeTitlesAndDescriptions(obj) {\r\n  if (typeof obj !== 'object' || obj === null) {\r\n    return;\r\n  }\r\n  delete obj['::TITLE'];\r\n  delete obj['::DESCRIPTION'];\r\n  delete obj['::XML_TAG'];\r\n  delete obj['::XML_WRAP'];\r\n  for (const k in obj) {\r\n    removeTitlesAndDescriptions(obj[k]);\r\n  }\r\n}\r\n\r\nfunction addPropertyExampleToObjectExamples(example, obj, propertyKey) {\r\n  for (const key in obj) {\r\n    obj[key][propertyKey] = example;\r\n  }\r\n}\r\n\r\nfunction mergePropertyExamples(obj, propertyName, propExamples) {\r\n  // Create an example for each variant of the propertyExample, merging them with the current (parent) example\r\n  let i = 0;\r\n  const maxCombinations = 10;\r\n  const mergedObj = {};\r\n  for (const exampleKey in obj) {\r\n    for (const propExampleKey in propExamples) {\r\n      mergedObj[`example-${i}`] = { ...obj[exampleKey] };\r\n      mergedObj[`example-${i}`][propertyName] = propExamples[propExampleKey];\r\n      i++;\r\n      if (i >= maxCombinations) {\r\n        break;\r\n      }\r\n    }\r\n    if (i >= maxCombinations) {\r\n      break;\r\n    }\r\n  }\r\n  return mergedObj;\r\n}\r\n\r\n/* For changing JSON-Schema to a Sample Object, as per the schema (to generate examples based on schema) */\r\nexport function schemaToSampleObj(schema, config = { }) {\r\n  let obj = {};\r\n  if (!schema) {\r\n    return;\r\n  }\r\n  if (schema.allOf) {\r\n    const objWithAllProps = {};\r\n\r\n    if (schema.allOf.length === 1 && !schema.allOf[0]?.properties && !schema.allOf[0]?.items) {\r\n      // If allOf has single item and the type is not an object or array, then its a primitive\r\n      if (schema.allOf[0].$ref) {\r\n        return '{  }';\r\n      }\r\n      if (schema.allOf[0].readOnly && config.includeReadOnly) {\r\n        const tempSchema = schema.allOf[0];\r\n        return getSampleValueByType(tempSchema);\r\n      }\r\n      return;\r\n    }\r\n\r\n    schema.allOf.forEach((v) => {\r\n      if (v.type === 'object' || v.properties || v.allOf || v.anyOf || v.oneOf) {\r\n        const partialObj = schemaToSampleObj(v, config);\r\n        Object.assign(objWithAllProps, partialObj);\r\n      } else if (v.type === 'array' || v.items) {\r\n        const partialObj = [schemaToSampleObj(v, config)];\r\n        Object.assign(objWithAllProps, partialObj);\r\n      } else if (v.type) {\r\n        const prop = `prop${Object.keys(objWithAllProps).length}`;\r\n        objWithAllProps[prop] = getSampleValueByType(v);\r\n      } else {\r\n        return '';\r\n      }\r\n    });\r\n\r\n    obj = objWithAllProps;\r\n  } else if (schema.oneOf) {\r\n    // 1. First create example with scheme.properties\r\n    const objWithSchemaProps = {};\r\n    if (schema.properties) {\r\n      for (const propertyName in schema.properties) {\r\n        if (schema.properties[propertyName].properties || schema.properties[propertyName].properties?.items) {\r\n          objWithSchemaProps[propertyName] = schemaToSampleObj(schema.properties[propertyName], config);\r\n        } else {\r\n          objWithSchemaProps[propertyName] = getSampleValueByType(schema.properties[propertyName]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (schema.oneOf.length > 0) {\r\n      /*\r\n      oneOf:\r\n        - type: object\r\n          properties:\r\n            option1_PropA:\r\n              type: string\r\n            option1_PropB:\r\n              type: string\r\n        - type: object\r\n          properties:\r\n            option2_PropX:\r\n              type: string\r\n      properties:\r\n        prop1:\r\n          type: string\r\n        prop2:\r\n          type: string\r\n          minLength: 10\r\n\r\n      The aboove Schem should generate the following 2 examples\r\n\r\n      Example-1\r\n      {\r\n        prop1: 'string',\r\n        prop2: 'AAAAAAAAAA',       <-- min-length 10\r\n        option1_PropA: 'string',\r\n        option1_PropB: 'string'\r\n      }\r\n\r\n      Example-2\r\n      {\r\n        prop1: 'string',\r\n        prop2: 'AAAAAAAAAA',       <-- min-length 10\r\n        option2_PropX: 'string'\r\n      }\r\n      */\r\n      let i = 0;\r\n      // Merge all examples of each oneOf-schema\r\n      for (const key in schema.oneOf) {\r\n        const oneOfSamples = schemaToSampleObj(schema.oneOf[key], config);\r\n        for (const sampleKey in oneOfSamples) {\r\n          // 2. In the final example include a one-of item along with properties\r\n          let finalExample;\r\n          if (Object.keys(objWithSchemaProps).length > 0) {\r\n            if (oneOfSamples[sampleKey] === null || typeof oneOfSamples[sampleKey] !== 'object') {\r\n              // This doesn't really make sense since every oneOf schema _should_ be an object if there are common properties, so we'll skip this\r\n              continue;\r\n            } else {\r\n              finalExample = Object.assign(oneOfSamples[sampleKey], objWithSchemaProps);\r\n            }\r\n          } else {\r\n            finalExample = oneOfSamples[sampleKey];\r\n          }\r\n          obj[`example-${i}`] = finalExample;\r\n          addSchemaInfoToExample(schema.oneOf[key], obj[`example-${i}`]);\r\n          i++;\r\n        }\r\n      }\r\n    }\r\n  } else if (schema.anyOf) {\r\n    // First generate values for regular properties\r\n    let commonObj;\r\n    if (schema.type === 'object' || schema.properties) {\r\n      commonObj = { 'example-0': {} };\r\n      for (const propertyName in schema.properties) {\r\n        if (schema.example) {\r\n          commonObj = schema;\r\n          break;\r\n        }\r\n        if (schema.properties[propertyName].deprecated && !config.includeDeprecated) { continue; }\r\n        if (schema.properties[propertyName].readOnly && !config.includeReadOnly) { continue; }\r\n        if (schema.properties[propertyName].writeOnly && !config.includeWriteOnly) { continue; }\r\n        commonObj = mergePropertyExamples(commonObj, propertyName, schemaToSampleObj(schema.properties[propertyName], config));\r\n      }\r\n    }\r\n\r\n    // Combine every variant of the regular properties with every variant of the anyOf samples\r\n    let i = 0;\r\n    for (const key in schema.anyOf) {\r\n      const anyOfSamples = schemaToSampleObj(schema.anyOf[key], config);\r\n      for (const sampleKey in anyOfSamples) {\r\n        if (typeof commonObj !== 'undefined') {\r\n          for (const commonKey in commonObj) {\r\n            obj[`example-${i}`] = { ...commonObj[commonKey], ...anyOfSamples[sampleKey] };\r\n          }\r\n        } else {\r\n          obj[`example-${i}`] = anyOfSamples[sampleKey];\r\n        }\r\n        addSchemaInfoToExample(schema.anyOf[key], obj[`example-${i}`]);\r\n        i++;\r\n      }\r\n    }\r\n  } else if (schema.type === 'object' || schema.properties) {\r\n    obj['example-0'] = {};\r\n    addSchemaInfoToExample(schema, obj['example-0']);\r\n    if (schema.example) {\r\n      obj['example-0'] = schema.example;\r\n    } else {\r\n      for (const propertyName in schema.properties) {\r\n        if (schema.properties[propertyName]?.deprecated && !config.includeDeprecated) { continue; }\r\n        if (schema.properties[propertyName]?.readOnly && !config.includeReadOnly) { continue; }\r\n        if (schema.properties[propertyName]?.writeOnly && !config.includeWriteOnly) { continue; }\r\n        if (schema.properties[propertyName]?.type === 'array' || schema.properties[propertyName]?.items) {\r\n          if (schema.properties[propertyName].example) {\r\n            addPropertyExampleToObjectExamples(schema.properties[propertyName].example, obj, propertyName);\r\n          } else if (schema.properties[propertyName]?.items?.example) { // schemas and properties support single example but not multiple examples.\r\n            addPropertyExampleToObjectExamples([schema.properties[propertyName].items.example], obj, propertyName);\r\n          } else {\r\n            const itemSamples = schemaToSampleObj(schema.properties[propertyName].items, config);\r\n            if (config.useXmlTagForProp) {\r\n              const xmlTagName = schema.properties[propertyName].xml?.name || propertyName;\r\n              if (schema.properties[propertyName].xml?.wrapped) {\r\n                const wrappedItemSample = JSON.parse(`{ \"${xmlTagName}\" : { \"${xmlTagName}\" : ${JSON.stringify(itemSamples['example-0'])} } }`);\r\n                obj = mergePropertyExamples(obj, xmlTagName, wrappedItemSample);\r\n              } else {\r\n                obj = mergePropertyExamples(obj, xmlTagName, itemSamples);\r\n              }\r\n            } else {\r\n              const arraySamples = [];\r\n              for (const key in itemSamples) {\r\n                arraySamples[key] = [itemSamples[key]];\r\n              }\r\n              obj = mergePropertyExamples(obj, propertyName, arraySamples);\r\n            }\r\n          }\r\n          continue;\r\n        }\r\n        obj = mergePropertyExamples(obj, propertyName, schemaToSampleObj(schema.properties[propertyName], config));\r\n      }\r\n    }\r\n  } else if (schema.type === 'array' || schema.items) {\r\n    if (schema.items || schema.example) {\r\n      if (schema.example) {\r\n        obj['example-0'] = schema.example;\r\n      } else if (schema.items?.example) { // schemas and properties support single example but not multiple examples.\r\n        obj['example-0'] = [schema.items.example];\r\n      } else {\r\n        const samples = schemaToSampleObj(schema.items, config);\r\n        let i = 0;\r\n        for (const key in samples) {\r\n          obj[`example-${i}`] = [samples[key]];\r\n          addSchemaInfoToExample(schema.items, obj[`example-${i}`]);\r\n          i++;\r\n        }\r\n      }\r\n    } else {\r\n      obj['example-0'] = [];\r\n    }\r\n  } else {\r\n    return { 'example-0': getSampleValueByType(schema) };\r\n  }\r\n  return obj;\r\n}\r\n\r\nfunction generateMarkdownForArrayAndObjectDescription(schema, level = 0) {\r\n  let markdown = ((schema.description || schema.title) && (schema.minItems || schema.maxItems)) ? '<span class=\"descr-expand-toggle\">➔</span>' : '';\r\n  if (schema.title) {\r\n    if (schema.description) {\r\n      markdown = `${markdown} <b>${schema.title}:</b> ${schema.description}<br/>`;\r\n    } else {\r\n      markdown = `${markdown} ${schema.title}<br/>`;\r\n    }\r\n  } else if (schema.description) {\r\n    markdown = `${markdown} ${schema.description}<br/>`;\r\n  }\r\n  if (schema.minItems) {\r\n    markdown = `${markdown} <b>Min Items:</b> ${schema.minItems}`;\r\n  }\r\n  if (schema.maxItems) {\r\n    markdown = `${markdown} <b>Max Items:</b> ${schema.maxItems}`;\r\n  }\r\n  if (level > 0 && schema.items?.description) {\r\n    let itemsMarkdown = '';\r\n    if (schema.items.minProperties) {\r\n      itemsMarkdown = `<b>Min Properties:</b> ${schema.items.minProperties}`;\r\n    }\r\n    if (schema.items.maxProperties) {\r\n      itemsMarkdown = `${itemsMarkdown} <b>Max Properties:</b> ${schema.items.maxProperties}`;\r\n    }\r\n    markdown = `${markdown} ⮕ ${itemsMarkdown} [ ${schema.items.description} ] `;\r\n  }\r\n  return markdown;\r\n}\r\n/**\r\n * For changing OpenAPI-Schema to an Object Notation,\r\n * This Object would further be an input to UI Components to generate an Object-Tree\r\n * @param {object} schema - Schema object from OpenAPI spec\r\n * @param {object} obj - recursivly pass this object to generate object notation\r\n * @param {number} level - recursion level\r\n * @param {string} suffix - used for suffixing property names to avoid duplicate props during object composion\r\n */\r\nexport function schemaInObjectNotation(schema, obj, level = 0, suffix = '') {\r\n  if (!schema) {\r\n    return;\r\n  }\r\n  if (schema.allOf) {\r\n    const objWithAllProps = {};\r\n    if (schema.allOf.length === 1 && !schema.allOf[0].properties && !schema.allOf[0].items) {\r\n      // If allOf has single item and the type is not an object or array, then its a primitive\r\n      const tempSchema = schema.allOf[0];\r\n      return `${getTypeInfo(tempSchema).html}`;\r\n    }\r\n    // If allOf is an array of multiple elements, then all the keys makes a single object\r\n    schema.allOf.map((v, i) => {\r\n      if (v.type === 'object' || v.properties || v.allOf || v.anyOf || v.oneOf) {\r\n        const propSuffix = (v.anyOf || v.oneOf) && i > 0 ? i : '';\r\n        const partialObj = schemaInObjectNotation(v, {}, (level + 1), propSuffix);\r\n        Object.assign(objWithAllProps, partialObj);\r\n      } else if (v.type === 'array' || v.items) {\r\n        const partialObj = schemaInObjectNotation(v, {}, (level + 1));\r\n        Object.assign(objWithAllProps, partialObj);\r\n      } else if (v.type) {\r\n        const prop = `prop${Object.keys(objWithAllProps).length}`;\r\n        const typeObj = getTypeInfo(v);\r\n        objWithAllProps[prop] = `${typeObj.html}`;\r\n      } else {\r\n        return '';\r\n      }\r\n    });\r\n    obj = objWithAllProps;\r\n  } else if (schema.anyOf || schema.oneOf) {\r\n    obj['::description'] = schema.description || '';\r\n    // 1. First iterate the regular properties\r\n    if (schema.type === 'object' || schema.properties) {\r\n      obj['::description'] = schema.description || '';\r\n      obj['::type'] = 'object';\r\n      // obj['::deprecated'] = schema.deprecated || false;\r\n      for (const key in schema.properties) {\r\n        if (schema.required && schema.required.includes(key)) {\r\n          obj[`${key}*`] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\r\n        } else {\r\n          obj[key] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\r\n        }\r\n      }\r\n    }\r\n    // 2. Then show allof/anyof objects\r\n    const objWithAnyOfProps = {};\r\n    const xxxOf = schema.anyOf ? 'anyOf' : 'oneOf';\r\n    schema[xxxOf].forEach((v, index) => {\r\n      if (v.type === 'object' || v.properties || v.allOf || v.anyOf || v.oneOf) {\r\n        const partialObj = schemaInObjectNotation(v, {});\r\n        objWithAnyOfProps[`::OPTION~${index + 1}${v.title ? `~${v.title}` : ''}`] = partialObj;\r\n        objWithAnyOfProps[`::OPTION~${index + 1}${v.title ? `~${v.title}` : ''}`]['::readwrite'] = ''; // xxx-options cannot be read or write only\r\n        objWithAnyOfProps['::type'] = 'xxx-of-option';\r\n      } else if (v.type === 'array' || v.items) {\r\n        // This else-if block never seems to get executed\r\n        const partialObj = schemaInObjectNotation(v, {});\r\n        objWithAnyOfProps[`::OPTION~${index + 1}${v.title ? `~${v.title}` : ''}`] = partialObj;\r\n        objWithAnyOfProps[`::OPTION~${index + 1}${v.title ? `~${v.title}` : ''}`]['::readwrite'] = ''; // xxx-options cannot be read or write only\r\n        objWithAnyOfProps['::type'] = 'xxx-of-array';\r\n      } else {\r\n        const prop = `::OPTION~${index + 1}${v.title ? `~${v.title}` : ''}`;\r\n        objWithAnyOfProps[prop] = `${getTypeInfo(v).html}`;\r\n        objWithAnyOfProps['::type'] = 'xxx-of-option';\r\n      }\r\n    });\r\n    obj[(schema.anyOf ? `::ANY~OF ${suffix}` : `::ONE~OF ${suffix}`)] = objWithAnyOfProps;\r\n    // obj['::type'] = 'object';\r\n    obj['::type'] = 'object';\r\n  } else if (Array.isArray(schema.type)) {\r\n    // When a property has multiple types, then check further if any of the types are array or object, if yes then modify the schema using one-of\r\n    // Clone the schema - as it will be modified to replace multi-data-types with one-of;\r\n    const subSchema = JSON.parse(JSON.stringify(schema));\r\n    const primitiveType = [];\r\n    const complexTypes = [];\r\n    subSchema.type.forEach((v) => {\r\n      if (v.match(/integer|number|string|null|boolean/g)) {\r\n        primitiveType.push(v);\r\n      } else if (v === 'array' && typeof subSchema.items?.type === 'string' && subSchema.items?.type.match(/integer|number|string|null|boolean/g)) {\r\n        // Array with primitive types should also be treated as primitive type\r\n        if (subSchema.items.type === 'string' && subSchema.items.format) {\r\n          primitiveType.push(`[${subSchema.items.format}]`);\r\n        } else {\r\n          primitiveType.push(`[${subSchema.items.type}]`);\r\n        }\r\n      } else {\r\n        complexTypes.push(v);\r\n      }\r\n    });\r\n    let multiPrimitiveTypes;\r\n    if (primitiveType.length > 0) {\r\n      subSchema.type = primitiveType.join(primitiveType.length === 2 ? ' or ' : '┃');\r\n      multiPrimitiveTypes = getTypeInfo(subSchema);\r\n      if (complexTypes.length === 0) {\r\n        return `${multiPrimitiveTypes?.html || ''}`;\r\n      }\r\n    }\r\n    if (complexTypes.length > 0) {\r\n      obj['::type'] = 'object';\r\n      const multiTypeOptions = {\r\n        '::type': 'xxx-of-option',\r\n      };\r\n\r\n      // Generate ONE-OF options for complexTypes\r\n      complexTypes.forEach((v, i) => {\r\n        if (v === 'null') {\r\n          multiTypeOptions[`::OPTION~${i + 1}`] = 'NULL~|~~|~~|~~|~~|~~|~~|~~|~';\r\n        } else if ('integer, number, string, boolean,'.includes(`${v},`)) {\r\n          subSchema.type = Array.isArray(v) ? v.join('┃') : v;\r\n          const primitiveTypeInfo = getTypeInfo(subSchema);\r\n          multiTypeOptions[`::OPTION~${i + 1}`] = primitiveTypeInfo.html;\r\n        } else if (v === 'object') {\r\n          // If object type iterate all the properties and create an object-type-option\r\n          const objTypeOption = {\r\n            '::title': schema.title || '',\r\n            '::description': schema.description || '',\r\n            '::type': 'object',\r\n            '::deprecated': schema.deprecated || false,\r\n          };\r\n          for (const key in schema.properties) {\r\n            if (schema.required && schema.required.includes(key)) {\r\n              objTypeOption[`${key}*`] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\r\n            } else {\r\n              objTypeOption[key] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\r\n            }\r\n          }\r\n          multiTypeOptions[`::OPTION~${i + 1}`] = objTypeOption;\r\n        } else if (v === 'array') {\r\n          multiTypeOptions[`::OPTION~${i + 1}`] = {\r\n            '::title': schema.title || '',\r\n            '::description': schema.description || '',\r\n            '::type': 'array',\r\n            '::props': schemaInObjectNotation(schema.items, {}, (level + 1)),\r\n          };\r\n        }\r\n      });\r\n      multiTypeOptions[`::OPTION~${complexTypes.length + 1}`] = multiPrimitiveTypes?.html || '';\r\n      obj['::ONE~OF'] = multiTypeOptions;\r\n    }\r\n  } else if (schema.type === 'object' || schema.properties) { // If Object\r\n    obj['::title'] = schema.title || '';\r\n    obj['::description'] = generateMarkdownForArrayAndObjectDescription(schema, level);\r\n    obj['::type'] = 'object';\r\n    if ((Array.isArray(schema.type) && schema.type.includes('null')) || schema.nullable) {\r\n      obj['::dataTypeLabel'] = 'object or null';\r\n    }\r\n    obj['::deprecated'] = schema.deprecated || false;\r\n    obj['::readwrite'] = schema.readOnly ? 'readonly' : schema.writeOnly ? 'writeonly' : '';\r\n    for (const key in schema.properties) {\r\n      if (schema.required && schema.required.includes(key)) {\r\n        obj[`${key}*`] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\r\n      } else {\r\n        obj[key] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\r\n      }\r\n    }\r\n    for (const key in schema.patternProperties) {\r\n      obj[`[pattern: ${key}]`] = schemaInObjectNotation(schema.patternProperties[key], obj, (level + 1));\r\n    }\r\n    if (schema.additionalProperties) {\r\n      obj['[any-key]'] = schemaInObjectNotation(schema.additionalProperties, {});\r\n    }\r\n  } else if (schema.type === 'array' || schema.items) { // If Array\r\n    obj['::title'] = schema.title || '';\r\n    obj['::description'] = generateMarkdownForArrayAndObjectDescription(schema, level);\r\n    obj['::type'] = 'array';\r\n    if ((Array.isArray(schema.type) && schema.type.includes('null')) || schema.nullable) {\r\n      obj['::dataTypeLabel'] = 'array or null';\r\n    }\r\n    obj['::deprecated'] = schema.deprecated || false;\r\n    obj['::readwrite'] = schema.readOnly ? 'readonly' : schema.writeOnly ? 'writeonly' : '';\r\n    if (schema.items?.items) {\r\n      obj['::array-type'] = schema.items.items.type;\r\n    }\r\n    obj['::props'] = schemaInObjectNotation(schema.items, {}, (level + 1));\r\n  } else {\r\n    const typeObj = getTypeInfo(schema);\r\n    if (typeObj?.html) {\r\n      return `${typeObj.html}`;\r\n    }\r\n    return '';\r\n  }\r\n  return obj;\r\n}\r\n\r\n/* Create Example object */\r\nexport function generateExample(schema, mimeType, examples = '', example = '', includeReadOnly = true, includeWriteOnly = true, outputType = 'json', includeGeneratedExample = false) {\r\n  const finalExamples = [];\r\n  // First check if examples is provided\r\n  if (examples) {\r\n    for (const eg in examples) {\r\n      let egContent = '';\r\n      let egFormat = 'json';\r\n      if (mimeType?.toLowerCase().includes('json')) {\r\n        if (outputType === 'text') {\r\n          egContent = typeof examples[eg].value === 'string' ? examples[eg].value : JSON.stringify(examples[eg].value, undefined, 2);\r\n          egFormat = 'text';\r\n        } else {\r\n          egContent = examples[eg].value;\r\n          if (typeof examples[eg].value === 'string') {\r\n            try {\r\n              // const fixedJsonString = examples[eg].value.replace((/([\\w]+)(:)/g), '\"$1\"$2').replace((/'/g), '\"');\r\n              const fixedJsonString = examples[eg].value;\r\n              egContent = JSON.parse(fixedJsonString);\r\n              egFormat = 'json';\r\n            } catch (err) {\r\n              egFormat = 'text';\r\n              egContent = examples[eg].value;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        egContent = examples[eg].value;\r\n        egFormat = 'text';\r\n      }\r\n\r\n      finalExamples.push({\r\n        exampleId: eg,\r\n        exampleSummary: examples[eg].summary || eg,\r\n        exampleDescription: examples[eg].description || '',\r\n        exampleType: mimeType,\r\n        exampleValue: egContent,\r\n        exampleFormat: egFormat,\r\n      });\r\n    }\r\n  } else if (example) {\r\n    let egContent = '';\r\n    let egFormat = 'json';\r\n    if (mimeType?.toLowerCase().includes('json')) {\r\n      if (outputType === 'text') {\r\n        egContent = typeof example === 'string' ? example : JSON.stringify(example, undefined, 2);\r\n        egFormat = 'text';\r\n      } else if (typeof example === 'object') {\r\n        egContent = example;\r\n        egFormat = 'json';\r\n      } else if (typeof example === 'string') {\r\n        try {\r\n          egContent = JSON.parse(example);\r\n          egFormat = 'json';\r\n        } catch (err) {\r\n          egFormat = 'text';\r\n          egContent = example;\r\n        }\r\n      }\r\n    } else {\r\n      egContent = example;\r\n      egFormat = 'text';\r\n    }\r\n    finalExamples.push({\r\n      exampleId: 'Example',\r\n      exampleSummary: '',\r\n      exampleDescription: '',\r\n      exampleType: mimeType,\r\n      exampleValue: egContent,\r\n      exampleFormat: egFormat,\r\n    });\r\n  }\r\n  // If schema-level examples are not provided or includeGeneratedExample === true then generate one based on the schema field types\r\n  if (finalExamples.length === 0 || includeGeneratedExample === true) {\r\n    if (schema) {\r\n      if (schema.example) {\r\n        // Note: Deprecated: The 'example' property has been deprecated in 3.1.0 in favor of the JSON Schema 'examples' keyword\r\n        finalExamples.push({\r\n          exampleId: 'Example',\r\n          exampleSummary: '',\r\n          exampleDescription: '',\r\n          exampleType: mimeType,\r\n          exampleValue: schema.example,\r\n          exampleFormat: ((mimeType?.toLowerCase().includes('json') && typeof schema.example === 'object') ? 'json' : 'text'),\r\n        });\r\n      } else if (mimeType?.toLowerCase().includes('json') || mimeType?.toLowerCase().includes('text') || mimeType?.toLowerCase().includes('*/*') || mimeType?.toLowerCase().includes('xml')) {\r\n        let xmlRootStart = '';\r\n        let xmlRootEnd = '';\r\n        let exampleFormat = '';\r\n        let exampleValue = '';\r\n        if (mimeType?.toLowerCase().includes('xml')) {\r\n          xmlRootStart = schema.xml?.name ? `<${schema.xml.name} ${schema.xml.namespace ? `xmlns=\"${schema.xml.namespace}\"` : ''}>` : '<root>';\r\n          xmlRootEnd = schema.xml?.name ? `</${schema.xml.name}>` : '</root>';\r\n          exampleFormat = 'text';\r\n        } else {\r\n          exampleFormat = outputType;\r\n        }\r\n        const samples = schemaToSampleObj(schema, { includeReadOnly, includeWriteOnly, deprecated: true, useXmlTagForProp: mimeType?.toLowerCase().includes('xml') });\r\n        let i = 0;\r\n        for (const samplesKey in samples) {\r\n          if (!samples[samplesKey]) {\r\n            continue;\r\n          }\r\n          const summary = samples[samplesKey]['::TITLE'] || `Example ${++i}`;\r\n          const description = samples[samplesKey]['::DESCRIPTION'] || '';\r\n          if (mimeType?.toLowerCase().includes('xml')) {\r\n            exampleValue = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n${xmlRootStart}${json2xml(samples[samplesKey], 1)}\\n${xmlRootEnd}`;\r\n          } else {\r\n            removeTitlesAndDescriptions(samples[samplesKey]);\r\n            exampleValue = outputType === 'text' ? JSON.stringify(samples[samplesKey], null, 2) : samples[samplesKey];\r\n          }\r\n\r\n          finalExamples.push({\r\n            exampleId: samplesKey,\r\n            exampleSummary: summary,\r\n            exampleDescription: description,\r\n            exampleType: mimeType,\r\n            exampleFormat,\r\n            exampleValue,\r\n          });\r\n        }\r\n      } else if (mimeType?.toLowerCase().includes('jose')) {\r\n        finalExamples.push({\r\n          exampleId: 'Example',\r\n          exampleSummary: 'Base64 Encoded',\r\n          exampleDescription: '',\r\n          exampleType: mimeType,\r\n          exampleValue: schema.pattern || 'bXJpbg==',\r\n          exampleFormat: 'text',\r\n        });\r\n      } else {\r\n        finalExamples.push({\r\n          exampleId: 'Example',\r\n          exampleSummary: '',\r\n          exampleDescription: '',\r\n          exampleType: mimeType,\r\n          exampleValue: '',\r\n          exampleFormat: 'text',\r\n        });\r\n      }\r\n    } else {\r\n      // No Example or Schema provided (should never reach here)\r\n      finalExamples.push({\r\n        exampleId: 'Example',\r\n        exampleSummary: '',\r\n        exampleDescription: '',\r\n        exampleType: mimeType,\r\n        exampleValue: '',\r\n        exampleFormat: 'text',\r\n      });\r\n    }\r\n  }\r\n  return finalExamples;\r\n}\r\n\r\nfunction getSerializeStyleForContentType(contentType) {\r\n  if (contentType === 'application/json') {\r\n    return 'json';\r\n  }\r\n  if (contentType === 'application/xml') {\r\n    return 'xml';\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function getSchemaFromParam(param) {\r\n  if (param.schema) {\r\n    return [param.schema, null, null];\r\n  }\r\n  if (param.content) {\r\n    // we gonna use the first content-encoding\r\n    for (const contentType of Object.keys(param.content)) {\r\n      if (param.content[contentType].schema) {\r\n        return [param.content[contentType].schema, getSerializeStyleForContentType(contentType), param.content[contentType]];\r\n      }\r\n    }\r\n  }\r\n  return [null, null, null];\r\n}\r\n","import { LitElement, html, css } from 'lit';\r\nimport { copyToClipboard } from '~/utils/common-utils';\r\nimport FontStyles from '~/styles/font-styles';\r\nimport BorderStyles from '~/styles/border-styles';\r\nimport InputStyles from '~/styles/input-styles';\r\nimport CustomStyles from '~/styles/custom-styles';\r\n\r\nexport default class JsonTree extends LitElement {\r\n  static get properties() {\r\n    return {\r\n      data: { type: Object },\r\n      renderStyle: { type: String, attribute: 'render-style' },\r\n    };\r\n  }\r\n\r\n  static get styles() {\r\n    return [\r\n      FontStyles,\r\n      BorderStyles,\r\n      InputStyles,\r\n      css`\r\n      :host{\r\n        display:flex;\r\n      }\r\n      :where(button, input[type=\"checkbox\"], [tabindex=\"0\"]):focus-visible { box-shadow: var(--focus-shadow); }\r\n      :where(input[type=\"text\"], input[type=\"password\"], select, textarea):focus-visible { border-color: var(--primary-color); }\r\n      .json-tree {\r\n        position: relative;\r\n        font-family: var(--font-mono);\r\n        font-size: var(--font-size-small);\r\n        display:inline-block;\r\n        overflow:hidden;\r\n        word-break: break-all;\r\n        flex:1;\r\n        line-height: calc(var(--font-size-small) + 6px);\r\n        min-height: 40px;\r\n        direction: ltr; \r\n        text-align: left;\r\n      }\r\n\r\n      .open-bracket {\r\n        display:inline-block;\r\n        padding: 0 20px 0 0;\r\n        cursor:pointer;\r\n        border: 1px solid transparent;\r\n        border-radius:3px;\r\n      }\r\n      .close-bracket {\r\n        border: 1px solid transparent;\r\n        border-radius:3px;\r\n        display:inline-block;\r\n      }\r\n      .open-bracket:hover {\r\n        color:var(--primary-color);\r\n        background-color:var(--hover-color);\r\n        border: 1px solid var(--border-color);\r\n      }\r\n      .open-bracket.expanded:hover ~ .inside-bracket {\r\n        border-left: 1px solid var(--fg3);\r\n      }\r\n      .open-bracket.expanded:hover ~ .close-bracket {\r\n        color:var(--primary-color);\r\n      }\r\n      .inside-bracket {\r\n        padding-left:12px;\r\n        overflow: hidden;\r\n        border-left:1px dotted var(--border-color);\r\n      }\r\n      .open-bracket.collapsed + .inside-bracket,\r\n      .open-bracket.collapsed + .inside-bracket + .close-bracket {\r\n        display:none;\r\n      }\r\n\r\n      .string{color:var(--green);}\r\n      .number{color:var(--blue);}\r\n      .null{color:var(--red);}\r\n      .boolean{color:var(--purple);}\r\n      .object{color:var(--fg)}\r\n      .toolbar {\r\n        position: absolute;\r\n        top:5px;\r\n        right:6px;\r\n        display:flex;\r\n        padding:2px;\r\n        align-items: center;\r\n      }`,\r\n      CustomStyles,\r\n    ];\r\n  }\r\n\r\n  /* eslint-disable indent */\r\n  render() {\r\n    return html`\r\n      <div class = \"json-tree\"  @click='${(e) => { if (e.target.classList.contains('btn-copy')) { copyToClipboard(JSON.stringify(this.data, null, 2), e); } else { this.toggleExpand(e); } }}'>\r\n        <div class='toolbar'> \r\n          <button class=\"toolbar-btn btn-copy\" part=\"btn btn-fill btn-copy\"> Copy </button>\r\n        </div>\r\n          ${this.generateTree(this.data, true)}\r\n      </div>  \r\n    `;\r\n  }\r\n\r\n  generateTree(data, isLast = false) {\r\n    if (data === null) {\r\n      return html`<div class=\"null\" style=\"display:inline;\">null</div>`;\r\n    }\r\n    if (typeof data === 'object' && (data instanceof Date === false)) {\r\n      const detailType = Array.isArray(data) ? 'array' : 'pure_object';\r\n      if (Object.keys(data).length === 0) {\r\n        return html`${(Array.isArray(data) ? '[ ],' : '{ },')}`;\r\n      }\r\n      return html`\r\n      <div class=\"open-bracket expanded ${detailType === 'array' ? 'array' : 'object'}\" > ${detailType === 'array' ? '[' : '{'}</div>\r\n      <div class=\"inside-bracket\">\r\n        ${Object.keys(data).map((key, i, a) => html`\r\n          <div class=\"item\"> \r\n            ${detailType === 'pure_object' ? html`\"${key}\":` : ''}\r\n            ${this.generateTree(data[key], i === (a.length - 1))}\r\n          </div>`)\r\n        }\r\n      </div>\r\n      <div class=\"close-bracket\">${detailType === 'array' ? ']' : '}'}${isLast ? '' : ','}</div>\r\n      `;\r\n    }\r\n    return (typeof data === 'string' || data instanceof Date)\r\n      ? html`<span class=\"${typeof data}\">\"${data}\"</span>${isLast ? '' : ','}`\r\n      : html`<span class=\"${typeof data}\">${data}</span>${isLast ? '' : ','}`;\r\n  }\r\n  /* eslint-enable indent */\r\n\r\n  toggleExpand(e) {\r\n    const openBracketEl = e.target;\r\n    if (e.target.classList.contains('open-bracket')) {\r\n      if (openBracketEl.classList.contains('expanded')) {\r\n        openBracketEl.classList.replace('expanded', 'collapsed');\r\n        e.target.innerHTML = e.target.classList.contains('array') ? '[...]' : '{...}';\r\n      } else {\r\n        openBracketEl.classList.replace('collapsed', 'expanded');\r\n        e.target.innerHTML = e.target.classList.contains('array') ? '[' : '{';\r\n      }\r\n    }\r\n  }\r\n}\r\n// Register the element with the browser\r\ncustomElements.define('json-tree', JsonTree);\r\n","import { LitElement, html, css } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\nimport FontStyles from '~/styles/font-styles';\r\nimport SchemaStyles from '~/styles/schema-styles';\r\nimport BorderStyles from '~/styles/border-styles';\r\nimport CustomStyles from '~/styles/custom-styles';\r\n\r\nexport default class SchemaTree extends LitElement {\r\n  static get properties() {\r\n    return {\r\n      data: { type: Object },\r\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\r\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\r\n      allowSchemaDescriptionExpandToggle: { type: String, attribute: 'allow-schema-description-expand-toggle' },\r\n      schemaHideReadOnly: { type: String, attribute: 'schema-hide-read-only' },\r\n      schemaHideWriteOnly: { type: String, attribute: 'schema-hide-write-only' },\r\n    };\r\n  }\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    if (!this.schemaExpandLevel || this.schemaExpandLevel < 1) { this.schemaExpandLevel = 99999; }\r\n    if (!this.schemaDescriptionExpanded || !'true false'.includes(this.schemaDescriptionExpanded)) { this.schemaDescriptionExpanded = 'false'; }\r\n    if (!this.schemaHideReadOnly || !'true false'.includes(this.schemaHideReadOnly)) { this.schemaHideReadOnly = 'true'; }\r\n    if (!this.schemaHideWriteOnly || !'true false'.includes(this.schemaHideWriteOnly)) { this.schemaHideWriteOnly = 'true'; }\r\n  }\r\n\r\n  static get styles() {\r\n    return [\r\n      FontStyles,\r\n      SchemaStyles,\r\n      BorderStyles,\r\n      css`\r\n      .tree {\r\n        font-size:var(--font-size-small);\r\n        text-align: left;\r\n        direction: ltr;\r\n        line-height:calc(var(--font-size-small) + 6px);\r\n      }\r\n      .tree .tr:hover{\r\n        background-color:var(--hover-color);\r\n      }\r\n      .collapsed-all-descr .tr:not(.expanded-descr) {\r\n        overflow: hidden;\r\n        max-height:calc(var(--font-size-small) + 8px);\r\n      }\r\n      .tree .key {\r\n        max-width: 300px;\r\n      }\r\n      .key.deprecated .key-label {\r\n        color: var(--red);\r\n      }\r\n      .tr.expanded:hover > .td.key > .open-bracket {\r\n        color: var(--primary-color);\r\n      }\r\n      .tr.expanded:hover + .inside-bracket {\r\n        border-left: 1px solid var(--fg3);\r\n      }\r\n      .tr.expanded:hover + .inside-bracket + .close-bracket {\r\n        color: var(--primary-color);\r\n      }\r\n      .inside-bracket.xxx-of-option {\r\n        border-left: 1px solid transparent;\r\n      }\r\n      .open-bracket{\r\n        display:inline-block;\r\n        padding: 0 20px 0 0;\r\n        cursor:pointer;\r\n        border: 1px solid transparent;\r\n        border-radius:3px;\r\n      }\r\n      .open-bracket:hover {\r\n        color:var(--primary-color);\r\n        background-color:var(--hover-color);\r\n        border: 1px solid var(--border-color);\r\n      }\r\n      .close-bracket{\r\n        display:inline-block;\r\n        font-family: var(--font-mono);\r\n      }\r\n      .tr.collapsed + .inside-bracket,\r\n      .tr.collapsed + .inside-bracket + .close-bracket{\r\n        overflow: hidden;\r\n        display:none;\r\n      }\r\n      .inside-bracket.object,\r\n      .inside-bracket.array {\r\n        border-left: 1px dotted var(--border-color);\r\n      }`,\r\n      CustomStyles,\r\n    ];\r\n  }\r\n\r\n  /* eslint-disable indent */\r\n  render() {\r\n    return html`\r\n      <div class=\"tree ${this.schemaDescriptionExpanded === 'true' ? 'expanded-all-descr' : 'collapsed-all-descr'}\" @click=\"${(e) => this.handleAllEvents(e)}\">\r\n        <div class=\"toolbar\">\r\n          <div class=\"toolbar-item schema-root-type ${this.data?.['::type'] || ''} \"> ${this.data?.['::type'] || ''} </div>\r\n          ${this.allowSchemaDescriptionExpandToggle === 'true'\r\n            ? html`\r\n              <div style=\"flex:1\"></div>\r\n              <div part=\"schema-toolbar-item schema-multiline-toggle\" class='toolbar-item schema-multiline-toggle'> \r\n                ${this.schemaDescriptionExpanded === 'true' ? 'Single line description' : 'Multiline description'}\r\n              </div>`\r\n            : ''\r\n          }\r\n        </div>\r\n        <span part=\"schema-description\" class='m-markdown'> ${unsafeHTML(marked(this.data?.['::description'] || ''))}</span>\r\n        ${this.data\r\n          ? html`\r\n            ${this.generateTree(\r\n              this.data['::type'] === 'array' ? this.data['::props'] : this.data,\r\n              this.data['::type'],\r\n              this.data['::array-type'] || '',\r\n            )}`\r\n          : html`<span class='mono-font' style='color:var(--red)'> Schema not found </span>`\r\n        }\r\n      </div>  \r\n    `;\r\n  }\r\n\r\n  generateTree(data, dataType = 'object', arrayType = '', key = '', description = '', schemaLevel = 0, indentLevel = 0, readOrWrite = '') {\r\n    if (this.schemaHideReadOnly === 'true') {\r\n      if (dataType === 'array') {\r\n        if (readOrWrite === 'readonly') {\r\n          return;\r\n        }\r\n      }\r\n      if (data?.['::readwrite'] === 'readonly') {\r\n        return;\r\n      }\r\n    }\r\n    if (this.schemaHideWriteOnly === 'true') {\r\n      if (dataType === 'array') {\r\n        if (readOrWrite === 'writeonly') {\r\n          return;\r\n        }\r\n      }\r\n      if (data?.['::readwrite'] === 'writeonly') {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (!data) {\r\n      return html`<div class=\"null\" style=\"display:inline;\">\r\n        <span class=\"key-label xxx-of-key\"> ${key.replace('::OPTION~', '')}</span>\r\n        ${\r\n          dataType === 'array'\r\n            ? html`<span class='mono-font'> [ ] </span>`\r\n            : dataType === 'object'\r\n              ? html`<span class='mono-font'> { } </span>`\r\n              : html`<span class='mono-font'> schema undefined </span>`\r\n        }\r\n      </div>`;\r\n    }\r\n    if (Object.keys(data).length === 0) {\r\n      return html`<span class=\"key object\">${key}:{ }</span>`;\r\n    }\r\n    let keyLabel = '';\r\n    let keyDescr = '';\r\n    if (key.startsWith('::ONE~OF') || key.startsWith('::ANY~OF')) {\r\n      keyLabel = key.replace('::', '').replace('~', ' ');\r\n    } else if (key.startsWith('::OPTION')) {\r\n      const parts = key.split('~');\r\n      [, keyLabel, keyDescr] = parts;\r\n    } else {\r\n      keyLabel = key;\r\n    }\r\n\r\n    const leftPadding = 12;\r\n    const minFieldColWidth = 400 - (indentLevel * leftPadding);\r\n    let openBracket = '';\r\n    let closeBracket = '';\r\n    const newSchemaLevel = data['::type']?.startsWith('xxx-of') ? schemaLevel : (schemaLevel + 1);\r\n    // const newIndentLevel = dataType === 'xxx-of-option' || data['::type'] === 'xxx-of-option' ? indentLevel : (indentLevel + 1);\r\n    const newIndentLevel = dataType === 'xxx-of-option' || data['::type'] === 'xxx-of-option' || key.startsWith('::OPTION') ? indentLevel : (indentLevel + 1);\r\n    if (data['::type'] === 'object') {\r\n      if (dataType === 'array') {\r\n        if (schemaLevel < this.schemaExpandLevel) {\r\n          openBracket = html`<span class=\"open-bracket array-of-object\" >[{</span>`;\r\n        } else {\r\n          openBracket = html`<span class=\"open-bracket array-of-object\">[{...}]</span>`;\r\n        }\r\n        closeBracket = '}]';\r\n      } else {\r\n        if (schemaLevel < this.schemaExpandLevel) {\r\n          openBracket = html`<span class=\"open-bracket object\">{</span>`;\r\n        } else {\r\n          openBracket = html`<span class=\"open-bracket object\">{...}</span>`;\r\n        }\r\n        closeBracket = '}';\r\n      }\r\n    } else if (data['::type'] === 'array') {\r\n      if (dataType === 'array') {\r\n        const arrType = arrayType !== 'object' ? arrayType : '';\r\n        if (schemaLevel < this.schemaExpandLevel) {\r\n          openBracket = html`<span class=\"open-bracket array-of-array\" data-array-type=\"${arrType}\">[[ ${arrType} </span>`;\r\n        } else {\r\n          openBracket = html`<span class=\"open-bracket array-of-array\"  data-array-type=\"${arrType}\">[[...]]</span>`;\r\n        }\r\n        closeBracket = ']]';\r\n      } else {\r\n        if (schemaLevel < this.schemaExpandLevel) {\r\n          openBracket = html`<span class=\"open-bracket array\">[</span>`;\r\n        } else {\r\n          openBracket = html`<span class=\"open-bracket array\">[...]</span>`;\r\n        }\r\n        closeBracket = ']';\r\n      }\r\n    }\r\n    if (typeof data === 'object') {\r\n      return html`\r\n        <div class=\"tr ${schemaLevel < this.schemaExpandLevel || data['::type']?.startsWith('xxx-of') ? 'expanded' : 'collapsed'} ${data['::type'] || 'no-type-info'}\" title=\"${data['::deprecated'] ? 'Deprecated' : ''}\">\r\n          <div class=\"td key ${data['::deprecated'] ? 'deprecated' : ''}\" style='min-width:${minFieldColWidth}px'>\r\n            ${data['::type'] === 'xxx-of-option' || data['::type'] === 'xxx-of-array' || key.startsWith('::OPTION')\r\n              ? html`<span class='key-label xxx-of-key'> ${keyLabel}</span><span class=\"xxx-of-descr\">${keyDescr}</span>`\r\n              : keyLabel === '::props' || keyLabel === '::ARRAY~OF'\r\n                ? ''\r\n                : schemaLevel > 0\r\n                  ? html`<span class=\"key-label\" title=\"${readOrWrite === 'readonly' ? 'Read-Only' : readOrWrite === 'writeonly' ? 'Write-Only' : ''}\">\r\n                      ${data['::deprecated'] ? '✗' : ''}\r\n                      ${keyLabel.replace(/\\*$/, '')}${keyLabel.endsWith('*') ? html`<span style=\"color:var(--red)\">*</span>` : ''}${readOrWrite === 'readonly' ? html` 🆁` : readOrWrite === 'writeonly' ? html` 🆆` : readOrWrite}:\r\n                    </span>`\r\n                  : ''\r\n            }\r\n            ${openBracket}\r\n          </div>\r\n          <div class='td key-descr m-markdown-small'>${unsafeHTML(marked(description || ''))}</div>\r\n        </div>\r\n        <div class='inside-bracket ${data['::type'] || 'no-type-info'}' style='padding-left:${data['::type'] === 'xxx-of-option' || data['::type'] === 'xxx-of-array' ? 0 : leftPadding}px;'>\r\n          ${Array.isArray(data) && data[0]\r\n            ? html`${this.generateTree(data[0], 'xxx-of-option', '', '::ARRAY~OF', '', newSchemaLevel, newIndentLevel, data[0]['::readwrite'])}`\r\n            : html`\r\n              ${Object.keys(data).map((dataKey) => html`\r\n                ${['::title', '::description', '::type', '::props', '::deprecated', '::array-type', '::readwrite', '::dataTypeLabel'].includes(dataKey)\r\n                  ? data[dataKey]['::type'] === 'array' || data[dataKey]['::type'] === 'object'\r\n                    ? html`${this.generateTree(\r\n                      data[dataKey]['::type'] === 'array' ? data[dataKey]['::props'] : data[dataKey],\r\n                        data[dataKey]['::type'],\r\n                        data[dataKey]['::array-type'] || '',\r\n                        dataKey,\r\n                        data[dataKey]['::description'],\r\n                        newSchemaLevel,\r\n                        newIndentLevel,\r\n                        data[dataKey]['::readwrite'] ? data[dataKey]['::readwrite'] : '',\r\n                      )}`\r\n                    : ''\r\n                  : html`${this.generateTree(\r\n                    data[dataKey]['::type'] === 'array' ? data[dataKey]['::props'] : data[dataKey],\r\n                    data[dataKey]['::type'],\r\n                    data[dataKey]['::array-type'] || '',\r\n                    dataKey,\r\n                    data[dataKey]?.['::description'] || '',\r\n                    newSchemaLevel,\r\n                    newIndentLevel,\r\n                    data[dataKey]['::readwrite'] ? data[dataKey]['::readwrite'] : '',\r\n                  )}`\r\n                }\r\n              `)}\r\n            `\r\n          }\r\n        </div>\r\n        ${data['::type'] && data['::type'].includes('xxx-of')\r\n          ? ''\r\n          : html`<div class='close-bracket'> ${closeBracket} </div>`\r\n        }\r\n      `;\r\n    }\r\n\r\n    // For Primitive types and array of Primitives\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [type, primitiveReadOrWrite, constraint, defaultValue, allowedValues, pattern, schemaDescription, schemaTitle, deprecated] = data.split('~|~');\r\n    if (primitiveReadOrWrite === '🆁' && this.schemaHideReadOnly === 'true') {\r\n      return;\r\n    }\r\n    if (primitiveReadOrWrite === '🆆' && this.schemaHideWriteOnly === 'true') {\r\n      return;\r\n    }\r\n    const dataTypeCss = type.replace(/┃.*/g, '').replace(/[^a-zA-Z0-9+]/g, '').substring(0, 4).toLowerCase();\r\n    const descrExpander = `${constraint || defaultValue || allowedValues || pattern ? `<span class=\"descr-expand-toggle ${this.schemaDescriptionExpanded === 'true' ? 'expanded-descr' : ''}\">➔</span>` : ''}`;\r\n    let finalReadWriteText = '';\r\n    let finalReadWriteTip = '';\r\n    if (dataType === 'array') {\r\n      if (readOrWrite === 'readonly') {\r\n        finalReadWriteText = '🆁';\r\n        finalReadWriteTip = 'Read-Only';\r\n      } else if (readOrWrite === 'writeonly') {\r\n        finalReadWriteText = '🆆';\r\n        finalReadWriteTip = 'Write-Only';\r\n      }\r\n    } else if (primitiveReadOrWrite === '🆁') {\r\n      finalReadWriteText = '🆁';\r\n      finalReadWriteTip = 'Read-Only';\r\n    } else if (primitiveReadOrWrite === '🆆') {\r\n      finalReadWriteText = '🆆';\r\n      finalReadWriteTip = 'Write-Only';\r\n    }\r\n\r\n    return html`\r\n      <div class = \"tr primitive\" title=\"${deprecated ? 'Deprecated' : ''}\">\r\n        <div class=\"td key ${deprecated}\" style='min-width:${minFieldColWidth}px'>\r\n          ${deprecated ? html`<span style='color:var(--red);'>✗</span>` : ''}\r\n          ${keyLabel.endsWith('*')\r\n            ? html`<span class=\"key-label\">${keyLabel.substring(0, keyLabel.length - 1)}</span><span style='color:var(--red);'>*</span>:`\r\n            : key.startsWith('::OPTION')\r\n              ? html`<span class='key-label xxx-of-key'>${keyLabel}</span><span class=\"xxx-of-descr\">${keyDescr}</span>`\r\n              : html`<span class=\"key-label\">${keyLabel}:</span>`\r\n          }\r\n          <span class=\"${dataTypeCss}\" title=\"${finalReadWriteTip}\"> \r\n            ${dataType === 'array' ? `[${type}]` : `${type}`}\r\n            ${finalReadWriteText}\r\n          </span>\r\n        </div>\r\n        <div class='td key-descr'>\r\n          ${description || schemaTitle || schemaDescription\r\n            ? html`${html`<span class=\"m-markdown-small\">\r\n                ${unsafeHTML(marked(dataType === 'array'\r\n                  ? `${descrExpander} ${description}`\r\n                  : schemaTitle\r\n                    ? `${descrExpander} <b>${schemaTitle}:</b> ${schemaDescription}`\r\n                    : `${descrExpander} ${schemaDescription}`))}\r\n              </span>`\r\n              }`\r\n            : ''\r\n          }  \r\n          ${constraint ? html`<div style='display:inline-block; line-break:anywhere; margin-right:8px'><span class='bold-text'>Constraints: </span>${constraint}</div>` : ''}\r\n          ${defaultValue ? html`<div style='display:inline-block; line-break:anywhere; margin-right:8px'><span class='bold-text'>Default: </span>${defaultValue}</div>` : ''}\r\n          ${allowedValues ? html`<div style='display:inline-block; line-break:anywhere; margin-right:8px'><span class='bold-text'>${type === 'const' ? 'Value' : 'Allowed'}: </span>${allowedValues}</div>` : ''}\r\n          ${pattern ? html`<div style='display:inline-block; line-break: anywhere; margin-right:8px'><span class='bold-text'>Pattern: </span>${pattern}</div>` : ''}\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n  /* eslint-enable indent */\r\n\r\n  handleAllEvents(e) {\r\n    if (e.target.classList.contains('open-bracket')) {\r\n      this.toggleObjectExpand(e);\r\n    } else if (e.target.classList.contains('schema-multiline-toggle')) {\r\n      this.schemaDescriptionExpanded = (this.schemaDescriptionExpanded === 'true' ? 'false' : 'true');\r\n    } else if (e.target.classList.contains('descr-expand-toggle')) {\r\n      const trEl = e.target.closest('.tr');\r\n      if (trEl) {\r\n        trEl.classList.toggle('expanded-descr');\r\n        trEl.style.maxHeight = trEl.scrollHeight;\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleObjectExpand(e) {\r\n    const rowEl = e.target.closest('.tr');\r\n    if (rowEl.classList.contains('expanded')) {\r\n      rowEl.classList.replace('expanded', 'collapsed');\r\n      e.target.innerHTML = e.target.classList.contains('array-of-object')\r\n        ? '[{...}]'\r\n        : e.target.classList.contains('array-of-array')\r\n          ? '[[...]]'\r\n          : e.target.classList.contains('array')\r\n            ? '[...]'\r\n            : '{...}';\r\n    } else {\r\n      rowEl.classList.replace('collapsed', 'expanded');\r\n      e.target.innerHTML = e.target.classList.contains('array-of-object')\r\n        ? '[{'\r\n        : e.target.classList.contains('array-of-array')\r\n          ? `[[ ${e.target.dataset.arrayType}`\r\n          : e.target.classList.contains('object')\r\n            ? '{'\r\n            : '[';\r\n    }\r\n  }\r\n}\r\ncustomElements.define('schema-tree', SchemaTree);\r\n","import { LitElement, html, css } from 'lit';\r\n\r\nexport default class TagInput extends LitElement {\r\n  /* eslint-disable indent */\r\n  render() {\r\n    let tagItemTmpl = '';\r\n    if (Array.isArray(this.value)) {\r\n      tagItemTmpl = html`${this.value\r\n        .filter((v) => typeof v === 'string' && v.trim() !== '')\r\n        .map((v) => html`<span class='tag'>${v}</span>`)\r\n      }`;\r\n    }\r\n    return html`\r\n      <div class='tags'>\r\n        ${tagItemTmpl}\r\n        <input type=\"text\" class='editor' @paste=\"${(e) => this.afterPaste(e)}\" @keydown=\"${this.afterKeyDown}\" @blur=\"${this.onBlur}\" placeholder=\"${this.placeholder || ''}\">\r\n      </div>\r\n    `;\r\n  }\r\n  /* eslint-enable indent */\r\n\r\n  static get properties() {\r\n    return {\r\n      placeholder: { type: String },\r\n      value: { type: Array, attribute: 'value' },\r\n    };\r\n  }\r\n\r\n  attributeChangedCallback(name, oldVal, newVal) {\r\n    if (name === 'value') {\r\n      if (newVal && oldVal !== newVal) {\r\n        this.value = newVal.split(',').filter((v) => v.trim() !== '');\r\n      }\r\n    }\r\n    super.attributeChangedCallback(name, oldVal, newVal);\r\n  }\r\n\r\n  afterPaste(e) {\r\n    const clipboardData = e.clipboardData || window.clipboardData;\r\n    const pastedData = clipboardData.getData('Text');\r\n    const pastedArray = pastedData ? pastedData.split(',').filter((v) => v.trim() !== '') : '';\r\n    if (pastedArray) {\r\n      if (Array.isArray(this.value)) {\r\n        this.value = [...this.value, ...pastedArray];\r\n      } else {\r\n        this.value = pastedArray;\r\n      }\r\n    }\r\n    e.preventDefault();\r\n  }\r\n\r\n  afterKeyDown(e) {\r\n    if (e.keyCode === 13) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      if (e.target.value) {\r\n        if (Array.isArray(this.value)) {\r\n          this.value = [...this.value, e.target.value];\r\n        } else {\r\n          this.value = [e.target.value];\r\n        }\r\n        e.target.value = '';\r\n      }\r\n    } else if (e.keyCode === 8) {\r\n      if (e.target.value.length === 0) {\r\n        if (Array.isArray(this.value) && this.value.length > 0) {\r\n          this.value.splice(-1);\r\n          this.value = [...this.value];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  onBlur(e) {\r\n    if (e.target.value) {\r\n      if (Array.isArray(this.value)) {\r\n        this.value = [...this.value, e.target.value];\r\n      } else {\r\n        this.value = [e.target.value];\r\n      }\r\n      e.target.value = '';\r\n    }\r\n  }\r\n\r\n  static get styles() {\r\n    return [css`\r\n      .tags {\r\n        display:flex;\r\n        flex-wrap: wrap;\r\n        outline: none;\r\n        padding:0;\r\n        border-radius:var(--border-radius);\r\n        border:1px solid var(--border-color);\r\n        cursor:text;\r\n        overflow:hidden;\r\n        background:var(--input-bg);\r\n      }\r\n      .tag, .editor {\r\n        padding:3px;\r\n        margin:2px;\r\n      }\r\n      .tag{\r\n        border:1px solid var(--border-color);\r\n        background-color:var(--bg3);\r\n        color:var(--fg3);\r\n        border-radius:var(--border-radius);\r\n        word-break: break-all;\r\n        font-size: var(--font-size-small);\r\n      }\r\n      .tag:hover ~ #cursor {\r\n        display: block;\r\n      }\r\n      .editor {\r\n        flex:1;\r\n        border:1px solid transparent;\r\n        color:var(--fg);\r\n        min-width:60px;\r\n        outline: none;\r\n        line-height: inherit;\r\n        font-family:inherit;\r\n        background:transparent;\r\n        font-size: calc(var(--font-size-small) + 1px);\r\n      }\r\n      .editor:focus-visible {\r\n        outline: 1px solid;\r\n      }\r\n      .editor::placeholder {\r\n        color: var(--placeholder-color);\r\n        opacity:1;\r\n      }\r\n    `];\r\n  }\r\n}\r\n// Register the element with the browser\r\ncustomElements.define('tag-input', TagInput);\r\n","import { LitElement, html, css } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { guard } from 'lit/directives/guard.js'; // eslint-disable-line import/extensions\r\nimport { live } from 'lit/directives/live.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\nimport formatXml from 'xml-but-prettier';\r\nimport Prism from 'prismjs';\r\nimport TableStyles from '~/styles/table-styles';\r\nimport FlexStyles from '~/styles/flex-styles';\r\nimport InputStyles from '~/styles/input-styles';\r\nimport FontStyles from '~/styles/font-styles';\r\nimport BorderStyles from '~/styles/border-styles';\r\nimport TabStyles from '~/styles/tab-styles';\r\nimport PrismStyles from '~/styles/prism-styles';\r\nimport CustomStyles from '~/styles/custom-styles';\r\nimport { copyToClipboard, downloadResource, viewResource } from '~/utils/common-utils';\r\nimport { schemaInObjectNotation,\r\n  getTypeInfo,\r\n  generateExample,\r\n  normalizeExamples,\r\n  getSchemaFromParam,\r\n  json2xml,\r\n  nestExampleIfPresent,\r\n  anyExampleWithSummaryOrDescription } from '~/utils/schema-utils';\r\nimport '~/components/json-tree';\r\nimport '~/components/schema-tree';\r\nimport '~/components/tag-input';\r\n\r\nexport default class ApiRequest extends LitElement {\r\n  constructor() {\r\n    super();\r\n    this.responseMessage = '';\r\n    this.responseStatus = 'success';\r\n    this.responseHeaders = '';\r\n    this.responseText = '';\r\n    this.responseUrl = '';\r\n    this.curlSyntax = '';\r\n    this.activeResponseTab = 'response'; // allowed values: response, headers, curl\r\n    this.selectedRequestBodyType = '';\r\n    this.selectedRequestBodyExample = '';\r\n    this.activeParameterSchemaTabs = {};\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      serverUrl: { type: String, attribute: 'server-url' },\r\n      servers: { type: Array },\r\n      method: { type: String },\r\n      path: { type: String },\r\n      security: { type: Array },\r\n      parameters: { type: Array },\r\n      request_body: { type: Object },\r\n      api_keys: { type: Array },\r\n      parser: { type: Object },\r\n      accept: { type: String },\r\n      callback: { type: String },\r\n      webhook: { type: String },\r\n      responseMessage: { type: String, attribute: false },\r\n      responseText: { type: String, attribute: false },\r\n      responseHeaders: { type: String, attribute: false },\r\n      responseStatus: { type: String, attribute: false },\r\n      responseUrl: { type: String, attribute: false },\r\n      curlSyntax: { type: String, attribute: false },\r\n      fillRequestFieldsWithExample: { type: String, attribute: 'fill-request-fields-with-example' },\r\n      allowTry: { type: String, attribute: 'allow-try' },\r\n      showCurlBeforeTry: { type: String, attribute: 'show-curl-before-try' },\r\n      renderStyle: { type: String, attribute: 'render-style' },\r\n      schemaStyle: { type: String, attribute: 'schema-style' },\r\n      activeSchemaTab: { type: String, attribute: 'active-schema-tab' },\r\n      activeParameterSchemaTabs: {\r\n        type: Object,\r\n        converter: {\r\n          fromAttribute: (attr) => JSON.parse(attr),\r\n          toAttribute: (prop) => JSON.stringify(prop),\r\n        },\r\n        attribute: 'active-parameter-schema-tabs',\r\n      },\r\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\r\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\r\n      allowSchemaDescriptionExpandToggle: { type: String, attribute: 'allow-schema-description-expand-toggle' },\r\n      schemaHideReadOnly: { type: String, attribute: 'schema-hide-read-only' },\r\n      schemaHideWriteOnly: { type: String, attribute: 'schema-hide-write-only' },\r\n      fetchCredentials: { type: String, attribute: 'fetch-credentials' },\r\n\r\n      // properties for internal tracking\r\n      activeResponseTab: { type: String }, // internal tracking of response-tab not exposed as a attribute\r\n      selectedRequestBodyType: { type: String, attribute: 'selected-request-body-type' }, // internal tracking of selected request-body type\r\n      selectedRequestBodyExample: { type: String, attribute: 'selected-request-body-example' }, // internal tracking of selected request-body example\r\n    };\r\n  }\r\n\r\n  static get styles() {\r\n    return [\r\n      TableStyles,\r\n      InputStyles,\r\n      FontStyles,\r\n      FlexStyles,\r\n      BorderStyles,\r\n      TabStyles,\r\n      PrismStyles,\r\n      css`\r\n        *, *:before, *:after { box-sizing: border-box; }\r\n        :where(button, input[type=\"checkbox\"], [tabindex=\"0\"]):focus-visible { box-shadow: var(--focus-shadow); }\r\n        :where(input[type=\"text\"], input[type=\"password\"], select, textarea):focus-visible { border-color: var(--primary-color); }\r\n        tag-input:focus-within { outline: 1px solid;}\r\n        .read-mode {\r\n          margin-top: 24px;\r\n        }\r\n        .param-name,\r\n        .param-type {\r\n          margin: 1px 0;\r\n          text-align: right;\r\n          line-height: var(--font-size-small);\r\n        }\r\n        .param-name {\r\n          color: var(--fg); \r\n          font-family: var(--font-mono);\r\n        }\r\n        .param-name.deprecated { \r\n          color: var(--red);\r\n        }\r\n        .param-type{\r\n          color: var(--light-fg); \r\n          font-family: var(--font-regular);\r\n        }\r\n        .param-constraint{\r\n          min-width:100px;\r\n        }\r\n        .param-constraint:empty{\r\n          display:none;\r\n        }\r\n        .top-gap{margin-top:24px;}\r\n\r\n        .textarea {\r\n          min-height:220px; \r\n          padding:5px;\r\n          resize:vertical;\r\n          direction: ltr;\r\n        }\r\n        .example:first-child {\r\n          margin-top: -9px;\r\n        }\r\n\r\n        .response-message{\r\n          font-weight:bold;\r\n          text-overflow: ellipsis;\r\n        }\r\n        .response-message.error {\r\n          color:var(--red);\r\n        }\r\n        .response-message.success {\r\n          color:var(--blue);\r\n        }\r\n\r\n        .file-input-container {\r\n          align-items:flex-end;\r\n        }\r\n        .file-input-container .input-set:first-child .file-input-remove-btn{\r\n          visibility:hidden;\r\n        }\r\n\r\n        .file-input-remove-btn{\r\n          font-size:16px;\r\n          color:var(--red);\r\n          outline: none;\r\n          border: none;\r\n          background:none;\r\n          cursor:pointer;\r\n        }\r\n\r\n        .v-tab-btn {\r\n          font-size: var(--smal-font-size);\r\n          height:24px; \r\n          border:none; \r\n          background:none; \r\n          opacity: 0.3;\r\n          cursor: pointer;\r\n          padding: 4px 8px;\r\n        }\r\n        .v-tab-btn.active {\r\n          font-weight: bold;\r\n          background: var(--bg);\r\n          opacity: 1;\r\n        }\r\n\r\n        @media only screen and (min-width: 768px) {\r\n          .textarea {\r\n            padding:8px;\r\n          }\r\n        }\r\n\r\n        @media only screen and (max-width: 470px) {\r\n          .hide-in-small-screen {\r\n            display:none;\r\n          }\r\n        }\r\n      `,\r\n      CustomStyles,\r\n    ];\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n    <div class=\"col regular-font request-panel ${'read focused'.includes(this.renderStyle) || this.callback === 'true' ? 'read-mode' : 'view-mode'}\">\r\n      <div class=\" ${this.callback === 'true' ? 'tiny-title' : 'req-res-title'} \"> \r\n        ${this.callback === 'true' ? 'CALLBACK REQUEST' : 'REQUEST'}\r\n      </div>\r\n      <div>\r\n        ${guard([this.method, this.path, this.allowTry, this.parameters, this.activeParameterSchemaTabs], () => this.inputParametersTemplate('path'))}\r\n        ${guard([this.method, this.path, this.allowTry, this.parameters, this.activeParameterSchemaTabs], () => this.inputParametersTemplate('query'))}\r\n        ${this.requestBodyTemplate()}\r\n        ${guard([this.method, this.path, this.allowTry, this.parameters, this.activeParameterSchemaTabs], () => this.inputParametersTemplate('header'))}\r\n        ${guard([this.method, this.path, this.allowTry, this.parameters, this.activeParameterSchemaTabs], () => this.inputParametersTemplate('cookie'))}\r\n        ${this.allowTry === 'false' ? '' : html`${this.apiCallTemplate()}`}\r\n      </div>  \r\n    </div>\r\n    `;\r\n  }\r\n\r\n  async updated() {\r\n    if (this.showCurlBeforeTry === 'true') {\r\n      this.applyCURLSyntax(this.shadowRoot);\r\n    }\r\n\r\n    // In focused mode after rendering the request component, update the text-areas(which contains examples) using\r\n    // the original values from hidden textareas\r\n    // This is done coz, user may update the dom by editing the textarea's and once the DOM is updated externally change detection wont happen, therefore update the values manually\r\n\r\n    // if (this.renderStyle === 'focused') {\r\n    //   if (changedProperties.size === 1 && changedProperties.has('activeSchemaTab')) {\r\n    //     // dont update example as only tabs is switched\r\n    //   } else {\r\n    //     this.requestUpdate();\r\n    //   }\r\n    // }\r\n\r\n    if (this.webhook === 'true') {\r\n      this.allowTry = 'false';\r\n    }\r\n  }\r\n\r\n  async saveExampleState() {\r\n    if (this.renderStyle === 'focused') {\r\n      const reqBodyTextAreaEls = [...this.shadowRoot.querySelectorAll('textarea.request-body-param-user-input')];\r\n      reqBodyTextAreaEls.forEach((el) => {\r\n        el.dataset.user_example = el.value;\r\n      });\r\n      const exampleTextAreaEls = [...this.shadowRoot.querySelectorAll('textarea[data-ptype=\"form-data\"]')];\r\n      exampleTextAreaEls.forEach((el) => {\r\n        el.dataset.user_example = el.value;\r\n      });\r\n      this.requestUpdate();\r\n    }\r\n  }\r\n\r\n  async updateExamplesFromDataAttr() {\r\n    // In focused mode after rendering the request component, update the text-areas(which contains examples) using\r\n    // the original values from hidden textareas\r\n    // This is done coz, user may update the dom by editing the textarea's and once the DOM is updated externally change detection wont happen, therefore update the values manually\r\n    if (this.renderStyle === 'focused') {\r\n      const reqBodyTextAreaEls = [...this.shadowRoot.querySelectorAll('textarea.request-body-param-user-input')];\r\n      reqBodyTextAreaEls.forEach((el) => {\r\n        el.value = el.dataset.user_example || el.dataset.example;\r\n      });\r\n      const exampleTextAreaEls = [...this.shadowRoot.querySelectorAll('textarea[data-ptype=\"form-data\"]')];\r\n      exampleTextAreaEls.forEach((el) => {\r\n        el.value = el.dataset.user_example || el.dataset.example;\r\n      });\r\n      this.requestUpdate();\r\n    }\r\n  }\r\n\r\n  /* eslint-disable indent */\r\n  renderExample(example, paramType, paramName) {\r\n    return html`\r\n      ${paramType === 'array' ? '[' : ''}\r\n      <a\r\n        part=\"anchor anchor-param-example\"\r\n        style=\"display:inline-block; min-width:24px; text-align:center\"\r\n        class=\"${this.allowTry === 'true' ? '' : 'inactive-link'}\"\r\n        data-example-type=\"${paramType === 'array' ? paramType : 'string'}\"\r\n        data-example=\"${example.value && Array.isArray(example.value) ? example.value?.join('~|~') : (typeof example.value === 'object' ? JSON.stringify(example.value, null, 2) : example.value) || ''}\"\r\n        title=\"${example.value && Array.isArray(example.value) ? example.value?.join('~|~') : (typeof example.value === 'object' ? JSON.stringify(example.value, null, 2) : example.value) || ''}\"\r\n        @click=\"${(e) => {\r\n          const inputEl = e.target.closest('table').querySelector(`[data-pname=\"${paramName}\"]`);\r\n          if (inputEl) {\r\n            inputEl.value = e.target.dataset.exampleType === 'array' ? e.target.dataset.example.split('~|~') : e.target.dataset.example;\r\n          }\r\n        }}\"\r\n      > ${example.printableValue || example.value} </a>\r\n      ${paramType === 'array' ? '] ' : ''}\r\n    `;\r\n  }\r\n\r\n  renderShortFormatExamples(examples, paramType, paramName) {\r\n    return html`${examples.map((x, i) => html`\r\n      ${i === 0 ? '' : '┃'}\r\n      ${this.renderExample(x, paramType, paramName)}`)}`;\r\n  }\r\n\r\n  renderLongFormatExamples(exampleList, paramType, paramName) {\r\n    return html` <ul style=\"list-style-type: disclosure-closed;\">\r\n      ${exampleList.map((v) => html`\r\n          <li>\r\n            ${this.renderExample(v, paramType, paramName)}\r\n            ${v.summary?.length > 0 ? html`<span>&lpar;${v.summary}&rpar;</span>` : ''}\r\n            ${v.description?.length > 0 ? html`<p>${unsafeHTML(marked(v.description))}</p>` : ''}\r\n          </li>\r\n        `)}\r\n    </ul>`;\r\n  }\r\n\r\n  exampleListTemplate(paramName, paramType, exampleList = []) {\r\n    return html` ${\r\n      exampleList.length > 0\r\n        ? html`<span style=\"font-weight:bold\">Examples: </span>\r\n          ${anyExampleWithSummaryOrDescription(exampleList)\r\n            ? this.renderLongFormatExamples(exampleList, paramType, paramName)\r\n            : this.renderShortFormatExamples(exampleList, paramType, paramName)}`\r\n        : ''\r\n      }`;\r\n  }\r\n\r\n  inputParametersTemplate(paramType) {\r\n    const filteredParams = this.parameters ? this.parameters.filter((param) => param.in === paramType) : [];\r\n    if (filteredParams.length === 0) {\r\n      return '';\r\n    }\r\n    let title = '';\r\n    if (paramType === 'path') {\r\n      title = 'PATH PARAMETERS';\r\n    } else if (paramType === 'query') {\r\n      title = 'QUERY-STRING PARAMETERS';\r\n    } else if (paramType === 'header') {\r\n      title = 'REQUEST HEADERS';\r\n    } else if (paramType === 'cookie') {\r\n      title = 'COOKIES';\r\n    }\r\n\r\n    const tableRows = [];\r\n    for (const param of filteredParams) {\r\n      const [declaredParamSchema, serializeStyle, mimeTypeElem] = getSchemaFromParam(param);\r\n      if (!declaredParamSchema) {\r\n        continue;\r\n      }\r\n      const paramSchema = getTypeInfo(declaredParamSchema);\r\n      if (!paramSchema) {\r\n        continue; // eslint-disable-line no-continue\r\n      }\r\n      const schemaAsObj = schemaInObjectNotation(declaredParamSchema, {});\r\n      // let exampleVal = '';\r\n      // let exampleList = [];\r\n      let paramStyle = 'form';\r\n      let paramExplode = true;\r\n      let paramAllowReserved = false;\r\n      if (paramType === 'query') {\r\n        if (param.style && 'form spaceDelimited pipeDelimited'.includes(param.style)) {\r\n          paramStyle = param.style;\r\n        } else if (serializeStyle) {\r\n          paramStyle = serializeStyle;\r\n        }\r\n        if (typeof param.explode === 'boolean') {\r\n          paramExplode = param.explode;\r\n        }\r\n        if (typeof param.allowReserved === 'boolean') {\r\n          paramAllowReserved = param.allowReserved;\r\n        }\r\n      }\r\n      // openapi 3.1.0 spec based examples (which must be Object(string : { value:any, summary?: string, description?: string})\r\n      const example = normalizeExamples(\r\n        (param.examples\r\n          || nestExampleIfPresent(param.example)\r\n          || nestExampleIfPresent(mimeTypeElem?.example)\r\n          || mimeTypeElem?.examples\r\n          || nestExampleIfPresent(paramSchema.examples)\r\n          || nestExampleIfPresent(paramSchema.example)\r\n        ),\r\n        paramSchema.type,\r\n      );\r\n      if (!example.exampleVal && paramSchema.type === 'object') {\r\n        example.exampleVal = generateExample(\r\n          declaredParamSchema,\r\n          serializeStyle || 'json',\r\n          '',\r\n          '',\r\n          this.callback === 'true' || this.webhook === 'true' ? true : false, // eslint-disable-line no-unneeded-ternary\r\n          this.callback === 'true' || this.webhook === 'true' ? false : true, // eslint-disable-line no-unneeded-ternary\r\n          true,\r\n          'text',\r\n          false,\r\n        )[0].exampleValue;\r\n      }\r\n      const labelColWidth = 'read focused'.includes(this.renderStyle) ? '200px' : '160px';\r\n      tableRows.push(html`\r\n      <tr title=\"${param.deprecated ? 'Deprecated' : ''}\"> \r\n        <td rowspan=\"${this.allowTry === 'true' ? '1' : '2'}\" style=\"width:${labelColWidth}; min-width:100px;\">\r\n          <div class=\"param-name ${param.deprecated ? 'deprecated' : ''}\" >\r\n            ${param.deprecated ? html`<span style='color:var(--red);'>✗</span>` : ''}\r\n            ${param.required ? html`<span style='color:var(--red)'>*</span>` : ''}\r\n            ${param.name}\r\n          </div>\r\n          <div class=\"param-type\">\r\n            ${paramSchema.type === 'array'\r\n              ? `${paramSchema.arrayType}`\r\n              : `${paramSchema.format ? paramSchema.format : paramSchema.type}`\r\n            }\r\n          </div>\r\n        </td>  \r\n        ${this.allowTry === 'true'\r\n          ? html`\r\n            <td style=\"min-width:100px;\" colspan=\"${paramSchema.default || paramSchema.constrain || paramSchema.allowedValues || paramSchema.pattern ? '1' : '2'}\">\r\n              ${paramSchema.type === 'array'\r\n                ? html`\r\n                  <tag-input class=\"request-param\" \r\n                    style = \"width:100%\" \r\n                    data-ptype = \"${paramType}\"\r\n                    data-pname = \"${param.name}\"\r\n                    data-example = \"${Array.isArray(example.exampleVal) ? example.exampleVal.join('~|~') : example.exampleVal}\"\r\n                    data-param-serialize-style = \"${paramStyle}\"\r\n                    data-param-serialize-explode = \"${paramExplode}\"\r\n                    data-param-allow-reserved = \"${paramAllowReserved}\"\r\n                    data-x-fill-example = \"${param['x-fill-example'] || 'yes'}\"\r\n                    data-array = \"true\"\r\n                    placeholder = \"add-multiple &#x21a9;\"\r\n                    .value=\"${param['x-fill-example'] === 'no'\r\n                      ? []\r\n                      : live(this.fillRequestFieldsWithExample === 'true' ? Array.isArray(example.exampleVal) ? example.exampleVal : [example.exampleVal] : [])\r\n                    }\"\r\n                  >\r\n                  </tag-input>`\r\n                : paramSchema.type === 'object'\r\n                  ? html`\r\n                    <div class=\"tab-panel col\" style=\"border-width:0 0 1px 0;\">\r\n                      <div class=\"tab-buttons row\" @click=\"${(e) => {\r\n                        if (e.target.tagName.toLowerCase() === 'button') {\r\n                          const newState = { ...this.activeParameterSchemaTabs };\r\n                          newState[param.name] = e.target.dataset.tab;\r\n                          this.activeParameterSchemaTabs = newState;\r\n                        }\r\n                      }}\">\r\n                        <button class=\"tab-btn ${this.activeParameterSchemaTabs[param.name] === 'example' ? 'active' : ''}\" data-tab = 'example'>EXAMPLE </button>\r\n                        <button class=\"tab-btn ${this.activeParameterSchemaTabs[param.name] !== 'example' ? 'active' : ''}\" data-tab = 'schema'>SCHEMA</button>\r\n                      </div>\r\n                      ${this.activeParameterSchemaTabs[param.name] === 'example'\r\n                        ? html`<div class=\"tab-content col\">\r\n                          <textarea \r\n                            class = \"textarea request-param\"\r\n                            part = \"textarea textarea-param\"\r\n                            data-ptype = \"${paramType}-object\"\r\n                            data-pname = \"${param.name}\"\r\n                            data-example = \"${example.exampleVal}\"\r\n                            data-param-serialize-style = \"${paramStyle}\"\r\n                            data-param-serialize-explode = \"${paramExplode}\"\r\n                            data-param-allow-reserved = \"${paramAllowReserved}\"\r\n                            data-x-fill-example = \"${param['x-fill-example'] || 'yes'}\"\r\n                            spellcheck = \"false\"\r\n                            .textContent=\"${param['x-fill-example'] === 'no' ? '' : live(this.fillRequestFieldsWithExample === 'true' ? (typeof example.exampleVal === 'object' ? JSON.stringify(example.exampleVal, null, 2) : example.exampleVal) : '')}\"\r\n                            style = \"resize:vertical; width:100%; height: ${'read focused'.includes(this.renderStyle) ? '180px' : '120px'};\"\r\n                            @input=${(e) => {\r\n                              const requestPanelEl = this.getRequestPanel(e);\r\n                              this.liveCURLSyntaxUpdate(requestPanelEl);\r\n                            }}\r\n                          ></textarea>\r\n                        </div>`\r\n                        : html`\r\n                          <div class=\"tab-content col\">\r\n                            <schema-tree\r\n                              class = 'json'\r\n                              style = 'display: block'\r\n                              .data = '${schemaAsObj}'\r\n                              schema-expand-level = \"${this.schemaExpandLevel}\"\r\n                              schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n                              allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n                              schema-hide-read-only = \"${this.schemaHideReadOnly.includes(this.method)}\"\r\n                              schema-hide-write-only = \"${this.schemaHideWriteOnly.includes(this.method)}\"\r\n                              exportparts = \"wrap-request-btn:wrap-request-btn, btn:btn, btn-fill:btn-fill, btn-outline:btn-outline, btn-try:btn-try, btn-clear:btn-clear, btn-clear-resp:btn-clear-resp,\r\n                                file-input:file-input, textbox:textbox, textbox-param:textbox-param, textarea:textarea, textarea-param:textarea-param, \r\n                                anchor:anchor, anchor-param-example:anchor-param-example\"\r\n                            > </schema-tree>\r\n                          </div>`\r\n                        }\r\n                    </div>`\r\n                  : html`\r\n                    <input type=\"${paramSchema.format === 'password' ? 'password' : 'text'}\" spellcheck=\"false\" style=\"width:100%\" \r\n                      class=\"request-param\"\r\n                      part=\"textbox textbox-param\"\r\n                      data-ptype=\"${paramType}\"\r\n                      data-pname=\"${param.name}\" \r\n                      data-example=\"${Array.isArray(example.exampleVal) ? example.exampleVal.join('~|~') : example.exampleVal}\"\r\n                      data-param-allow-reserved = \"${paramAllowReserved}\"\r\n                      data-x-fill-example = \"${param['x-fill-example'] || 'yes'}\"\r\n                      data-array=\"false\"\r\n                      .value=\"${param['x-fill-example'] === 'no' ? '' : live(this.fillRequestFieldsWithExample === 'true' ? example.exampleVal : '')}\"\r\n                      @input=${(e) => {\r\n                        const requestPanelEl = this.getRequestPanel(e);\r\n                        this.liveCURLSyntaxUpdate(requestPanelEl);\r\n                      }}\r\n                    />`\r\n                }\r\n            </td>`\r\n          : ''\r\n        }\r\n        ${paramSchema.default || paramSchema.constrain || paramSchema.allowedValues || paramSchema.pattern\r\n          ? html`\r\n            <td colspan=\"${(this.allowTry === 'true') ? '1' : '2'}\">\r\n              <div class=\"param-constraint\">\r\n                ${paramSchema.default ? html`<span style=\"font-weight:bold\">Default: </span>${paramSchema.default}<br/>` : ''}\r\n                ${paramSchema.pattern ? html`<span style=\"font-weight:bold\">Pattern: </span>${paramSchema.pattern}<br/>` : ''}\r\n                ${paramSchema.constrain ? html`${paramSchema.constrain}<br/>` : ''}\r\n                ${paramSchema.allowedValues && paramSchema.allowedValues.split('┃').map((v, i) => html`\r\n                  ${i > 0 ? '┃' : html`<span style=\"font-weight:bold\">Allowed: </span>`}\r\n                  ${html`\r\n                    <a part=\"anchor anchor-param-constraint\" class = \"${this.allowTry === 'true' ? '' : 'inactive-link'}\"\r\n                      data-type=\"${paramSchema.type === 'array' ? paramSchema.type : 'string'}\"\r\n                      data-enum=\"${v.trim()}\"\r\n                      @click=\"${(e) => {\r\n                        const inputEl = e.target.closest('table').querySelector(`[data-pname=\"${param.name}\"]`);\r\n                        if (inputEl) {\r\n                          if (e.target.dataset.type === 'array') {\r\n                            inputEl.value = [e.target.dataset.enum];\r\n                          } else {\r\n                            inputEl.value = e.target.dataset.enum;\r\n                          }\r\n                        }\r\n                      }}\"\r\n                    >${v}</a>`\r\n                  }`)}\r\n              </div>\r\n            </td>`\r\n          : html`<td></td>`\r\n        }\r\n      </tr>\r\n      <tr>\r\n        ${this.allowTry === 'true' ? html`<td style=\"border:none\"> </td>` : ''}\r\n        <td colspan=\"2\" style=\"border:none\">\r\n          <span class=\"m-markdown-small\">${unsafeHTML(marked(param.description || ''))}</span>\r\n          ${this.exampleListTemplate.call(this, param.name, paramSchema.type, example.exampleList)}\r\n        </td>\r\n      </tr>\r\n    `);\r\n    }\r\n\r\n    return html`\r\n    <div class=\"table-title top-gap\">${title}</div>\r\n    <div style=\"display:block; overflow-x:auto; max-width:100%;\">\r\n      <table role=\"presentation\" class=\"m-table\" style=\"width:100%; word-break:break-word;\">\r\n        ${tableRows}\r\n      </table>\r\n    </div>`;\r\n  }\r\n\r\n  // This method is called before navigation change in focused mode\r\n  async beforeNavigationFocusedMode() {\r\n    // this.saveExampleState();\r\n  }\r\n\r\n  // This method is called after navigation change in focused mode\r\n  async afterNavigationFocusedMode() {\r\n    this.selectedRequestBodyType = '';\r\n    this.selectedRequestBodyExample = '';\r\n    this.updateExamplesFromDataAttr();\r\n    this.clearResponseData();\r\n  }\r\n\r\n  // Request-Body Event Handlers\r\n  onSelectExample(e) {\r\n    this.selectedRequestBodyExample = e.target.value;\r\n    const exampleDropdownEl = e.target;\r\n    window.setTimeout((selectEl) => {\r\n      const readOnlyExampleEl = selectEl.closest('.example-panel').querySelector('.request-body-param');\r\n      const userInputExampleTextareaEl = selectEl.closest('.example-panel').querySelector('.request-body-param-user-input');\r\n      userInputExampleTextareaEl.value = readOnlyExampleEl.innerText;\r\n\r\n      const requestPanelEl = this.getRequestPanel({ target: selectEl });\r\n      this.liveCURLSyntaxUpdate(requestPanelEl);\r\n    }, 0, exampleDropdownEl);\r\n  }\r\n\r\n  onMimeTypeChange(e) {\r\n    this.selectedRequestBodyType = e.target.value;\r\n    const mimeDropdownEl = e.target;\r\n    this.selectedRequestBodyExample = '';\r\n    window.setTimeout((selectEl) => {\r\n      const readOnlyExampleEl = selectEl.closest('.request-body-container').querySelector('.request-body-param');\r\n      if (readOnlyExampleEl) {\r\n        const userInputExampleTextareaEl = selectEl.closest('.request-body-container').querySelector('.request-body-param-user-input');\r\n        userInputExampleTextareaEl.value = readOnlyExampleEl.innerText;\r\n      }\r\n    }, 0, mimeDropdownEl);\r\n  }\r\n\r\n  requestBodyTemplate() {\r\n    if (!this.request_body) {\r\n      return '';\r\n    }\r\n    if (Object.keys(this.request_body).length === 0) {\r\n      return '';\r\n    }\r\n\r\n    // Variable to store partial HTMLs\r\n    let reqBodyTypeSelectorHtml = '';\r\n    let reqBodyFileInputHtml = '';\r\n    let reqBodyFormHtml = '';\r\n    let reqBodySchemaHtml = '';\r\n    let reqBodyExampleHtml = '';\r\n\r\n    const requestBodyTypes = [];\r\n    const { content } = this.request_body;\r\n    for (const mimeType in content) {\r\n      requestBodyTypes.push({\r\n        mimeType,\r\n        schema: content[mimeType].schema,\r\n        example: content[mimeType].example,\r\n        examples: content[mimeType].examples,\r\n      });\r\n      if (!this.selectedRequestBodyType) {\r\n        this.selectedRequestBodyType = mimeType;\r\n      }\r\n    }\r\n    // MIME Type selector\r\n    reqBodyTypeSelectorHtml = requestBodyTypes.length === 1\r\n      ? ''\r\n      : html`\r\n        <select style=\"min-width:100px; max-width:100%;  margin-bottom:-1px;\" @change = '${(e) => this.onMimeTypeChange(e)}'>\r\n          ${requestBodyTypes.map((reqBody) => html`\r\n            <option value = '${reqBody.mimeType}' ?selected = '${reqBody.mimeType === this.selectedRequestBodyType}'>\r\n              ${reqBody.mimeType}\r\n            </option> `)\r\n          }\r\n        </select>\r\n      `;\r\n\r\n    // For Loop - Main\r\n    requestBodyTypes.forEach((reqBody) => {\r\n      let schemaAsObj;\r\n      let reqBodyExamples = [];\r\n\r\n      if (this.selectedRequestBodyType.includes('json') || this.selectedRequestBodyType.includes('xml') || this.selectedRequestBodyType.includes('text') || this.selectedRequestBodyType.includes('jose')) {\r\n        // Generate Example\r\n        if (reqBody.mimeType === this.selectedRequestBodyType) {\r\n          reqBodyExamples = generateExample(\r\n            reqBody.schema,\r\n            reqBody.mimeType,\r\n            reqBody.examples,\r\n            reqBody.example,\r\n            this.callback === 'true' || this.webhook === 'true' ? true : false, // eslint-disable-line no-unneeded-ternary\r\n            this.callback === 'true' || this.webhook === 'true' ? false : true, // eslint-disable-line no-unneeded-ternary\r\n            'text',\r\n            false,\r\n          );\r\n          if (!this.selectedRequestBodyExample) {\r\n            this.selectedRequestBodyExample = (reqBodyExamples.length > 0 ? reqBodyExamples[0].exampleId : '');\r\n          }\r\n          reqBodyExampleHtml = html`\r\n            ${reqBodyExampleHtml}\r\n            <div class = 'example-panel border-top pad-top-8'>\r\n              ${reqBodyExamples.length === 1\r\n                ? ''\r\n                : html`\r\n                  <select style=\"min-width:100px; max-width:100%;  margin-bottom:-1px;\" @change='${(e) => this.onSelectExample(e)}'>\r\n                    ${reqBodyExamples.map((v) => html`<option value=\"${v.exampleId}\" ?selected=${v.exampleId === this.selectedRequestBodyExample} > \r\n                      ${v.exampleSummary.length > 80 ? v.exampleId : v.exampleSummary ? v.exampleSummary : v.exampleId} \r\n                    </option>`)}\r\n                  </select>\r\n                `\r\n              }\r\n              ${reqBodyExamples\r\n                .filter((v) => v.exampleId === this.selectedRequestBodyExample)\r\n                .map((v) => html`\r\n                <div class=\"example ${v.exampleId === this.selectedRequestBodyExample ? 'example-selected' : ''}\" data-example = '${v.exampleId}'>\r\n                  ${v.exampleSummary && v.exampleSummary.length > 80 ? html`<div style=\"padding: 4px 0\"> ${v.exampleSummary} </div>` : ''}\r\n                  ${v.exampleDescription ? html`<div class=\"m-markdown-small\" style=\"padding: 4px 0\"> ${unsafeHTML(marked(v.exampleDescription || ''))} </div>` : ''}\r\n                  <!-- This pre(hidden) is to store the original example value, this will remain unchanged when users switches from one example to another, its is used to populate the editable textarea -->\r\n                  <pre \r\n                    class = \"textarea is-hidden request-body-param ${reqBody.mimeType.substring(reqBody.mimeType.indexOf('/') + 1)}\" \r\n                    spellcheck = \"false\"\r\n                    data-ptype = \"${reqBody.mimeType}\" \r\n                    style=\"width:100%; resize:vertical; display:none\"\r\n                  >${(v.exampleFormat === 'text' ? v.exampleValue : JSON.stringify(v.exampleValue, null, 2))}</pre>\r\n\r\n                  <!-- this textarea is for user to edit the example -->\r\n                  <textarea \r\n                    class = \"textarea request-body-param-user-input\"\r\n                    part = \"textarea textarea-param\"\r\n                    spellcheck = \"false\"\r\n                    data-ptype = \"${reqBody.mimeType}\" \r\n                    data-example = \"${v.exampleFormat === 'text' ? v.exampleValue : JSON.stringify(v.exampleValue, null, 2)}\"\r\n                    data-example-format = \"${v.exampleFormat}\"\r\n                    style=\"width:100%; resize:vertical;\"\r\n                    .textContent = \"${this.fillRequestFieldsWithExample === 'true' ? (v.exampleFormat === 'text' ? v.exampleValue : JSON.stringify(v.exampleValue, null, 2)) : ''}\"\r\n                    @input=${(e) => {\r\n                      const requestPanelEl = this.getRequestPanel(e);\r\n                      this.liveCURLSyntaxUpdate(requestPanelEl);\r\n                    }}\r\n                  ></textarea>\r\n                </div>  \r\n              `)}\r\n\r\n            </div>\r\n          `;\r\n        }\r\n      } else if (this.selectedRequestBodyType.includes('form-urlencoded') || this.selectedRequestBodyType.includes('form-data')) {\r\n        if (reqBody.mimeType === this.selectedRequestBodyType) {\r\n          const ex = generateExample(\r\n            reqBody.schema,\r\n            reqBody.mimeType,\r\n            reqBody.examples,\r\n            reqBody.example,\r\n            this.callback === 'true' || this.webhook === 'true' ? true : false, // eslint-disable-line no-unneeded-ternary\r\n            this.callback === 'true' || this.webhook === 'true' ? false : true, // eslint-disable-line no-unneeded-ternary\r\n            'text',\r\n            false,\r\n          );\r\n          if (reqBody.schema) {\r\n            reqBodyFormHtml = this.formDataTemplate(reqBody.schema, reqBody.mimeType, (ex[0] ? ex[0].exampleValue : ''));\r\n          }\r\n        }\r\n      } else if ((/^audio\\/|^image\\/|^video\\/|^font\\/|tar$|zip$|7z$|rtf$|msword$|excel$|\\/pdf$|\\/octet-stream$/.test(this.selectedRequestBodyType))) {\r\n        if (reqBody.mimeType === this.selectedRequestBodyType) {\r\n          reqBodyFileInputHtml = html`\r\n            <div class = \"small-font-size bold-text row\">\r\n              <input type=\"file\" part=\"file-input\" style=\"max-width:100%\" class=\"request-body-param-file\" data-ptype=\"${reqBody.mimeType}\" spellcheck=\"false\" />\r\n            </div>  \r\n          `;\r\n        }\r\n      }\r\n\r\n      // Generate Schema\r\n      if (reqBody.mimeType.includes('json') || reqBody.mimeType.includes('xml') || reqBody.mimeType.includes('text') || this.selectedRequestBodyType.includes('jose')) {\r\n        schemaAsObj = schemaInObjectNotation(reqBody.schema, {});\r\n        if (this.schemaStyle === 'table') {\r\n          reqBodySchemaHtml = html`\r\n            ${reqBodySchemaHtml}\r\n            <schema-table\r\n              class = '${reqBody.mimeType.substring(reqBody.mimeType.indexOf('/') + 1)}'\r\n              style = 'display: ${this.selectedRequestBodyType === reqBody.mimeType ? 'block' : 'none'};'\r\n              .data = '${schemaAsObj}'\r\n              schema-expand-level = \"${this.schemaExpandLevel}\"\r\n              schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n              allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n              schema-hide-read-only = \"${this.schemaHideReadOnly}\"\r\n              schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\r\n              exportparts = \"schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n            > </schema-table>\r\n          `;\r\n        } else if (this.schemaStyle === 'tree') {\r\n          reqBodySchemaHtml = html`\r\n            ${reqBodySchemaHtml}\r\n            <schema-tree\r\n              class = \"${reqBody.mimeType.substring(reqBody.mimeType.indexOf('/') + 1)}\"\r\n              style = \"display: ${this.selectedRequestBodyType === reqBody.mimeType ? 'block' : 'none'};\"\r\n              .data = \"${schemaAsObj}\"\r\n              schema-expand-level = \"${this.schemaExpandLevel}\"\r\n              schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n              allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n              schema-hide-read-only = \"${this.schemaHideReadOnly}\"\r\n              schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\r\n              exportparts = \"schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n            > </schema-tree>\r\n          `;\r\n        }\r\n      }\r\n    });\r\n\r\n    return html`\r\n      <div class='request-body-container' data-selected-request-body-type=\"${this.selectedRequestBodyType}\">\r\n        <div class=\"table-title top-gap row\">\r\n          REQUEST BODY ${this.request_body.required ? html`<span class=\"mono-font\" style='color:var(--red)'>*</span>` : ''} \r\n          <span style = \"font-weight:normal; margin-left:5px\"> ${this.selectedRequestBodyType}</span>\r\n          <span style=\"flex:1\"></span>\r\n          ${reqBodyTypeSelectorHtml}\r\n        </div>\r\n        ${this.request_body.description ? html`<div class=\"m-markdown\" style=\"margin-bottom:12px\">${unsafeHTML(marked(this.request_body.description))}</div>` : ''}\r\n        \r\n        ${(this.selectedRequestBodyType.includes('json') || this.selectedRequestBodyType.includes('xml') || this.selectedRequestBodyType.includes('text') || this.selectedRequestBodyType.includes('jose'))\r\n          ? html`\r\n            <div class=\"tab-panel col\" style=\"border-width:0 0 1px 0;\">\r\n              <div class=\"tab-buttons row\" @click=\"${(e) => { if (e.target.tagName.toLowerCase() === 'button') { this.activeSchemaTab = e.target.dataset.tab; } }}\">\r\n                <button class=\"tab-btn ${this.activeSchemaTab === 'example' ? 'active' : ''}\" data-tab = 'example'>EXAMPLE</button>\r\n                <button class=\"tab-btn ${this.activeSchemaTab !== 'example' ? 'active' : ''}\" data-tab = 'schema'>SCHEMA</button>\r\n              </div>\r\n              ${html`<div class=\"tab-content col\" style=\"display:${this.activeSchemaTab === 'example' ? 'block' : 'none'};\"> ${reqBodyExampleHtml}</div>`}\r\n              ${html`<div class=\"tab-content col\" style=\"display:${this.activeSchemaTab === 'example' ? 'none' : 'block'};\"> ${reqBodySchemaHtml}</div>`}\r\n            </div>`\r\n          : html`  \r\n            ${reqBodyFileInputHtml}\r\n            ${reqBodyFormHtml}`\r\n        }\r\n      </div>  \r\n    `;\r\n  }\r\n\r\n  formDataParamAsObjectTemplate(fieldName, fieldSchema, mimeType) {\r\n    // This template is used when form-data param should be send as a object (application/json, application/xml)\r\n    const formdataPartSchema = schemaInObjectNotation(fieldSchema, {});\r\n    const formdataPartExample = generateExample(\r\n      fieldSchema,\r\n      'json',\r\n      fieldSchema.examples,\r\n      fieldSchema.example,\r\n      this.callback === 'true' || this.webhook === 'true' ? true : false, // eslint-disable-line no-unneeded-ternary\r\n      this.callback === 'true' || this.webhook === 'true' ? false : true, // eslint-disable-line no-unneeded-ternary\r\n      'text',\r\n      false,\r\n    );\r\n\r\n    return html`\r\n      <div class=\"tab-panel row\" style=\"min-height:220px; border-left: 6px solid var(--light-border-color); align-items: stretch;\">\r\n        <div style=\"width:24px; background-color:var(--light-border-color)\">\r\n          <div class=\"row\" style=\"flex-direction:row-reverse; width:160px; height:24px; transform:rotate(270deg) translateX(-160px); transform-origin:top left; display:block;\" @click=\"${(e) => {\r\n          if (e.target.classList.contains('v-tab-btn')) {\r\n            const { tab } = e.target.dataset;\r\n            if (tab) {\r\n              const tabPanelEl = e.target.closest('.tab-panel');\r\n              const selectedTabBtnEl = tabPanelEl.querySelector(`.v-tab-btn[data-tab=\"${tab}\"]`);\r\n              const otherTabBtnEl = [...tabPanelEl.querySelectorAll(`.v-tab-btn:not([data-tab=\"${tab}\"])`)];\r\n              const selectedTabContentEl = tabPanelEl.querySelector(`.tab-content[data-tab=\"${tab}\"]`);\r\n              const otherTabContentEl = [...tabPanelEl.querySelectorAll(`.tab-content:not([data-tab=\"${tab}\"])`)];\r\n              selectedTabBtnEl.classList.add('active');\r\n              selectedTabContentEl.style.display = 'block';\r\n              otherTabBtnEl.forEach((el) => { el.classList.remove('active'); });\r\n              otherTabContentEl.forEach((el) => { el.style.display = 'none'; });\r\n            }\r\n          }\r\n          if (e.target.tagName.toLowerCase() === 'button') { this.activeSchemaTab = e.target.dataset.tab; }\r\n        }}\">\r\n          <button class=\"v-tab-btn ${this.activeSchemaTab === 'example' ? 'active' : ''}\" data-tab = 'example'>EXAMPLE</button>\r\n          <button class=\"v-tab-btn ${this.activeSchemaTab !== 'example' ? 'active' : ''}\" data-tab = 'schema'>SCHEMA</button>\r\n        </div>\r\n      </div>\r\n      ${html`\r\n        <div class=\"tab-content col\" data-tab = 'example' style=\"display:${this.activeSchemaTab === 'example' ? 'block' : 'none'}; padding-left:5px; width:100%\"> \r\n          <textarea \r\n            class = \"textarea\"\r\n            part = \"textarea textarea-param\"\r\n            style = \"width:100%; border:none; resize:vertical;\" \r\n            data-array = \"false\" \r\n            data-ptype = \"${mimeType.includes('form-urlencode') ? 'form-urlencode' : 'form-data'}\"\r\n            data-pname = \"${fieldName}\"\r\n            data-example = \"${formdataPartExample[0]?.exampleValue || ''}\"\r\n            .textContent = \"${this.fillRequestFieldsWithExample === 'true' ? formdataPartExample[0].exampleValue : ''}\"\r\n            spellcheck = \"false\"\r\n          ></textarea>\r\n        </div>`\r\n      }\r\n      ${html`\r\n        <div class=\"tab-content col\" data-tab = 'schema' style=\"display:${this.activeSchemaTab !== 'example' ? 'block' : 'none'}; padding-left:5px; width:100%;\"> \r\n          <schema-tree\r\n            .data = '${formdataPartSchema}'\r\n            schema-expand-level = \"${this.schemaExpandLevel}\"\r\n            schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n            allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\r\n          > </schema-tree>\r\n        </div>`\r\n      }\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  formDataTemplate(schema, mimeType, exampleValue = '') {\r\n    const formDataTableRows = [];\r\n    if (schema.properties) {\r\n      for (const fieldName in schema.properties) {\r\n        const fieldSchema = schema.properties[fieldName];\r\n        if (fieldSchema.readOnly) {\r\n          continue;\r\n        }\r\n        const fieldExamples = fieldSchema.examples || fieldSchema.example || '';\r\n        const fieldType = fieldSchema.type;\r\n        const paramSchema = getTypeInfo(fieldSchema);\r\n        const labelColWidth = 'read focused'.includes(this.renderStyle) ? '200px' : '160px';\r\n        const example = normalizeExamples((paramSchema.examples || paramSchema.example), paramSchema.type);\r\n        formDataTableRows.push(html`\r\n        <tr title=\"${fieldSchema.deprecated ? 'Deprecated' : ''}\"> \r\n          <td style=\"width:${labelColWidth}; min-width:100px;\">\r\n            <div class=\"param-name ${fieldSchema.deprecated ? 'deprecated' : ''}\">\r\n              ${fieldName}${(schema.required?.includes(fieldName) || fieldSchema.required) ? html`<span style='color:var(--red);'>*</span>` : ''}\r\n            </div>\r\n            <div class=\"param-type\">${paramSchema.type}</div>\r\n          </td>  \r\n          <td \r\n            style=\"${fieldType === 'object' ? 'width:100%; padding:0;' : this.allowTry === 'true' ? '' : 'display:none;'} min-width:100px;\" \r\n            colspan=\"${fieldType === 'object' ? 2 : 1}\">\r\n            ${fieldType === 'array'\r\n              ? fieldSchema.items?.format === 'binary'\r\n                ? html`\r\n                <div class=\"file-input-container col\" style='align-items:flex-end;' @click=\"${(e) => this.onAddRemoveFileInput(e, fieldName, mimeType)}\">\r\n                  <div class='input-set row'>\r\n                    <input \r\n                      type = \"file\"\r\n                      part = \"file-input\"\r\n                      style = \"width:100%\" \r\n                      data-pname = \"${fieldName}\" \r\n                      data-ptype = \"${mimeType.includes('form-urlencode') ? 'form-urlencode' : 'form-data'}\"\r\n                      data-array = \"false\" \r\n                      data-file-array = \"true\" \r\n                    />\r\n                    <button class=\"file-input-remove-btn\"> &#x2715; </button>\r\n                  </div>  \r\n                  <button class=\"m-btn primary file-input-add-btn\" part=\"btn btn-fill\" style=\"margin:2px 25px 0 0; padding:2px 6px;\">ADD</button>\r\n                </div>  \r\n                `\r\n                : html`\r\n                  <tag-input\r\n                    style = \"width:100%\" \r\n                    data-ptype = \"${mimeType.includes('form-urlencode') ? 'form-urlencode' : 'form-data'}\"\r\n                    data-pname = \"${fieldName}\"\r\n                    data-example = \"${Array.isArray(fieldExamples) ? fieldExamples.join('~|~') : fieldExamples}\"\r\n                    data-array = \"true\"\r\n                    placeholder = \"add-multiple &#x21a9;\"\r\n                    .value = \"${Array.isArray(fieldExamples) ? Array.isArray(fieldExamples[0]) ? fieldExamples[0] : [fieldExamples[0]] : [fieldExamples]}\"\r\n                  >\r\n                  </tag-input>\r\n                `\r\n              : html`\r\n                ${fieldType === 'object'\r\n                  ? this.formDataParamAsObjectTemplate.call(this, fieldName, fieldSchema, mimeType)\r\n                  : html`\r\n                    ${this.allowTry === 'true'\r\n                      ? html`<input\r\n                          .value = \"${this.fillRequestFieldsWithExample === 'true' ? example.exampleVal : ''}\"\r\n                          spellcheck = \"false\"\r\n                          type = \"${fieldSchema.format === 'binary' ? 'file' : fieldSchema.format === 'password' ? 'password' : 'text'}\"\r\n                          part = \"textbox textbox-param\"\r\n                          style = \"width:100%\"\r\n                          data-ptype = \"${mimeType.includes('form-urlencode') ? 'form-urlencode' : 'form-data'}\"\r\n                          data-pname = \"${fieldName}\"\r\n                          data-example = \"${Array.isArray(fieldExamples) ? fieldExamples[0] : fieldExamples}\"\r\n                          data-array = \"false\"\r\n                        />`\r\n                      : ''\r\n                    }\r\n                    `\r\n                  }`\r\n              }\r\n          </td>\r\n          ${fieldType === 'object'\r\n            ? ''\r\n            : html`\r\n              <td>\r\n                ${paramSchema.default || paramSchema.constrain || paramSchema.allowedValues || paramSchema.pattern\r\n                  ? html`\r\n                    <div class=\"param-constraint\">\r\n                      ${paramSchema.default ? html`<span style=\"font-weight:bold\">Default: </span>${paramSchema.default}<br/>` : ''}\r\n                      ${paramSchema.pattern ? html`<span style=\"font-weight:bold\">Pattern: </span>${paramSchema.pattern}<br/>` : ''}\r\n                      ${paramSchema.constrain ? html`${paramSchema.constrain}<br/>` : ''}\r\n                      ${paramSchema.allowedValues && paramSchema.allowedValues.split('┃').map((v, i) => html`\r\n                        ${i > 0 ? '┃' : html`<span style=\"font-weight:bold\">Allowed: </span>`}\r\n                        ${html`\r\n                          <a part=\"anchor anchor-param-constraint\" class = \"${this.allowTry === 'true' ? '' : 'inactive-link'}\"\r\n                            data-type=\"${paramSchema.type === 'array' ? paramSchema.type : 'string'}\"\r\n                            data-enum=\"${v.trim()}\"\r\n                            @click=\"${(e) => {\r\n                              const inputEl = e.target.closest('table').querySelector(`[data-pname=\"${fieldName}\"]`);\r\n                              if (inputEl) {\r\n                                if (e.target.dataset.type === 'array') {\r\n                                  inputEl.value = [e.target.dataset.enum];\r\n                                } else {\r\n                                  inputEl.value = e.target.dataset.enum;\r\n                                }\r\n                              }\r\n                            }}\"\r\n                          > \r\n                            ${v} \r\n                          </a>`\r\n                        }`)\r\n                      }\r\n                    </div>`\r\n                  : ''\r\n                }\r\n              </td>`\r\n          }\r\n        </tr>\r\n        ${fieldType === 'object'\r\n          ? ''\r\n          : html`\r\n            <tr>\r\n              <td style=\"border:none\"> </td>\r\n              <td colspan=\"2\" style=\"border:none; margin-top:0; padding:0 5px 8px 5px;\"> \r\n                <span class=\"m-markdown-small\">${unsafeHTML(marked(fieldSchema.description || ''))}</span>\r\n                ${this.exampleListTemplate.call(this, fieldName, paramSchema.type, example.exampleList)}\r\n              </td>\r\n            </tr>\r\n          `\r\n        }`);\r\n      }\r\n      return html`\r\n        <table role=\"presentation\" style=\"width:100%;\" class=\"m-table\">\r\n          ${formDataTableRows}\r\n        </table>\r\n      `;\r\n    }\r\n\r\n    return html`\r\n      <textarea\r\n        class = \"textarea dynamic-form-param ${mimeType}\"\r\n        part = \"textarea textarea-param\"\r\n        spellcheck = \"false\"\r\n        data-pname=\"dynamic-form\" \r\n        data-ptype=\"${mimeType}\"\r\n        .textContent = \"${exampleValue}\"\r\n        style=\"width:100%\"\r\n      ></textarea>\r\n      ${schema.description ? html`<span class=\"m-markdown-small\">${unsafeHTML(marked(schema.description))}</span>` : ''}\r\n    `;\r\n  }\r\n\r\n  curlSyntaxTemplate(display = 'flex') {\r\n    return html`\r\n      <div class=\"col m-markdown\" style=\"flex:1; display:${display}; position:relative; max-width: 100%;\">\r\n        <button  class=\"toolbar-btn\" style = \"position:absolute; top:12px; right:8px\" @click='${(e) => { copyToClipboard(this.curlSyntax.replace(/\\\\$/, ''), e); }}' part=\"btn btn-fill\"> Copy </button>\r\n        <pre style=\"white-space:pre\"><code>${unsafeHTML(Prism.highlight(this.curlSyntax.trim().replace(/\\\\$/, ''), Prism.languages.shell, 'shell'))}</code></pre>\r\n      </div>\r\n      `;\r\n  }\r\n\r\n  apiResponseTabTemplate() {\r\n    let responseFormat = '';\r\n    let responseContent = '';\r\n    if (!this.responseIsBlob) {\r\n      if (this.responseHeaders.includes('application/x-ndjson')) {\r\n        responseFormat = 'json';\r\n        const prismLines = this.responseText.split('\\n').map((q) => Prism.highlight(q, Prism.languages[responseFormat], responseFormat)).join('\\n');\r\n        responseContent = html`<code>${unsafeHTML(prismLines)}</code>`;\r\n      } else if (this.responseHeaders.includes('json')) {\r\n        responseFormat = 'json';\r\n        responseContent = html`<code>${unsafeHTML(Prism.highlight(this.responseText, Prism.languages[responseFormat], responseFormat))}</code>`;\r\n      } else if (this.responseHeaders.includes('html') || this.responseHeaders.includes('xml')) {\r\n        responseFormat = 'html';\r\n        responseContent = html`<code>${unsafeHTML(Prism.highlight(this.responseText, Prism.languages[responseFormat], responseFormat))}</code>`;\r\n      } else {\r\n        responseFormat = 'text';\r\n        responseContent = html`<code>${this.responseText}</code>`;\r\n      }\r\n    }\r\n    return html`\r\n      <div class=\"row\" style=\"font-size:var(--font-size-small); margin:5px 0\">\r\n        <div class=\"response-message ${this.responseStatus}\">Response Status: ${this.responseMessage}</div>\r\n        <div style=\"flex:1\"></div>\r\n        <button class=\"m-btn\" part=\"btn btn-outline btn-clear-response\" @click=\"${this.clearResponseData}\">CLEAR RESPONSE</button>\r\n      </div>\r\n      <div class=\"tab-panel col\" style=\"border-width:0 0 1px 0;\">\r\n        <div id=\"tab_buttons\" class=\"tab-buttons row\" @click=\"${(e) => {\r\n            if (e.target.classList.contains('tab-btn') === false) { return; }\r\n            this.activeResponseTab = e.target.dataset.tab;\r\n        }}\">\r\n          <button class=\"tab-btn ${this.activeResponseTab === 'response' ? 'active' : ''}\" data-tab = 'response' > RESPONSE</button>\r\n          <button class=\"tab-btn ${this.activeResponseTab === 'headers' ? 'active' : ''}\"  data-tab = 'headers' > RESPONSE HEADERS</button>\r\n          ${this.showCurlBeforeTry === 'true'\r\n            ? ''\r\n            : html`<button class=\"tab-btn ${this.activeResponseTab === 'curl' ? 'active' : ''}\" data-tab = 'curl'>CURL</button>`}\r\n        </div>\r\n        ${this.responseIsBlob\r\n          ? html`\r\n            <div class=\"tab-content col\" style=\"flex:1; display:${this.activeResponseTab === 'response' ? 'flex' : 'none'};\">\r\n              <button class=\"m-btn thin-border mar-top-8\" style=\"width:135px\" @click='${(e) => { downloadResource(this.responseBlobUrl, this.respContentDisposition, e); }}' part=\"btn btn-outline\">\r\n                DOWNLOAD\r\n              </button>\r\n              ${this.responseBlobType === 'view'\r\n                ? html`<button class=\"m-btn thin-border mar-top-8\" style=\"width:135px\"  @click='${(e) => { viewResource(this.responseBlobUrl, e); }}' part=\"btn btn-outline\">VIEW (NEW TAB)</button>`\r\n                : ''\r\n              }\r\n            </div>`\r\n          : html`\r\n            <div class=\"tab-content col m-markdown\" style=\"flex:1; display:${this.activeResponseTab === 'response' ? 'flex' : 'none'};\" >\r\n              <button class=\"toolbar-btn\" style=\"position:absolute; top:12px; right:8px\" @click='${(e) => { copyToClipboard(this.responseText, e); }}' part=\"btn btn-fill\"> Copy </button>\r\n              <pre style=\"white-space:pre; min-height:50px; height:var(--resp-area-height, 400px); resize:vertical; overflow:auto\">${responseContent}</pre>\r\n            </div>`\r\n        }\r\n        <div class=\"tab-content col m-markdown\" style=\"flex:1; display:${this.activeResponseTab === 'headers' ? 'flex' : 'none'};\" >\r\n          <button  class=\"toolbar-btn\" style = \"position:absolute; top:12px; right:8px\" @click='${(e) => { copyToClipboard(this.responseHeaders, e); }}' part=\"btn btn-fill\"> Copy </button>\r\n          <pre style=\"white-space:pre\"><code>${unsafeHTML(Prism.highlight(this.responseHeaders, Prism.languages.css, 'css'))}</code></pre>\r\n        </div>\r\n        ${this.showCurlBeforeTry === 'true' ? '' : this.curlSyntaxTemplate(this.activeResponseTab === 'curl' ? 'flex' : 'none')}\r\n      </div>`;\r\n  }\r\n\r\n  apiCallTemplate() {\r\n    let selectServerDropdownHtml = '';\r\n\r\n    if (this.servers && this.servers.length > 0) {\r\n      selectServerDropdownHtml = html`\r\n        <select style=\"min-width:100px;\" @change='${(e) => { this.serverUrl = e.target.value; }}'>\r\n          ${this.servers.map((v) => html`<option value = \"${v.url}\"> ${v.url} - ${v.description} </option>`)}\r\n        </select>\r\n      `;\r\n    }\r\n    const selectedServerHtml = html`\r\n      <div style=\"display:flex; flex-direction:column;\">\r\n        ${selectServerDropdownHtml}\r\n        ${this.serverUrl\r\n          ? html`\r\n            <div style=\"display:flex; align-items:baseline;\">\r\n              <div style=\"font-weight:bold; padding-right:5px;\">API Server</div> \r\n              <span class = \"gray-text\"> ${this.serverUrl} </span>\r\n            </div>\r\n          `\r\n          : ''\r\n        }\r\n      </div>  \r\n    `;\r\n\r\n    return html`\r\n    <div style=\"display:flex; align-items:flex-end; margin:16px 0; font-size:var(--font-size-small);\" part=\"wrap-request-btn\">\r\n      <div class=\"hide-in-small-screen\" style=\"flex-direction:column; margin:0; width:calc(100% - 60px);\">\r\n        <div style=\"display:flex; flex-direction:row; align-items:center; overflow:hidden;\"> \r\n          ${selectedServerHtml}\r\n        </div>\r\n        <div style=\"display:flex;\">\r\n          <div style=\"font-weight:bold; padding-right:5px;\">Authentication</div>\r\n          ${this.security?.length > 0\r\n            ? html`\r\n              ${this.api_keys.length > 0\r\n                ? html`<div style=\"color:var(--blue); overflow:hidden;\"> \r\n                    ${this.api_keys.length === 1\r\n                      ? `${this.api_keys[0]?.typeDisplay} in ${this.api_keys[0].in}`\r\n                      : `${this.api_keys.length} API keys applied`\r\n                    } \r\n                  </div>`\r\n                : html`<div class=\"gray-text\">Required  <span style=\"color:var(--red)\">(None Applied)</span>`\r\n              }`\r\n            : html`<span class=\"gray-text\"> Not Required </span>`\r\n          }\r\n        </div>\r\n      </div>\r\n      ${\r\n        this.parameters.length > 0 || this.request_body\r\n          ? html`\r\n            <button class=\"m-btn thin-border\" part=\"btn btn-outline btn-fill\" style=\"margin-right:5px;\" @click=\"${this.onFillRequestData}\" title=\"Fills with example data (if provided)\">\r\n              FILL EXAMPLE\r\n            </button>\r\n            <button class=\"m-btn thin-border\" part=\"btn btn-outline btn-clear\" style=\"margin-right:5px;\" @click=\"${this.onClearRequestData}\">\r\n              CLEAR\r\n            </button>`\r\n          : ''\r\n      }\r\n      <button class=\"m-btn primary thin-border\" part=\"btn btn-try\" @click=\"${this.onTryClick}\">TRY</button>\r\n    </div>\r\n    <div class=\"row\" style=\"font-size:var(--font-size-small); margin:5px 0\">\r\n      ${this.showCurlBeforeTry === 'true' ? this.curlSyntaxTemplate() : ''}\r\n    </div>\r\n    ${this.responseMessage === '' ? '' : this.apiResponseTabTemplate()}\r\n    `;\r\n  }\r\n  /* eslint-enable indent */\r\n\r\n  async onFillRequestData(e) {\r\n    const requestPanelEl = e.target.closest('.request-panel');\r\n    const requestPanelInputEls = [...requestPanelEl.querySelectorAll('input, tag-input, textarea:not(.is-hidden)')];\r\n    requestPanelInputEls.forEach((el) => {\r\n      if (el.dataset.example) {\r\n        if (el.tagName.toUpperCase() === 'TAG-INPUT') {\r\n          el.value = el.dataset.example.split('~|~');\r\n        } else {\r\n          el.value = el.dataset.example;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async onClearRequestData(e) {\r\n    const requestPanelEl = e.target.closest('.request-panel');\r\n    const requestPanelInputEls = [...requestPanelEl.querySelectorAll('input, tag-input, textarea:not(.is-hidden)')];\r\n    requestPanelInputEls.forEach((el) => { el.value = ''; });\r\n  }\r\n\r\n  buildFetchURL(requestPanelEl) {\r\n    let fetchUrl;\r\n    const pathParamEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='path']\")];\r\n    const queryParamEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='query']\")];\r\n    const queryParamObjTypeEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='query-object']\")];\r\n    fetchUrl = this.path;\r\n    // Generate URL using Path Params\r\n    pathParamEls.map((el) => {\r\n      fetchUrl = fetchUrl.replace(`{${el.dataset.pname}}`, encodeURIComponent(el.value));\r\n    });\r\n\r\n    // Query Params\r\n    const urlQueryParamsMap = new Map();\r\n    const queryParamsWithReservedCharsAllowed = [];\r\n    if (queryParamEls.length > 0) {\r\n      queryParamEls.forEach((el) => {\r\n        const queryParam = new URLSearchParams();\r\n        if (el.dataset.paramAllowReserved === 'true') {\r\n          queryParamsWithReservedCharsAllowed.push(el.dataset.pname);\r\n        }\r\n        if (el.dataset.array === 'false') {\r\n          if (el.value !== '') {\r\n            queryParam.append(el.dataset.pname, el.value);\r\n          }\r\n        } else {\r\n          const { paramSerializeStyle, paramSerializeExplode } = el.dataset;\r\n          let vals = ((el.value && Array.isArray(el.value)) ? el.value : []);\r\n          vals = Array.isArray(vals) ? vals.filter((v) => v !== '') : [];\r\n          if (vals.length > 0) {\r\n            if (paramSerializeStyle === 'spaceDelimited') {\r\n              queryParam.append(el.dataset.pname, vals.join(' ').replace(/^\\s|\\s$/g, ''));\r\n            } else if (paramSerializeStyle === 'pipeDelimited') {\r\n              queryParam.append(el.dataset.pname, vals.join('|').replace(/^\\||\\|$/g, ''));\r\n            } else {\r\n              if (paramSerializeExplode === 'true') { // eslint-disable-line no-lonely-if\r\n                vals.forEach((v) => { queryParam.append(el.dataset.pname, v); });\r\n              } else {\r\n                queryParam.append(el.dataset.pname, vals.join(',').replace(/^,|,$/g, ''));\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (queryParam.toString()) {\r\n          urlQueryParamsMap.set(el.dataset.pname, queryParam);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Query Params (Dynamic - create from JSON)\r\n    if (queryParamObjTypeEls.length > 0) {\r\n      queryParamObjTypeEls.map((el) => {\r\n        const queryParam = new URLSearchParams();\r\n        try {\r\n          let queryParamObj = {};\r\n          const { paramSerializeStyle, paramSerializeExplode, pname } = el.dataset;\r\n          queryParamObj = Object.assign(queryParamObj, JSON.parse(el.value.replace(/\\s+/g, ' ')));\r\n          if (el.dataset.paramAllowReserved === 'true') {\r\n            queryParamsWithReservedCharsAllowed.push(el.dataset.pname);\r\n          }\r\n          if ('json xml'.includes(paramSerializeStyle)) {\r\n            if (paramSerializeStyle === 'json') {\r\n              queryParam.append(el.dataset.pname, JSON.stringify(queryParamObj));\r\n            } else if (paramSerializeStyle === 'xml') {\r\n              queryParam.append(el.dataset.pname, json2xml(queryParamObj));\r\n            }\r\n          } else {\r\n            for (const key in queryParamObj) {\r\n              const pKey = `${pname}[${key}]`;\r\n              if (typeof queryParamObj[key] === 'object') {\r\n                if (Array.isArray(queryParamObj[key])) {\r\n                  if (paramSerializeStyle === 'spaceDelimited') {\r\n                    queryParam.append(pKey, queryParamObj[key].join(' '));\r\n                  } else if (paramSerializeStyle === 'pipeDelimited') {\r\n                    queryParam.append(pKey, queryParamObj[key].join('|'));\r\n                  } else {\r\n                    if (paramSerializeExplode === 'true') { // eslint-disable-line no-lonely-if\r\n                      queryParamObj[key].forEach((v) => {\r\n                        queryParam.append(pKey, v);\r\n                      });\r\n                    } else {\r\n                      queryParam.append(pKey, queryParamObj[key]);\r\n                    }\r\n                  }\r\n                }\r\n              } else {\r\n                queryParam.append(pKey, queryParamObj[key]);\r\n              }\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.error('RapiDoc: unable to parse %s into object', el.value); // eslint-disable-line no-console\r\n        }\r\n        if (queryParam.toString()) {\r\n          urlQueryParamsMap.set(el.dataset.pname, queryParam);\r\n        }\r\n      });\r\n    }\r\n    let urlQueryParamString = '';\r\n    if (urlQueryParamsMap.size) {\r\n      urlQueryParamsMap.forEach((val, pname) => {\r\n        if (queryParamsWithReservedCharsAllowed.includes(pname)) {\r\n          urlQueryParamString += `${pname}=`;\r\n          urlQueryParamString += val.getAll(pname).join(`&${pname}=`);\r\n          urlQueryParamString += '&';\r\n        } else {\r\n          urlQueryParamString += `${val.toString()}&`;\r\n        }\r\n      });\r\n      urlQueryParamString = urlQueryParamString.slice(0, -1);\r\n    }\r\n    if (urlQueryParamString.length !== 0) {\r\n      fetchUrl = `${fetchUrl}${fetchUrl.includes('?') ? '&' : '?'}${urlQueryParamString}`;\r\n    }\r\n\r\n    // Add authentication Query-Param if provided\r\n    this.api_keys\r\n      .filter((v) => (v.in === 'query'))\r\n      .forEach((v) => {\r\n        fetchUrl = `${fetchUrl}${fetchUrl.includes('?') ? '&' : '?'}${v.name}=${encodeURIComponent(v.finalKeyValue)}`;\r\n      });\r\n\r\n    fetchUrl = `${this.serverUrl.replace(/\\/$/, '')}${fetchUrl}`;\r\n    return fetchUrl;\r\n  }\r\n\r\n  buildFetchHeaders(requestPanelEl) {\r\n    const respEl = this.closest('.expanded-req-resp-container, .req-resp-container')?.getElementsByTagName('api-response')[0];\r\n    const headerParamEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='header']\")];\r\n    const requestBodyContainerEl = requestPanelEl.querySelector('.request-body-container');\r\n    const acceptHeader = respEl?.selectedMimeType;\r\n    const reqHeaders = new Headers();\r\n    if (acceptHeader) {\r\n      // Uses the acceptHeader from Response panel\r\n      reqHeaders.append('Accept', acceptHeader);\r\n    } else if (this.accept) {\r\n      reqHeaders.append('Accept', this.accept);\r\n    }\r\n\r\n    // Add Authentication Header if provided\r\n    this.api_keys\r\n      .filter((v) => (v.in === 'header'))\r\n      .forEach((v) => {\r\n        reqHeaders.append(v.name, v.finalKeyValue);\r\n      });\r\n\r\n    // Add Header Params\r\n    headerParamEls.map((el) => {\r\n      if (el.value) {\r\n        reqHeaders.append(el.dataset.pname, el.value);\r\n      }\r\n    });\r\n\r\n    if (requestBodyContainerEl) {\r\n      const requestBodyType = requestBodyContainerEl.dataset.selectedRequestBodyType;\r\n      // Common for all request-body\r\n      if (!requestBodyType.includes('form-data')) {\r\n        // For multipart/form-data dont set the content-type to allow creation of browser generated part boundaries\r\n        reqHeaders.append('Content-Type', requestBodyType);\r\n      }\r\n    }\r\n\r\n    return reqHeaders;\r\n  }\r\n\r\n  buildFetchBodyOptions(requestPanelEl) {\r\n    const requestBodyContainerEl = requestPanelEl.querySelector('.request-body-container');\r\n    const fetchOptions = {\r\n      method: this.method.toUpperCase(),\r\n    };\r\n    if (requestBodyContainerEl) {\r\n      const requestBodyType = requestBodyContainerEl.dataset.selectedRequestBodyType;\r\n      if (requestBodyType.includes('form-urlencoded')) {\r\n        // url-encoded Form Params (dynamic) - Parse JSON and generate Params\r\n        const formUrlDynamicTextAreaEl = requestPanelEl.querySelector(\"[data-ptype='dynamic-form']\");\r\n        if (formUrlDynamicTextAreaEl) {\r\n          const val = formUrlDynamicTextAreaEl.value;\r\n          const formUrlDynParams = new URLSearchParams();\r\n          let proceed = true;\r\n          let tmpObj;\r\n          if (val) {\r\n            try {\r\n              tmpObj = JSON.parse(val);\r\n            } catch (err) {\r\n              proceed = false;\r\n              console.warn('RapiDoc: Invalid JSON provided', err); // eslint-disable-line no-console\r\n            }\r\n          } else {\r\n            proceed = false;\r\n          }\r\n          if (proceed) {\r\n            for (const prop in tmpObj) {\r\n              formUrlDynParams.append(prop, JSON.stringify(tmpObj[prop]));\r\n            }\r\n            fetchOptions.body = formUrlDynParams;\r\n          }\r\n        } else {\r\n          // url-encoded Form Params (regular)\r\n          const formUrlEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='form-urlencode']\")];\r\n          const formUrlParams = new URLSearchParams();\r\n          formUrlEls\r\n            .filter((v) => (v.type !== 'file'))\r\n            .forEach((el) => {\r\n              if (el.dataset.array === 'false') {\r\n                if (el.value) {\r\n                  formUrlParams.append(el.dataset.pname, el.value);\r\n                }\r\n              } else {\r\n                const vals = (el.value && Array.isArray(el.value)) ? el.value.join(',') : '';\r\n                formUrlParams.append(el.dataset.pname, vals);\r\n              }\r\n            });\r\n          fetchOptions.body = formUrlParams;\r\n        }\r\n      } else if (requestBodyType.includes('form-data')) {\r\n        const formDataParams = new FormData();\r\n        const formDataEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='form-data']\")];\r\n        formDataEls.forEach((el) => {\r\n          if (el.dataset.array === 'false') {\r\n            if (el.type === 'file' && el.files[0]) {\r\n              formDataParams.append(el.dataset.pname, el.files[0], el.files[0].name);\r\n            } else if (el.value) {\r\n              formDataParams.append(el.dataset.pname, el.value);\r\n            }\r\n          } else if (el.value && Array.isArray(el.value)) {\r\n            formDataParams.append(el.dataset.pname, el.value.join(','));\r\n          }\r\n        });\r\n        fetchOptions.body = formDataParams;\r\n      } else if (/^audio\\/|^image\\/|^video\\/|^font\\/|tar$|zip$|7z$|rtf$|msword$|excel$|\\/pdf$|\\/octet-stream$/.test(requestBodyType)) {\r\n        const bodyParamFileEl = requestPanelEl.querySelector('.request-body-param-file');\r\n        if (bodyParamFileEl?.files[0]) {\r\n          fetchOptions.body = bodyParamFileEl.files[0]; // eslint-disable-line prefer-destructuring\r\n        }\r\n      } else if (requestBodyType.includes('json') || requestBodyType.includes('xml') || requestBodyType.includes('text')) {\r\n        const exampleTextAreaEl = requestPanelEl.querySelector('.request-body-param-user-input');\r\n        if (exampleTextAreaEl?.value) {\r\n          fetchOptions.body = exampleTextAreaEl.value;\r\n        }\r\n      }\r\n    }\r\n\r\n    return fetchOptions;\r\n  }\r\n\r\n  async onTryClick(e) {\r\n    const tryBtnEl = e.target;\r\n    const requestPanelEl = tryBtnEl.closest('.request-panel');\r\n    const fetchUrl = this.buildFetchURL(requestPanelEl);\r\n    const fetchOptions = this.buildFetchBodyOptions(requestPanelEl);\r\n    const reqHeaders = this.buildFetchHeaders(requestPanelEl);\r\n    this.responseUrl = '';\r\n    this.responseHeaders = [];\r\n    this.curlSyntax = this.generateCURLSyntax(fetchUrl, reqHeaders, fetchOptions, requestPanelEl);\r\n    this.responseStatus = 'success';\r\n    this.responseIsBlob = false;\r\n\r\n    this.respContentDisposition = '';\r\n    if (this.responseBlobUrl) {\r\n      URL.revokeObjectURL(this.responseBlobUrl);\r\n      this.responseBlobUrl = '';\r\n    }\r\n    if (this.fetchCredentials) {\r\n      fetchOptions.credentials = this.fetchCredentials;\r\n    }\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    fetchOptions.headers = reqHeaders;\r\n    const tempRequest = { url: fetchUrl, ...fetchOptions };\r\n    this.dispatchEvent(new CustomEvent('before-try', {\r\n      bubbles: true,\r\n      composed: true,\r\n      detail: {\r\n        request: tempRequest,\r\n        controller,\r\n      },\r\n    }));\r\n    const updatedFetchOptions = {\r\n      method: tempRequest.method,\r\n      headers: tempRequest.headers,\r\n      credentials: tempRequest.credentials,\r\n      body: tempRequest.body,\r\n    };\r\n    const fetchRequest = new Request(tempRequest.url, updatedFetchOptions);\r\n\r\n    let fetchResponse;\r\n    let responseClone;\r\n    try {\r\n      let respBlob;\r\n      let respJson;\r\n      let respText;\r\n      tryBtnEl.disabled = true;\r\n      this.responseText = '⌛';\r\n      this.responseMessage = '';\r\n      this.requestUpdate();\r\n      const startTime = performance.now();\r\n      fetchResponse = await fetch(fetchRequest, { signal });\r\n      const endTime = performance.now();\r\n      responseClone = fetchResponse.clone(); // create a response clone to allow reading response body again (response.json, response.text etc)\r\n      tryBtnEl.disabled = false;\r\n      this.responseMessage = html`${fetchResponse.statusText ? `${fetchResponse.statusText}:${fetchResponse.status}` : fetchResponse.status} <div style=\"color:var(--light-fg)\"> Took ${Math.round(endTime - startTime)} milliseconds </div>`;\r\n      this.responseUrl = fetchResponse.url;\r\n      const respHeadersObj = {};\r\n      fetchResponse.headers.forEach((hdrVal, hdr) => {\r\n        respHeadersObj[hdr] = hdrVal;\r\n        this.responseHeaders = `${this.responseHeaders}${hdr}: ${hdrVal}\\n`;\r\n      });\r\n      const contentType = fetchResponse.headers.get('content-type');\r\n      const respEmpty = (await fetchResponse.clone().text()).length === 0;\r\n      if (respEmpty) {\r\n        this.responseText = '';\r\n      } else if (contentType) {\r\n        if (contentType === 'application/x-ndjson') {\r\n          this.responseText = await fetchResponse.text();\r\n        } else if (contentType.includes('json')) {\r\n          if ((/charset=[^\"']+/).test(contentType)) {\r\n            const encoding = contentType.split('charset=')[1];\r\n            const buffer = await fetchResponse.arrayBuffer();\r\n            try {\r\n              respText = new TextDecoder(encoding).decode(buffer);\r\n            } catch {\r\n              respText = new TextDecoder('utf-8').decode(buffer);\r\n            }\r\n            try {\r\n              respJson = JSON.parse(respText);\r\n              this.responseText = JSON.stringify(respJson, null, 2);\r\n            } catch {\r\n              this.responseText = respText;\r\n            }\r\n          } else {\r\n            respJson = await fetchResponse.json();\r\n            this.responseText = JSON.stringify(respJson, null, 2);\r\n          }\r\n        // eslint-disable-next-line no-useless-escape\r\n        } else if (/^font\\/|tar$|zip$|7z$|rtf$|msword$|excel$|\\/pdf$|\\/octet-stream$|^application\\/vnd\\./.test(contentType)) {\r\n          this.responseIsBlob = true;\r\n          this.responseBlobType = 'download';\r\n        } else if (/^audio|^image|^video/.test(contentType)) {\r\n          this.responseIsBlob = true;\r\n          this.responseBlobType = 'view';\r\n        } else {\r\n          respText = await fetchResponse.text();\r\n          if (contentType.includes('xml')) {\r\n            this.responseText = formatXml(respText, { textNodesOnSameLine: true, indentor: '  ' });\r\n          } else {\r\n            this.responseText = respText;\r\n          }\r\n        }\r\n        if (this.responseIsBlob) {\r\n          const contentDisposition = fetchResponse.headers.get('content-disposition');\r\n          this.respContentDisposition = contentDisposition ? contentDisposition.split('filename=')[1].replace(/\"|'/g, '') : 'filename';\r\n          respBlob = await fetchResponse.blob();\r\n          this.responseBlobUrl = URL.createObjectURL(respBlob);\r\n        }\r\n      } else {\r\n        respText = await fetchResponse.text();\r\n        this.responseText = respText;\r\n      }\r\n      this.dispatchEvent(new CustomEvent('after-try', {\r\n        bubbles: true,\r\n        composed: true,\r\n        detail: {\r\n          request: fetchRequest,\r\n          response: responseClone,\r\n          responseHeaders: respHeadersObj,\r\n          responseBody: respJson || respText || respBlob,\r\n          responseStatus: responseClone.ok,\r\n        },\r\n      }));\r\n    } catch (err) {\r\n      tryBtnEl.disabled = false;\r\n      if (err.name === 'AbortError') {\r\n        this.dispatchEvent(new CustomEvent('request-aborted', {\r\n          bubbles: true,\r\n          composed: true,\r\n          detail: {\r\n            err,\r\n            request: fetchRequest,\r\n          },\r\n        }));\r\n        this.responseMessage = 'Request Aborted';\r\n        this.responseText = 'Request Aborted';\r\n      } else {\r\n        this.dispatchEvent(new CustomEvent('after-try', {\r\n          bubbles: true,\r\n          composed: true,\r\n          detail: {\r\n            err,\r\n            request: fetchRequest,\r\n          },\r\n        }));\r\n        this.responseMessage = `${err.message} (CORS or Network Issue)`;\r\n      }\r\n    }\r\n    this.requestUpdate();\r\n  }\r\n\r\n  liveCURLSyntaxUpdate(requestPanelEl) {\r\n    this.applyCURLSyntax(requestPanelEl);\r\n    this.requestUpdate();\r\n  }\r\n\r\n  onGenerateCURLClick(e) {\r\n    const requestPanelEl = this.getRequestPanel(e);\r\n    this.applyCURLSyntax(requestPanelEl);\r\n  }\r\n\r\n  getRequestPanel(e) {\r\n    return e.target.closest('.request-panel');\r\n  }\r\n\r\n  applyCURLSyntax(requestPanelEl) {\r\n    const fetchUrl = this.buildFetchURL(requestPanelEl);\r\n    const fetchOptions = this.buildFetchBodyOptions(requestPanelEl);\r\n    const fetchHeaders = this.buildFetchHeaders(requestPanelEl);\r\n\r\n    this.curlSyntax = this.generateCURLSyntax(fetchUrl, fetchHeaders, fetchOptions, requestPanelEl);\r\n  }\r\n\r\n  generateCURLSyntax(fetchUrl, fetchHeaders, fetchOptions, requestPanelEl) {\r\n    let curlUrl;\r\n    let curl = '';\r\n    let curlHeaders = '';\r\n    let curlData = '';\r\n    let curlForm = '';\r\n    const requestBodyContainerEl = requestPanelEl.querySelector('.request-body-container');\r\n\r\n    if (fetchUrl.startsWith('http') === false) {\r\n      const url = new URL(fetchUrl, window.location.href);\r\n      curlUrl = url.href;\r\n    } else {\r\n      curlUrl = fetchUrl;\r\n    }\r\n\r\n    curl = `curl -X ${this.method.toUpperCase()} \"${curlUrl}\" \\\\\\n`;\r\n\r\n    curlHeaders = Array.from(fetchHeaders).map(([key, value]) => ` -H \"${key}: ${value}\"`).join('\\\\\\n');\r\n    if (curlHeaders) {\r\n      curlHeaders = `${curlHeaders} \\\\\\n`;\r\n    }\r\n    if (fetchOptions.body instanceof URLSearchParams) {\r\n      curlData = ` -d ${fetchOptions.body.toString()} \\\\\\n`;\r\n    } else if (fetchOptions.body instanceof File) {\r\n      curlData = ` --data-binary @${fetchOptions.body.name} \\\\\\n`;\r\n    } else if (fetchOptions.body instanceof FormData) {\r\n      curlForm = Array.from(fetchOptions.body).reduce((aggregator, [key, value]) => {\r\n        if (value instanceof File) {\r\n          return [...aggregator, ` -F \"${key}=@${value.name}\"`];\r\n        }\r\n\r\n        const multiple = value.match(/([^,],)/gm);\r\n\r\n        if (multiple) {\r\n          const multipleResults = multiple.map((one) => `-F \"${key}[]=${one}\"`);\r\n\r\n          return [...aggregator, ...multipleResults];\r\n        }\r\n\r\n        return [...aggregator, ` -F \"${key}=${value}\"`];\r\n      }, []).join('\\\\\\n');\r\n    } else if (requestBodyContainerEl && requestBodyContainerEl.dataset.selectedRequestBodyType) {\r\n      const requestBodyType = requestBodyContainerEl.dataset.selectedRequestBodyType;\r\n      const exampleTextAreaEl = requestPanelEl.querySelector('.request-body-param-user-input');\r\n      if (exampleTextAreaEl?.value) {\r\n        fetchOptions.body = exampleTextAreaEl.value;\r\n        if (requestBodyType.includes('json')) {\r\n          try {\r\n            curlData = ` -d '${JSON.stringify(JSON.parse(exampleTextAreaEl.value))}' \\\\\\n`;\r\n          } catch (err) {\r\n            // Ignore.\r\n          }\r\n        }\r\n        if (!curlData) {\r\n          curlData = ` -d '${exampleTextAreaEl.value.replace(/'/g, '\\'\"\\'\"\\'')}' \\\\\\n`;\r\n        }\r\n      }\r\n    }\r\n\r\n    return `${curl}${curlHeaders}${curlData}${curlForm}`;\r\n  }\r\n\r\n  onAddRemoveFileInput(e, pname, ptype) {\r\n    if (e.target.tagName.toLowerCase() !== 'button') {\r\n      return;\r\n    }\r\n\r\n    if (e.target.classList.contains('file-input-remove-btn')) {\r\n      // Remove File Input Set\r\n      const el = e.target.closest('.input-set');\r\n      el.remove();\r\n      return;\r\n    }\r\n    const el = e.target.closest('.file-input-container');\r\n\r\n    // Add File Input Set\r\n\r\n    // Container\r\n    const newInputContainerEl = document.createElement('div');\r\n    newInputContainerEl.setAttribute('class', 'input-set row');\r\n\r\n    // File Input\r\n    const newInputEl = document.createElement('input');\r\n    newInputEl.type = 'file';\r\n    newInputEl.style = 'width:200px; margin-top:2px;';\r\n    newInputEl.setAttribute('data-pname', pname);\r\n    newInputEl.setAttribute('data-ptype', ptype.includes('form-urlencode') ? 'form-urlencode' : 'form-data');\r\n    newInputEl.setAttribute('data-array', 'false');\r\n    newInputEl.setAttribute('data-file-array', 'true');\r\n\r\n    // Remover Button\r\n    const newRemoveBtnEl = document.createElement('button');\r\n    newRemoveBtnEl.setAttribute('class', 'file-input-remove-btn');\r\n    newRemoveBtnEl.innerHTML = '&#x2715;';\r\n\r\n    newInputContainerEl.appendChild(newInputEl);\r\n    newInputContainerEl.appendChild(newRemoveBtnEl);\r\n    el.insertBefore(newInputContainerEl, e.target);\r\n    // el.appendChild(newInputContainerEl);\r\n  }\r\n\r\n  clearResponseData() {\r\n    this.responseUrl = '';\r\n    this.responseHeaders = '';\r\n    this.responseText = '';\r\n    this.responseStatus = 'success';\r\n    this.responseMessage = '';\r\n    this.responseIsBlob = false;\r\n    this.responseBlobType = '';\r\n    this.respContentDisposition = '';\r\n    if (this.responseBlobUrl) {\r\n      URL.revokeObjectURL(this.responseBlobUrl);\r\n      this.responseBlobUrl = '';\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.curlSyntax = '';\r\n    // Cleanup ObjectURL for the blob data if this component created one\r\n    if (this.responseBlobUrl) {\r\n      URL.revokeObjectURL(this.responseBlobUrl);\r\n      this.responseBlobUrl = '';\r\n    }\r\n    super.disconnectedCallback();\r\n  }\r\n}\r\n\r\n// Register the element with the browser\r\ncustomElements.define('api-request', ApiRequest);\r\n","import { LitElement, html, css } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\nimport FontStyles from '~/styles/font-styles';\r\nimport SchemaStyles from '~/styles/schema-styles';\r\nimport CustomStyles from '~/styles/custom-styles';\r\n\r\nexport default class SchemaTable extends LitElement {\r\n  static get properties() {\r\n    return {\r\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\r\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\r\n      allowSchemaDescriptionExpandToggle: { type: String, attribute: 'allow-schema-description-expand-toggle' },\r\n      schemaHideReadOnly: { type: String, attribute: 'schema-hide-read-only' },\r\n      schemaHideWriteOnly: { type: String, attribute: 'schema-hide-write-only' },\r\n      data: { type: Object },\r\n    };\r\n  }\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    if (!this.schemaExpandLevel || this.schemaExpandLevel < 1) { this.schemaExpandLevel = 99999; }\r\n    if (!this.schemaDescriptionExpanded || !'true false'.includes(this.schemaDescriptionExpanded)) { this.schemaDescriptionExpanded = 'false'; }\r\n    if (!this.schemaHideReadOnly || !'true false'.includes(this.schemaHideReadOnly)) { this.schemaHideReadOnly = 'true'; }\r\n    if (!this.schemaHideWriteOnly || !'true false'.includes(this.schemaHideWriteOnly)) { this.schemaHideWriteOnly = 'true'; }\r\n  }\r\n\r\n  static get styles() {\r\n    return [\r\n      FontStyles,\r\n      SchemaStyles,\r\n      css`\r\n      .table {\r\n        font-size: var(--font-size-small);\r\n        text-align: left;\r\n        line-height: calc(var(--font-size-small) + 6px);\r\n      }\r\n      .table .tr {\r\n        width: calc(100% - 5px);\r\n        padding: 0 0 0 5px;\r\n        border-bottom: 1px dotted var(--light-border-color);\r\n      }\r\n      .table .td {\r\n        padding: 4px 0;\r\n      }\r\n      .table .key {\r\n        width: 240px;\r\n      }\r\n      .key .key-label {\r\n        font-size: var(--font-size-mono);\r\n      }\r\n      .key.deprecated .key-label {\r\n        color: var(--red);\r\n      }\r\n\r\n      .table .key-type {\r\n        white-space: normal;\r\n        width: 150px;\r\n      }\r\n      .collapsed-all-descr .tr:not(.expanded-descr) {\r\n        max-height: calc(var(--font-size-small) + var(--font-size-small));\r\n      }\r\n\r\n      .obj-toggle {\r\n        padding: 0 2px;\r\n        border-radius:2px;\r\n        border: 1px solid transparent;\r\n        display: inline-block;\r\n        margin-left: -16px;\r\n        color:var(--primary-color);\r\n        cursor:pointer;\r\n        font-size: calc(var(--font-size-small) + 4px);\r\n        font-family: var(--font-mono);\r\n        background-clip: border-box;\r\n      }\r\n      .obj-toggle:hover {\r\n        border-color: var(--primary-color);\r\n      }\r\n      .tr.expanded + .object-body {\r\n        display:block;\r\n      }\r\n      .tr.collapsed + .object-body {\r\n        display:none;\r\n      }`,\r\n      CustomStyles,\r\n    ];\r\n  }\r\n\r\n  /* eslint-disable indent */\r\n  render() {\r\n    return html`\r\n      <div class=\"table ${this.schemaDescriptionExpanded === 'true' ? 'expanded-all-descr' : 'collapsed-all-descr'}\" @click=\"${(e) => this.handleAllEvents(e)}\">\r\n        <div class='toolbar'>\r\n          <div class=\"toolbar-item schema-root-type ${this.data?.['::type'] || ''} \"> ${this.data?.['::type'] || ''} </div>\r\n          ${this.allowSchemaDescriptionExpandToggle === 'true'\r\n            ? html`\r\n              <div style=\"flex:1\"></div>\r\n              <div part=\"schema-multiline-toggle\" class='toolbar-item schema-multiline-toggle' > \r\n                ${this.schemaDescriptionExpanded === 'true' ? 'Single line description' : 'Multiline description'}\r\n              </div>\r\n            `\r\n            : ''\r\n          }\r\n        </div>\r\n        <span part=\"schema-description\" class='m-markdown'> ${unsafeHTML(marked(this.data?.['::description'] || ''))} </span>\r\n        <div style = 'border:1px solid var(--light-border-color)'>\r\n          <div style='display:flex; background-color: var(--bg2); padding:8px 4px; border-bottom:1px solid var(--light-border-color);'>\r\n            <div class='key' style='font-family:var(--font-regular); font-weight:bold; color:var(--fg);'> Field </div>\r\n            <div class='key-type' style='font-family:var(--font-regular); font-weight:bold; color:var(--fg);'> Type </div>\r\n            <div class='key-descr' style='font-family:var(--font-regular); font-weight:bold; color:var(--fg);'> Description </div>\r\n          </div>\r\n          ${this.data\r\n            ? html`\r\n              ${this.generateTree(\r\n                this.data['::type'] === 'array' ? this.data['::props'] : this.data,\r\n                this.data['::type'],\r\n                this.data['::array-type'],\r\n              )}`\r\n            : ''\r\n          }  \r\n        </div>\r\n      </div>  \r\n    `;\r\n  }\r\n\r\n  generateTree(data, dataType = 'object', arrayType = '', key = '', description = '', schemaLevel = 0, indentLevel = 0, readOrWrite = '') {\r\n    if (this.schemaHideReadOnly === 'true') {\r\n      if (dataType === 'array') {\r\n        if (readOrWrite === 'readonly') {\r\n          return;\r\n        }\r\n      }\r\n      if (data && data['::readwrite'] === 'readonly') {\r\n        return;\r\n      }\r\n    }\r\n    if (this.schemaHideWriteOnly === 'true') {\r\n      if (dataType === 'array') {\r\n        if (readOrWrite === 'writeonly') {\r\n          return;\r\n        }\r\n      }\r\n      if (data && data['::readwrite'] === 'writeonly') {\r\n        return;\r\n      }\r\n    }\r\n    if (!data) {\r\n      return html`<div class=\"null\" style=\"display:inline;\">\r\n        <span style='margin-left:${(schemaLevel + 1) * 16}px'> &nbsp; </span>\r\n        <span class=\"key-label xxx-of-key\"> ${key.replace('::OPTION~', '')}</span>\r\n        ${\r\n          dataType === 'array'\r\n            ? html`<span class='mono-font'> [ ] </span>`\r\n            : dataType === 'object'\r\n              ? html`<span class='mono-font'> { } </span>`\r\n              : html`<span class='mono-font'> schema undefined </span>`\r\n        }\r\n      </div>`;\r\n    }\r\n\r\n    const newSchemaLevel = data['::type']?.startsWith('xxx-of') ? schemaLevel : (schemaLevel + 1);\r\n    const newIndentLevel = dataType === 'xxx-of-option' || data['::type'] === 'xxx-of-option' || key.startsWith('::OPTION') ? indentLevel : (indentLevel + 1);\r\n    const leftPadding = 16 * newIndentLevel; // 2 space indentation at each level\r\n    if (Object.keys(data).length === 0) {\r\n      return html`<span class=\"td key object\" style='padding-left:${leftPadding}px'>${key}</span>`;\r\n    }\r\n    let keyLabel = '';\r\n    let keyDescr = '';\r\n    let isOneOfLabel = false;\r\n    if (key.startsWith('::ONE~OF') || key.startsWith('::ANY~OF')) {\r\n      keyLabel = key.replace('::', '').replace('~', ' ');\r\n      isOneOfLabel = true;\r\n    } else if (key.startsWith('::OPTION')) {\r\n      const parts = key.split('~');\r\n      keyLabel = parts[1]; // eslint-disable-line prefer-destructuring\r\n      keyDescr = parts[2]; // eslint-disable-line prefer-destructuring\r\n    } else {\r\n      keyLabel = key;\r\n    }\r\n\r\n    let detailObjType = '';\r\n    if (data['::type'] === 'object') {\r\n      if (dataType === 'array') {\r\n        detailObjType = 'array of object'; // Array of Object\r\n      } else {\r\n        detailObjType = data['::dataTypeLabel'] || data['::type'];\r\n      }\r\n    } else if (data['::type'] === 'array') {\r\n      if (dataType === 'array') {\r\n        // detailObjType = 'array of array'; // Array of array\r\n        detailObjType = `array of array ${arrayType !== 'object' ? `of ${arrayType}` : ''}`; // Array of array\r\n      } else {\r\n        detailObjType = data['::dataTypeLabel'] || data['::type'];\r\n      }\r\n    }\r\n\r\n    if (typeof data === 'object') {\r\n      return html`\r\n        ${newSchemaLevel >= 0 && key\r\n          ? html`\r\n            <div class='tr ${newSchemaLevel <= this.schemaExpandLevel ? 'expanded' : 'collapsed'} ${data['::type']}' data-obj='${keyLabel}' title=\"${data['::deprecated'] ? 'Deprecated' : ''}\">\r\n              <div class=\"td key ${data['::deprecated'] ? 'deprecated' : ''}\" style='padding-left:${leftPadding}px'>\r\n                ${(keyLabel || keyDescr)\r\n                  ? html`\r\n                    <span class='obj-toggle ${newSchemaLevel < this.schemaExpandLevel ? 'expanded' : 'collapsed'}' data-obj='${keyLabel}'>\r\n                      ${schemaLevel < this.schemaExpandLevel ? '-' : '+'}\r\n                    </span>`\r\n                  : ''\r\n                }\r\n                ${data['::type'] === 'xxx-of-option' || data['::type'] === 'xxx-of-array' || key.startsWith('::OPTION')\r\n                  ? html`<span class=\"xxx-of-key\" style=\"margin-left:-6px\">${keyLabel}</span><span class=\"${isOneOfLabel ? 'xxx-of-key' : 'xxx-of-descr'}\">${keyDescr}</span>`\r\n                  : keyLabel.endsWith('*')\r\n                    ? html`<span class=\"key-label\" style=\"display:inline-block; margin-left:-6px;\">${data['::deprecated'] ? '✗' : ''} ${keyLabel.substring(0, keyLabel.length - 1)}</span><span style='color:var(--red);'>*</span>`\r\n                    : html`<span class=\"key-label\" style=\"display:inline-block; margin-left:-6px;\">${data['::deprecated'] ? '✗' : ''} ${keyLabel === '::props' ? '' : keyLabel}</span>`\r\n                }\r\n                ${data['::type'] === 'xxx-of' && dataType === 'array' ? html`<span style=\"color:var(--primary-color)\">ARRAY</span>` : ''} \r\n              </div>\r\n              <div class='td key-type' title=\"${data['::readwrite'] === 'readonly' ? 'Read-Only' : data['::readwrite'] === 'writeonly' ? 'Write-Only' : ''}\">\r\n                ${(data['::type'] || '').includes('xxx-of') ? '' : detailObjType}\r\n                ${data['::readwrite'] === 'readonly' ? ' 🆁' : data['::readwrite'] === 'writeonly' ? ' 🆆' : ''}\r\n              </div>\r\n              <div class='td key-descr m-markdown-small' style='line-height:1.7'>${unsafeHTML(marked(description || ''))}</div>\r\n            </div>`\r\n          : html`\r\n            ${data['::type'] === 'array' && dataType === 'array'\r\n              ? html`\r\n                <div class='tr'> \r\n                  <div class='td key'></div> \r\n                  <div class='td key-type'>\r\n                    ${arrayType && arrayType !== 'object' ? `${dataType} of ${arrayType}` : dataType}\r\n                  </div> \r\n                  <div class='td key-descr'></div> \r\n                </div>`\r\n              : ''\r\n            }`\r\n        }\r\n        <div class='object-body'>\r\n        ${Array.isArray(data) && data[0]\r\n          ? html`${this.generateTree(data[0], 'xxx-of-option', '', '::ARRAY~OF', '', newSchemaLevel, newIndentLevel, '')}`\r\n          : html`\r\n            ${Object.keys(data).map((dataKey) => html`\r\n              ${['::title', '::description', '::type', '::props', '::deprecated', '::array-type', '::readwrite', '::dataTypeLabel'].includes(dataKey)\r\n                ? data[dataKey]['::type'] === 'array' || data[dataKey]['::type'] === 'object'\r\n                  ? html`${this.generateTree(\r\n                    data[dataKey]['::type'] === 'array' ? data[dataKey]['::props'] : data[dataKey],\r\n                      data[dataKey]['::type'],\r\n                      data[dataKey]['::array-type'] || '',\r\n                      dataKey,\r\n                      data[dataKey]['::description'],\r\n                      newSchemaLevel,\r\n                      newIndentLevel,\r\n                      data[dataKey]['::readwrite'] ? data[dataKey]['::readwrite'] : '',\r\n                    )}`\r\n                  : ''\r\n                : html`${this.generateTree(\r\n                  data[dataKey]['::type'] === 'array' ? data[dataKey]['::props'] : data[dataKey],\r\n                  data[dataKey]['::type'],\r\n                  data[dataKey]['::array-type'] || '',\r\n                  dataKey,\r\n                  data[dataKey]?.['::description'] || '',\r\n                  newSchemaLevel,\r\n                  newIndentLevel,\r\n                  data[dataKey]['::readwrite'] ? data[dataKey]['::readwrite'] : '',\r\n                )}`\r\n              }\r\n            `)}\r\n          `\r\n        }\r\n        <div>\r\n      `;\r\n    }\r\n\r\n    // For Primitive Data types\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [type, readOrWriteOnly, constraint, defaultValue, allowedValues, pattern, schemaDescription, schemaTitle, deprecated] = data.split('~|~');\r\n    if (readOrWriteOnly === '🆁' && this.schemaHideReadOnly === 'true') {\r\n      return;\r\n    }\r\n    if (readOrWriteOnly === '🆆' && this.schemaHideWriteOnly === 'true') {\r\n      return;\r\n    }\r\n    const dataTypeCss = type.replace(/┃.*/g, '').replace(/[^a-zA-Z0-9+]/g, '').substring(0, 4).toLowerCase();\r\n    const descrExpander = `${constraint || defaultValue || allowedValues || pattern ? '<span class=\"descr-expand-toggle\">➔</span>' : ''}`;\r\n    let dataTypeHtml = '';\r\n    if (dataType === 'array') {\r\n      dataTypeHtml = html` \r\n        <div class='td key-type ${dataTypeCss}' title=\"${readOrWrite === 'readonly' ? 'Read-Only' : readOrWriteOnly === 'writeonly' ? 'Write-Only' : ''}\">\r\n          [${type}] ${readOrWrite === 'readonly' ? '🆁' : readOrWrite === 'writeonly' ? '🆆' : ''}\r\n        </div>`;\r\n    } else {\r\n      dataTypeHtml = html` \r\n        <div class='td key-type ${dataTypeCss}' title=\"${readOrWriteOnly === '🆁' ? 'Read-Only' : readOrWriteOnly === '🆆' ? 'Write-Only' : ''}\">\r\n          ${type} ${readOrWriteOnly}\r\n        </div>`;\r\n    }\r\n    return html`\r\n      <div class = \"tr primitive\" title=\"${deprecated ? 'Deprecated' : ''}\">\r\n        <div class=\"td key ${deprecated}\" style='padding-left:${leftPadding}px'>\r\n          ${deprecated ? html`<span style='color:var(--red);'>✗</span>` : ''}\r\n          ${keyLabel?.endsWith('*')\r\n            ? html`\r\n              <span class=\"key-label\">${keyLabel.substring(0, keyLabel.length - 1)}</span>\r\n              <span style='color:var(--red);'>*</span>`\r\n            : key.startsWith('::OPTION')\r\n              ? html`<span class='xxx-of-key'>${keyLabel}</span><span class=\"xxx-of-descr\">${keyDescr}</span>`\r\n              : html`${keyLabel ? html`<span class=\"key-label\"> ${keyLabel}</span>` : html`<span class=\"xxx-of-descr\">${schemaTitle}</span>`}`\r\n          }\r\n        </div>\r\n        ${dataTypeHtml}\r\n        <div class='td key-descr' style='font-size: var(--font-size-small)'>\r\n          ${html`<span class=\"m-markdown-small\">\r\n            ${unsafeHTML(marked(dataType === 'array'\r\n              ? `${descrExpander} ${description}`\r\n              : schemaTitle\r\n                ? `${descrExpander} <b>${schemaTitle}:</b> ${schemaDescription}`\r\n                : `${descrExpander} ${schemaDescription}`))}\r\n          </span>`\r\n          }\r\n          ${constraint ? html`<div class='' style='display:inline-block; line-break:anywhere; margin-right:8px;'> <span class='bold-text'>Constraints: </span> ${constraint}</div>` : ''}\r\n          ${defaultValue ? html`<div style='display:inline-block; line-break:anywhere; margin-right:8px;'> <span class='bold-text'>Default: </span>${defaultValue}</div>` : ''}\r\n          ${allowedValues ? html`<div style='display:inline-block; line-break:anywhere; margin-right:8px;'> <span class='bold-text'>${type === 'const' ? 'Value' : 'Allowed'}: </span>${allowedValues}</div>` : ''}\r\n          ${pattern ? html`<div style='display:inline-block; line-break:anywhere; margin-right:8px;'> <span class='bold-text'>Pattern: </span>${pattern}</div>` : ''}\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n  /* eslint-enable indent */\r\n\r\n  handleAllEvents(e) {\r\n    if (e.target.classList.contains('obj-toggle')) {\r\n      this.toggleObjectExpand(e);\r\n    } else if (e.target.classList.contains('schema-multiline-toggle')) {\r\n      this.schemaDescriptionExpanded = (this.schemaDescriptionExpanded === 'true' ? 'false' : 'true');\r\n    } else if (e.target.classList.contains('descr-expand-toggle')) {\r\n      const trEl = e.target.closest('.tr');\r\n      if (trEl) {\r\n        trEl.classList.toggle('expanded-descr');\r\n        trEl.style.maxHeight = trEl.scrollHeight;\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleObjectExpand(e) {\r\n    const rowEl = e.target.closest('.tr');\r\n    if (rowEl.classList.contains('expanded')) {\r\n      rowEl.classList.add('collapsed');\r\n      rowEl.classList.remove('expanded');\r\n      e.target.innerText = '+';\r\n    } else {\r\n      rowEl.classList.remove('collapsed');\r\n      rowEl.classList.add('expanded');\r\n      e.target.innerText = '-';\r\n    }\r\n  }\r\n}\r\ncustomElements.define('schema-table', SchemaTable);\r\n","import { html } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\nimport { rapidocApiKey } from '~/utils/common-utils';\r\nimport { pathSecurityTemplate } from '~/templates/security-scheme-template';\r\nimport codeSamplesTemplate from '~/templates/code-samples-template';\r\nimport callbackTemplate from '~/templates/callback-template';\r\nimport '~/components/api-request';\r\nimport '~/components/api-response';\r\n\r\n/* eslint-disable indent */\r\nfunction headingRenderer(tagElementId) {\r\n  const renderer = new marked.Renderer();\r\n  renderer.heading = ((text, level, raw, slugger) => `<h${level} class=\"observe-me\" id=\"${tagElementId}--${slugger.slug(raw)}\">${text}</h${level}>`);\r\n  return renderer;\r\n}\r\n\r\nfunction expandCollapseTagDescription(e) {\r\n  const tagDescriptionEl = e.target.closest('.tag-container').querySelector('.tag-description');\r\n  const tagIconEl = e.target.closest('.tag-container').querySelector('.tag-icon');\r\n  if (tagDescriptionEl && tagIconEl) {\r\n    const isExpanded = tagDescriptionEl.classList.contains('expanded');\r\n    if (isExpanded) {\r\n      tagDescriptionEl.style.maxHeight = 0;\r\n      tagDescriptionEl.classList.replace('expanded', 'collapsed');\r\n      tagIconEl.classList.replace('expanded', 'collapsed');\r\n    } else {\r\n      tagDescriptionEl.style.maxHeight = `${tagDescriptionEl.scrollHeight}px`;\r\n      tagDescriptionEl.classList.replace('collapsed', 'expanded');\r\n      tagIconEl.classList.replace('collapsed', 'expanded');\r\n    }\r\n  }\r\n}\r\n\r\nexport function expandedEndpointBodyTemplate(path, tagName = '', tagDescription = '') {\r\n  const acceptContentTypes = new Set();\r\n  for (const respStatus in path.responses) {\r\n    for (const acceptContentType in (path.responses[respStatus]?.content)) {\r\n      acceptContentTypes.add(acceptContentType.trim());\r\n    }\r\n  }\r\n  const accept = [...acceptContentTypes].join(', ');\r\n\r\n  // Filter API Keys that are non-empty and are applicable to the the path\r\n  const nonEmptyApiKeys = this.resolvedSpec.securitySchemes.filter((v) => (v.finalKeyValue && path.security?.some((ps) => (v.securitySchemeId in ps)))) || [];\r\n\r\n  // If a RapiDoc API Key is specified on the element and its value is not hyphen(-) then include it for all paths\r\n  const rapiDocApiKey = this.resolvedSpec.securitySchemes.find((v) => (v.securitySchemeId === rapidocApiKey && v.value !== '-'));\r\n  if (rapiDocApiKey) {\r\n    nonEmptyApiKeys.push(rapiDocApiKey);\r\n  }\r\n\r\n  const codeSampleTabPanel = path.xCodeSamples ? codeSamplesTemplate.call(this, path.xCodeSamples) : '';\r\n  return html`\r\n    ${this.renderStyle === 'read' ? html`<div class='divider' part=\"operation-divider\"></div>` : ''}\r\n    <div class='expanded-endpoint-body observe-me ${path.method} ${path.deprecated ? 'deprecated' : ''} ' part=\"section-operation ${path.elementId}\" id='${path.elementId}'>\r\n      ${(this.renderStyle === 'focused' && tagName !== 'General ⦂')\r\n        ? html`\r\n          <div class=\"tag-container\" part=\"section-operation-tag\"> \r\n            <span class=\"upper\" style=\"font-weight:bold; font-size:18px;\"> ${tagName} </span>\r\n            ${tagDescription\r\n              ? html`\r\n                <svg class=\"tag-icon collapsed\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" fill=\"none\" style=\"stroke:var(--primary-color); vertical-align:top; cursor:pointer\"\r\n                @click=\"${(e) => { expandCollapseTagDescription.call(this, e); }}\"\r\n                >\r\n                  <path d=\"M12 20h-6a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h8\"></path><path d=\"M18 4v17\"></path><path d=\"M15 18l3 3l3 -3\"></path>\r\n                </svg>\r\n                <div class=\"tag-description collapsed\" style=\"max-height:0px; overflow:hidden; margin-top:16px; border:1px solid var(--border-color)\"> \r\n                  <div class=\"m-markdown\" style=\"padding:8px\"> ${unsafeHTML(marked(tagDescription))}</div>  \r\n                </div>`\r\n              : ''\r\n            }  \r\n          </div>\r\n        `\r\n        : ''\r\n      }\r\n      ${path.deprecated ? html`<div class=\"bold-text red-text\"> DEPRECATED </div>` : ''}\r\n      ${html`\r\n        ${path.xBadges && path.xBadges?.length > 0\r\n          ? html`\r\n            <div style=\"display:flex; flex-wrap:wrap; margin-bottom: -24px; font-size: var(--font-size-small);\">\r\n              ${path.xBadges.map((v) => (\r\n                  html`<span style=\"margin:1px; margin-right:5px; padding:1px 8px; font-weight:bold; border-radius:12px;  background-color: var(--light-${v.color}, var(--input-bg)); color:var(--${v.color}); border:1px solid var(--${v.color})\">${v.label}</span>`\r\n                ))\r\n              }\r\n            </div>\r\n            `\r\n          : ''\r\n        }\r\n        <h2 part=\"section-operation-summary\"> ${path.shortSummary || `${path.method.toUpperCase()} ${path.path}`}</h2>\r\n        ${path.isWebhook\r\n          ? html`<span part=\"section-operation-webhook\" style=\"color:var(--primary-color); font-weight:bold; font-size: var(--font-size-regular);\"> WEBHOOK </span>`\r\n          : html`\r\n            <div part=\"section-operation-webhook-method\" class=\"mono-font regular-font-size\" style=\"text-align:left; direction:ltr; padding: 8px 0; color:var(--fg3)\"> \r\n              <span part=\"label-operation-method\" class=\"regular-font upper method-fg bold-text ${path.method}\">${path.method}</span> \r\n              <span part=\"label-operation-path\">${path.path}</span>\r\n            </div>\r\n          `\r\n        }\r\n        <slot name=\"${path.elementId}\"></slot>`\r\n      }\r\n      ${path.description ? html`<div class=\"m-markdown\"> ${unsafeHTML(marked(path.description))}</div>` : ''}\r\n      ${pathSecurityTemplate.call(this, path.security)}\r\n      ${path.externalDocs?.url || path.externalDocs?.description\r\n        ? html`<div style=\"background-color:var(--bg3); padding:2px 8px 8px 8px; margin:8px 0; border-radius:var(--border-radius)\"> \r\n            <div class=\"m-markdown\"> ${unsafeHTML(marked(path.externalDocs?.description || ''))} </div>\r\n            ${path.externalDocs?.url\r\n              ? html`<a style=\"font-family:var(--font-mono); font-size:var(--font-size-small)\" href=\"${path.externalDocs?.url}\" target=\"_blank\">\r\n                  ${path.externalDocs?.url} <div style=\"transform: rotate(270deg) scale(1.5); display: inline-block; margin-left:5px\">⇲</div>\r\n                </a>`\r\n              : ''\r\n            }\r\n          </div>`\r\n        : ''\r\n      }\r\n      ${codeSampleTabPanel}\r\n      <div class='expanded-req-resp-container'>\r\n        <api-request\r\n          class = \"${this.renderStyle}-mode\"\r\n          style = \"width:100%;\"\r\n          webhook = \"${path.isWebhook}\"\r\n          method = \"${path.method}\"\r\n          path = \"${path.path}\"\r\n          .security = \"${path.security}\"\r\n          .parameters = \"${path.parameters}\"\r\n          .request_body = \"${path.requestBody}\"\r\n          .api_keys = \"${nonEmptyApiKeys}\"\r\n          .servers = \"${path.servers}\"\r\n          server-url = \"${path.servers?.[0]?.url || this.selectedServer.computedUrl}\"\r\n          fill-request-fields-with-example = \"${this.fillRequestFieldsWithExample}\"\r\n          allow-try = \"${this.allowTry}\"\r\n          show-curl-before-try = \"${this.showCurlBeforeTry}\"\r\n          accept = \"${accept}\"\r\n          render-style=\"${this.renderStyle}\" \r\n          schema-style = \"${this.schemaStyle}\"\r\n          active-schema-tab = \"${this.defaultSchemaTab}\"\r\n          schema-expand-level = \"${this.schemaExpandLevel}\"\r\n          schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n          allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n          schema-hide-read-only = \"${this.schemaHideReadOnly === 'never' ? 'false' : path.isWebhook ? 'false' : 'true'}\"\r\n          schema-hide-write-only = \"${this.schemaHideWriteOnly === 'never' ? 'false' : path.isWebhook ? 'true' : 'false'}\"\r\n          fetch-credentials = \"${this.fetchCredentials}\"\r\n          exportparts = \"wrap-request-btn:wrap-request-btn, btn:btn, btn-fill:btn-fill, btn-outline:btn-outline, btn-try:btn-try, btn-clear:btn-clear, btn-clear-resp:btn-clear-resp,\r\n            file-input:file-input, textbox:textbox, textbox-param:textbox-param, textarea:textarea, textarea-param:textarea-param, \r\n            anchor:anchor, anchor-param-example:anchor-param-example, schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n        > </api-request>\r\n\r\n        ${path.callbacks ? callbackTemplate.call(this, path.callbacks) : ''}\r\n\r\n        <api-response\r\n          class = \"${this.renderStyle}-mode\"\r\n          style = \"width:100%;\"\r\n          webhook = \"${path.isWebhook}\"\r\n          .responses = \"${path.responses}\"\r\n          render-style = \"${this.renderStyle}\"\r\n          schema-style = \"${this.schemaStyle}\"\r\n          active-schema-tab = \"${this.defaultSchemaTab}\"\r\n          schema-expand-level = \"${this.schemaExpandLevel}\"\r\n          schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n          allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n          schema-hide-read-only = \"${this.schemaHideReadOnly === 'never' ? 'false' : path.isWebhook ? 'true' : 'false'}\"\r\n          schema-hide-write-only = \"${this.schemaHideWriteOnly === 'never' ? 'false' : path.isWebhook ? 'false' : 'true'}\"\r\n          selected-status = \"${Object.keys(path.responses || {})[0] || ''}\"\r\n          exportparts = \"btn:btn, btn-response-status:btn-response-status, btn-selected-response-status:btn-selected-response-status, btn-fill:btn-fill, btn-copy:btn-copy,\r\n          schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n        > </api-response>\r\n      </div>\r\n    </div>\r\n  `;\r\n}\r\n\r\nexport default function expandedEndpointTemplate() {\r\n  if (!this.resolvedSpec) { return ''; }\r\n  return html`\r\n  ${this.resolvedSpec.tags.map((tag) => html`\r\n    <section id=\"${tag.elementId}\" part=\"section-tag\" class=\"regular-font section-gap--read-mode observe-me\" style=\"border-top:1px solid var(--primary-color);\">\r\n      <div class=\"title tag\" part=\"section-tag-title label-tag-title\">${tag.name}</div>\r\n      <slot name=\"${tag.elementId}\"></slot>\r\n      <div class=\"regular-font-size\">\r\n      ${\r\n        unsafeHTML(`\r\n          <div class=\"m-markdown regular-font\">\r\n          ${marked(tag.description || '', this.infoDescriptionHeadingsInNavBar === 'true' ? { renderer: headingRenderer(tag.elementId) } : undefined)}\r\n        </div>`)\r\n      }\r\n      </div>\r\n    </section>\r\n    <section class=\"regular-font section-gap--read-mode\" part=\"section-operations-in-tag\">\r\n      ${tag.paths.map((path) => expandedEndpointBodyTemplate.call(this, path))}\r\n    </section>\r\n    `)\r\n  }\r\n`;\r\n}\r\n/* eslint-enable indent */\r\n","import { html } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\nimport { schemaInObjectNotation } from '~/utils/schema-utils';\r\nimport '~/components/json-tree';\r\nimport '~/components/schema-tree';\r\nimport '~/components/schema-table';\r\n\r\nfunction schemaBodyTemplate(sComponent) {\r\n  return html`\r\n  <div class='divider'></div>\r\n  <div class='expanded-endpoint-body observe-me ${sComponent.name}' id='cmp--${sComponent.id}' >\r\n    <div style=\"font-weight:bold\"> ${sComponent.name} <span style=\"color:var(--light-fg); font-size:var(--font-size-small); font-weight:400;\"> Schema </span></div>\r\n  ${this.schemaStyle === 'table'\r\n    ? html`\r\n      <schema-table\r\n        .data = '${schemaInObjectNotation(sComponent.component, {})}'\r\n        schema-expand-level = \"${this.schemaExpandLevel}\"\r\n        schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n        allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n        schema-hide-read-only = \"false\"\r\n        schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\r\n        exportparts = \"schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n      > </schema-table>`\r\n    : html`\r\n      <schema-tree\r\n        .data = '${schemaInObjectNotation(sComponent.component, {})}'\r\n        schema-expand-level = \"${this.schemaExpandLevel}\"\r\n        schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n        allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n        schema-hide-read-only = \"false\"\r\n        schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\r\n        exportparts = \"schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n      > </schema-tree>`\r\n}\r\n  </div>`;\r\n}\r\n\r\nfunction componentBodyTemplate(sComponent, componentType) {\r\n  if (sComponent.id.indexOf('schemas-') !== -1) {\r\n    return schemaBodyTemplate.call(this, sComponent);\r\n  }\r\n  return html`\r\n  <div class='divider'></div>\r\n  <div class='expanded-endpoint-body observe-me ${sComponent.name}' id='cmp--${sComponent.id}' >\r\n    ${html`\r\n      <div style=\"font-weight:bold\"> ${sComponent.name} <span style=\"color:var(--light-fg); font-size:var(--font-size-small); font-weight:400\"> ${componentType} </span> </div>\r\n      ${sComponent.component\r\n    ? html`\r\n      <div class='mono-font regular-font-size' style='padding: 8px 0; color:var(--fg2)'> \r\n        <json-tree class=\"border tree\" render-style='${this.renderStyle}' .data=\"${sComponent.component}\"> </json-tree>\r\n      </div>`\r\n    : ''}\r\n    `}\r\n  </div>\r\n  `;\r\n}\r\n\r\nexport default function componentsTemplate() {\r\n  if (!this.resolvedSpec) { return ''; }\r\n  return html`\r\n  ${this.resolvedSpec.components.map((component) => html`\r\n    <div id=\"cmp--${component.name.toLowerCase()}\" class='regular-font section-gap--read-mode observe-me' style=\"border-top:1px solid var(--primary-color);\">\r\n      <div class=\"title tag\">${component.name}</div>\r\n      <div class=\"regular-font-size\">\r\n        ${unsafeHTML(`<div class='m-markdown regular-font'>${marked(component.description ? component.description : '')}</div>`)}\r\n      </div>\r\n    </div>\r\n    <div class='regular-font section-gap--read-mode'>\r\n      ${component.subComponents.filter((c) => c.expanded !== false).map((sComponent) => componentBodyTemplate.call(this, sComponent, component.name))}\r\n    </div>\r\n    `)\r\n}\r\n`;\r\n}\r\n/* eslint-enable indent */\r\n","import { html } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\nimport { downloadResource, viewResource } from '~/utils/common-utils';\r\n\r\n/* eslint-disable indent */\r\nfunction headingRenderer() {\r\n  const renderer = new marked.Renderer();\r\n  renderer.heading = ((text, level, raw, slugger) => `<h${level} class=\"observe-me\" id=\"overview--${slugger.slug(raw)}\">${text}</h${level}>`);\r\n  return renderer;\r\n}\r\n\r\nexport default function overviewTemplate() {\r\n  return html`\r\n    <section id=\"overview\" part=\"section-overview\"\r\n      class=\"observe-me ${this.renderStyle === 'view' ? 'section-gap' : 'section-gap--read-mode'}\">\r\n      ${this.resolvedSpec?.info\r\n        ? html`\r\n          <div id=\"api-title\" part=\"section-overview-title\" style=\"font-size:32px\">\r\n            ${this.resolvedSpec.info.title}\r\n            ${!this.resolvedSpec.info.version ? '' : html`\r\n              <span style = 'font-size:var(--font-size-small);font-weight:bold'>\r\n                ${this.resolvedSpec.info.version}\r\n              </span>`\r\n            }\r\n          </div>\r\n          <div id=\"api-info\" style=\"font-size:calc(var(--font-size-regular) - 1px); margin-top:8px;\">\r\n            ${this.resolvedSpec.info.contact?.email\r\n              ? html`<span>${this.resolvedSpec.info.contact.name || 'Email'}: \r\n                <a href=\"mailto:${this.resolvedSpec.info.contact.email}\" part=\"anchor anchor-overview\">${this.resolvedSpec.info.contact.email}</a>\r\n              </span>`\r\n              : ''\r\n            }\r\n            ${this.resolvedSpec.info.contact?.url\r\n              ? html`<span>URL: <a href=\"${this.resolvedSpec.info.contact.url}\" part=\"anchor anchor-overview\">${this.resolvedSpec.info.contact.url}</a></span>`\r\n              : ''\r\n            }\r\n            ${this.resolvedSpec.info.license\r\n              ? html`<span>License: \r\n                ${this.resolvedSpec.info.license.url\r\n                ? html`<a href=\"${this.resolvedSpec.info.license.url}\" part=\"anchor anchor-overview\">${this.resolvedSpec.info.license.name}</a>`\r\n                : this.resolvedSpec.info.license.name\r\n              } </span>`\r\n              : ''\r\n            }\r\n            ${this.resolvedSpec.info.termsOfService\r\n              ? html`<span><a href=\"${this.resolvedSpec.info.termsOfService}\" part=\"anchor anchor-overview\">Terms of Service</a></span>`\r\n              : ''\r\n            }\r\n            ${this.specUrl && this.allowSpecFileDownload === 'true'\r\n              ? html`\r\n                <div style=\"display:flex; margin:12px 0; gap:8px; justify-content: start;\">\r\n                  <button class=\"m-btn thin-border\" style=\"min-width:170px\" part=\"btn btn-outline\" @click='${(e) => { downloadResource(this.specUrl, 'openapi-spec', e); }}'>Download OpenAPI spec</button>\r\n                  ${this.specUrl?.trim().toLowerCase().endsWith('json')\r\n                    ? html`<button class=\"m-btn thin-border\" style=\"width:200px\" part=\"btn btn-outline\" @click='${(e) => { viewResource(this.specUrl, e); }}'>View OpenAPI spec (New Tab)</button>`\r\n                    : ''\r\n                  }\r\n                </div>`\r\n              : ''\r\n            }\r\n          </div>\r\n          <slot name=\"overview\"></slot>\r\n          <div id=\"api-description\">\r\n          ${this.resolvedSpec.info.description\r\n            ? html`${\r\n              unsafeHTML(`\r\n                <div class=\"m-markdown regular-font\">\r\n                ${marked(this.resolvedSpec.info.description, this.infoDescriptionHeadingsInNavBar === 'true' ? { renderer: headingRenderer() } : undefined)}\r\n              </div>`)}`\r\n            : ''\r\n          }\r\n          </div>\r\n        `\r\n        : ''\r\n      }\r\n    </section>\r\n  `;\r\n}\r\n/* eslint-enable indent */\r\n","import { html } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\n\r\nexport function setApiServer(serverUrl) {\r\n  const serverObj = this.resolvedSpec?.servers.find((s) => s.url === serverUrl);\r\n  if (!serverObj) {\r\n    return false;\r\n  }\r\n  this.selectedServer = serverObj;\r\n  this.requestUpdate();\r\n  this.dispatchEvent(new CustomEvent('api-server-change', {\r\n    bubbles: true,\r\n    composed: true,\r\n    detail: {\r\n      selectedServer: serverObj,\r\n    },\r\n  }));\r\n  return true;\r\n}\r\n\r\nfunction onApiServerVarChange(e, serverObj) {\r\n  const inputEls = [...e.currentTarget.closest('table').querySelectorAll('input, select')];\r\n  let tempUrl = serverObj.url;\r\n  inputEls.forEach((v) => {\r\n    const regex = new RegExp(`{${v.dataset.var}}`, 'g');\r\n    tempUrl = tempUrl.replace(regex, v.value);\r\n  });\r\n  serverObj.computedUrl = tempUrl;\r\n  this.requestUpdate();\r\n}\r\n\r\n/* eslint-disable indent */\r\nfunction serverVarsTemplate() {\r\n  // const selectedServerObj = this.resolvedSpec.servers.find((v) => (v.url === this.selectedServer));\r\n  return this.selectedServer && this.selectedServer.variables\r\n    ? html`\r\n    <div class=\"table-title\">SERVER VARIABLES</div>\r\n    <table class='m-table' role='presentation'>\r\n      ${Object.entries(this.selectedServer.variables).map((kv) => html`\r\n        <tr>\r\n          <td style=\"vertical-align: middle;\" >${kv[0]}</td>\r\n          <td>\r\n            ${kv[1].enum\r\n            ? html`\r\n            <select\r\n              data-var = \"${kv[0]}\"\r\n              @input = ${(e) => { onApiServerVarChange.call(this, e, this.selectedServer); }}\r\n            >\r\n            ${Object.entries(kv[1].enum).map((e) => (kv[1].default === e[1]\r\n              ? html`\r\n              <option\r\n                selected\r\n                label = ${e[1]}\r\n                value = ${e[1]}\r\n              />`\r\n              : html`\r\n              <option\r\n                label = ${e[1]}\r\n                value = ${e[1]}\r\n              />`\r\n            ))}\r\n            </select>`\r\n            : html`\r\n            <input\r\n              type = \"text\"\r\n              part=\"textbox textbox-server-var\"\r\n              spellcheck = \"false\"\r\n              data-var = \"${kv[0]}\"\r\n              value = \"${kv[1].default}\"\r\n              @input = ${(e) => { onApiServerVarChange.call(this, e, this.selectedServer); }}\r\n            />`}\r\n          </td>\r\n        </tr>\r\n        ${kv[1].description\r\n          ? html`<tr><td colspan=\"2\" style=\"border:none\"><span class=\"m-markdown-small\"> ${unsafeHTML(marked(kv[1].description))} </span></td></tr>`\r\n          : ''\r\n        }\r\n      `)}\r\n    </table>\r\n    `\r\n    : '';\r\n}\r\n\r\nexport default function serverTemplate() {\r\n  if (!this.resolvedSpec || this.resolvedSpec.specLoadError) { return ''; }\r\n  return html`\r\n  <section id = 'servers' part=\"section-servers\" style=\"text-align:left; direction:ltr; margin-top:24px; margin-bottom:24px;\" class='regular-font observe-me ${'read focused'.includes(this.renderStyle) ? 'section-gap--read-mode' : 'section-gap'}'>\r\n    <div part = \"section-servers-title\" class = \"sub-title\">API SERVER</div>\r\n    <div class = 'mono-font' style='margin: 12px 0; font-size:calc(var(--font-size-small) + 1px);'>\r\n      ${!this.resolvedSpec.servers || this.resolvedSpec.servers?.length === 0\r\n        ? ''\r\n        : html`\r\n          ${this.resolvedSpec?.servers.map((server, i) => html`\r\n            <input type = 'radio'\r\n              name = 'api_server'\r\n              id = 'srvr-opt-${i}'\r\n              value = '${server.url}'\r\n              @change = ${() => { setApiServer.call(this, server.url); }}\r\n              .checked = '${this.selectedServer.url === server.url}'\r\n              style = 'margin:4px 0; cursor:pointer'\r\n            />\r\n              <label style='cursor:pointer' for='srvr-opt-${i}'>\r\n                ${server.url} ${server.description ? html`- <span class='regular-font'>${server.description} </span>` : ''}\r\n              </label>\r\n            <br/>\r\n          `)}\r\n      `}\r\n      <div class=\"table-title primary-text\" part=\"label-selected-server\"> SELECTED: ${this.selectedServer?.computedUrl || 'none'}</div>\r\n    </div>\r\n    <slot name=\"servers\"></slot>\r\n    ${serverVarsTemplate.call(this)}\r\n  </section>`;\r\n}\r\n/* eslint-enable indent */\r\n","import { html } from 'lit';\r\nimport { marked } from 'marked';\r\nimport { pathIsInSearch } from '~/utils/common-utils';\r\n\r\nexport function expandCollapseNavBarTag(navLinkEl, action = 'toggle') {\r\n  const tagAndPathEl = navLinkEl?.closest('.nav-bar-tag-and-paths');\r\n  const pathsUnderTagEl = tagAndPathEl?.querySelector('.nav-bar-paths-under-tag');\r\n  if (tagAndPathEl) {\r\n    const isExpanded = tagAndPathEl.classList.contains('expanded');\r\n    if (isExpanded && (action === 'toggle' || action === 'collapse')) {\r\n      pathsUnderTagEl.style.maxHeight = 0;\r\n      tagAndPathEl.classList.replace('expanded', 'collapsed');\r\n    } else if (!isExpanded && (action === 'toggle' || action === 'expand')) {\r\n      tagAndPathEl.classList.replace('collapsed', 'expanded');\r\n      pathsUnderTagEl.style.maxHeight = `${pathsUnderTagEl.scrollHeight}px`;\r\n    }\r\n  }\r\n}\r\n\r\nexport function expandCollapseAll(event, action = 'expand-all') {\r\n  if (!(event.type === 'click' || (event.type === 'keyup' && event.keyCode === 13))) {\r\n    return;\r\n  }\r\n  const navEl = event.target.closest('.nav-scroll');\r\n  const elList = [...navEl.querySelectorAll('.nav-bar-tag-and-paths')];\r\n  if (action === 'expand-all') {\r\n    elList.forEach((el) => {\r\n      const navBarPathsUnderTagEl = el.querySelector('.nav-bar-paths-under-tag');\r\n      el.classList.replace('collapsed', 'expanded');\r\n      navBarPathsUnderTagEl.style.maxHeight = `${navBarPathsUnderTagEl?.scrollHeight}px`;\r\n    });\r\n  } else {\r\n    elList.forEach((el) => {\r\n      el.classList.replace('expanded', 'collapsed');\r\n      el.querySelector('.nav-bar-paths-under-tag').style.maxHeight = 0;\r\n    });\r\n  }\r\n}\r\n\r\nexport function navBarClickAndEnterHandler(event) {\r\n  if (!(event.type === 'click' || (event.type === 'keyup' && event.keyCode === 13))) {\r\n    return;\r\n  }\r\n  const navEl = event.target;\r\n  event.stopPropagation();\r\n  if (navEl.dataset?.action === 'navigate') {\r\n    this.scrollToEventTarget(event, false);\r\n  } else if (navEl.dataset?.action === 'expand-all' || (navEl.dataset?.action === 'collapse-all')) {\r\n    expandCollapseAll(event, navEl.dataset.action);\r\n  } else if (navEl.dataset?.action === 'expand-collapse-tag') {\r\n    expandCollapseNavBarTag(navEl, 'toggle');\r\n  }\r\n}\r\n\r\n/* eslint-disable indent */\r\nexport default function navbarTemplate() {\r\n  if (!this.resolvedSpec || this.resolvedSpec.specLoadError) {\r\n    return html`\r\n      <nav class='nav-bar' part='section-navbar'>\r\n        <slot name='nav-logo' class='logo'></slot>\r\n      </nav>\r\n    `;\r\n  }\r\n  return html`\r\n  <nav class='nav-bar ${this.renderStyle}' part='section-navbar'>\r\n    <slot name='nav-logo' class='logo'></slot>\r\n    ${(this.allowSearch === 'false' && this.allowAdvancedSearch === 'false')\r\n      ? ''\r\n      : html`\r\n        <div style='display:flex; flex-direction:row; justify-content:center; align-items:stretch; padding:8px 24px 12px 24px; ${this.allowAdvancedSearch === 'false' ? 'border-bottom: 1px solid var(--nav-hover-bg-color)' : ''}' part='section-navbar-search'>\r\n          ${this.allowSearch === 'false'\r\n            ? ''\r\n            : html`\r\n              <div style = 'display:flex; flex:1; line-height:22px;'>\r\n                <input id = 'nav-bar-search' \r\n                  part = 'textbox textbox-nav-filter'\r\n                  style = 'width:100%; padding-right:20px; color:var(--nav-hover-text-color); border-color:var(--nav-accent-color); background-color:var(--nav-hover-bg-color)'\r\n                  type = 'text'\r\n                  placeholder = 'Filter' \r\n                  @change = '${this.onSearchChange}'\r\n                  spellcheck = 'false'\r\n                >\r\n                <div style='margin: 6px 5px 0 -24px; font-size:var(--font-size-regular); cursor:pointer;'>&#x21a9;</div>\r\n              </div>  \r\n              ${this.matchPaths\r\n                ? html`\r\n                  <button @click = '${this.onClearSearch}' class='m-btn thin-border' style='margin-left:5px; color:var(--nav-text-color); width:75px; padding:6px 8px;' part='btn btn-outline btn-clear-filter'>\r\n                    CLEAR\r\n                  </button>`\r\n                : ''\r\n              }\r\n            `\r\n          }\r\n          ${this.allowAdvancedSearch === 'false' || this.matchPaths\r\n            ? ''\r\n            : html`\r\n              <button class='m-btn primary' part='btn btn-fill btn-search' style='margin-left:5px; padding:6px 8px; width:75px' @click='${this.onShowSearchModalClicked}'>\r\n                SEARCH\r\n              </button>\r\n            `\r\n          }\r\n        </div>\r\n      `\r\n    }\r\n    ${html`<nav class='nav-scroll' tabindex='-1' part='section-navbar-scroll' @click='${(e) => navBarClickAndEnterHandler.call(this, e)}' @keyup='${(e) => navBarClickAndEnterHandler.call(this, e)}' >\r\n      ${(this.showInfo === 'false' || !this.resolvedSpec.info)\r\n        ? ''\r\n        : html`\r\n          ${(this.infoDescriptionHeadingsInNavBar === 'true')\r\n            ? html`\r\n              ${this.resolvedSpec.infoDescriptionHeaders.length > 0\r\n                ? html`<div class='nav-bar-info ${this.navActiveItemMarker}' id='link-overview' data-content-id='overview' data-action='navigate' tabindex='0' part='section-navbar-item section-navbar-overview'> \r\n                    ${this.resolvedSpec.info?.title?.trim() || 'Overview'}\r\n                  </div>`\r\n                : ''\r\n              }\r\n              <div class='overview-headers'>\r\n                ${this.resolvedSpec.infoDescriptionHeaders.map((header) => html`\r\n                  <div\r\n                    class='nav-bar-h${header.depth} ${this.navActiveItemMarker}' \r\n                    id='link-overview--${new marked.Slugger().slug(header.text)}'\r\n                    data-action='navigate' \r\n                    data-content-id='overview--${new marked.Slugger().slug(header.text)}' \r\n                  >\r\n                    ${header.text}\r\n                  </div>`)\r\n                }\r\n              </div>\r\n              ${this.resolvedSpec.infoDescriptionHeaders.length > 0 ? html`<hr style='border-top: 1px solid var(--nav-hover-bg-color); border-width:1px 0 0 0; margin: 15px 0 0 0'/>` : ''}\r\n            `\r\n            : html`<div class='nav-bar-info ${this.navActiveItemMarker}' id='link-overview' data-action='navigate' data-content-id='overview' tabindex='0'> \r\n              ${this.resolvedSpec.info?.title?.trim() || 'Overview'}\r\n            </div>`\r\n          }\r\n        `\r\n      }\r\n    \r\n      ${this.allowServerSelection === 'false'\r\n        ? ''\r\n        : html`<div class='nav-bar-info ${this.navActiveItemMarker}' id='link-servers' data-action='navigate' data-content-id='servers' tabindex='0' part='section-navbar-item section-navbar-servers'> API Servers </div>`\r\n      }\r\n      ${(this.allowAuthentication === 'false' || !this.resolvedSpec.securitySchemes)\r\n        ? ''\r\n        : html`<div class='nav-bar-info ${this.navActiveItemMarker}' id='link-auth' data-action='navigate' data-content-id='auth' tabindex='0' part='section-navbar-item section-navbar-auth'> Authentication </div>`\r\n      }\r\n\r\n      <div id='link-operations-top' class='nav-bar-section operations' data-action='navigate' data-content-id='${this.renderStyle === 'focused' ? '' : 'operations-top'}' part='section-navbar-item section-navbar-operations-top'>\r\n        <div style='font-size:16px; display:flex; margin-left:10px;'>\r\n          ${this.renderStyle === 'focused'\r\n            ? html`\r\n              <div class='nav-bar-expand-all'\r\n                data-action='expand-all'\r\n                tabindex='0' \r\n                title='Expand all'\r\n              >▸</div>\r\n              <div class='nav-bar-collapse-all'\r\n                data-action='collapse-all'\r\n                tabindex='0' \r\n                title='Collapse all'\r\n              >▸</div>`\r\n            : ''\r\n          }  \r\n        </div>\r\n        <div class='nav-bar-section-title'> OPERATIONS </div>\r\n      </div>\r\n\r\n      <!-- TAGS AND PATHS-->\r\n      ${this.resolvedSpec.tags\r\n        .filter((tag) => tag.paths.filter((path) => pathIsInSearch(this.matchPaths, path, this.matchType)).length)\r\n        .map((tag) => html`\r\n          <div class='nav-bar-tag-and-paths ${(this.renderStyle === 'read' ? 'expanded' : (tag.expanded ? 'expanded' : 'collapsed'))}' >\r\n            ${tag.name === 'General ⦂'\r\n              ? html`<hr style='border:none; border-top: 1px dotted var(--nav-text-color); opacity:0.3; margin:-1px 0 0 0;'/>`\r\n              : html`\r\n                <div \r\n                  class='nav-bar-tag ${this.navActiveItemMarker}'\r\n                  part='section-navbar-item section-navbar-tag'\r\n                  id='link-${tag.elementId}'\r\n                  data-action='${(this.renderStyle === 'read' ? 'navigate' : this.onNavTagClick === 'show-description') ? 'navigate' : 'expand-collapse-tag'}'\r\n                  data-content-id='${(this.renderStyle === 'read' ? `${tag.elementId}` : this.onNavTagClick === 'show-description') ? `${tag.elementId}` : ''}'\r\n                  data-first-path-id='${tag.firstPathId}'\r\n                  tabindex='0'\r\n                >\r\n                  <div style=\"pointer-events:none;\">${tag.name}</div>\r\n                  <div class='nav-bar-tag-icon' tabindex='0' data-action='expand-collapse-tag'></div>\r\n                </div>\r\n              `\r\n            }\r\n            ${(this.infoDescriptionHeadingsInNavBar === 'true')\r\n              ? html`\r\n                ${this.renderStyle === 'focused' && this.onNavTagClick === 'expand-collapse'\r\n                  ? ''\r\n                  : html`\r\n                    <div class='tag-headers'>\r\n                      ${tag.headers.map((header) => html`\r\n                      <div\r\n                        class='nav-bar-h${header.depth} ${this.navActiveItemMarker}'\r\n                        part='section-navbar-item section-navbar-h${header.depth}'\r\n                        id='link-${tag.elementId}--${new marked.Slugger().slug(header.text)}'\r\n                        data-action='navigate'\r\n                        data-content-id='${tag.elementId}--${new marked.Slugger().slug(header.text)}'\r\n                        tabindex='0'\r\n                      > ${header.text}</div>`)}\r\n                    </div>`\r\n                }`\r\n              : ''\r\n            }\r\n            <div class='nav-bar-paths-under-tag' style='max-height:${(tag.expanded || this.renderStyle === 'read') ? ((tag.paths?.length || 1) * 50) : 0}px;'>\r\n              <!-- Paths in each tag (endpoints) -->\r\n              ${tag.paths.filter((v) => {\r\n                if (this.matchPaths) {\r\n                  return pathIsInSearch(this.matchPaths, v, this.matchType);\r\n                }\r\n                return true;\r\n              }).map((p) => html`\r\n              <div \r\n                class='nav-bar-path ${this.navActiveItemMarker} ${this.usePathInNavBar === 'true' ? 'small-font' : ''}'\r\n                part='section-navbar-item section-navbar-path'\r\n                data-action='navigate'\r\n                data-content-id='${p.elementId}'\r\n                id='link-${p.elementId}'\r\n                tabindex='0'\r\n              >\r\n                <span style = 'display:flex; pointer-events: none; align-items:start; ${p.deprecated ? 'filter:opacity(0.5)' : ''}'>\r\n                  ${html`<span class='nav-method ${this.showMethodInNavBar} ${p.method}' style='pointer-events: none;'>\r\n                      ${this.showMethodInNavBar === 'as-colored-block' ? p.method.substring(0, 3).toUpperCase() : p.method.toUpperCase()}\r\n                    </span>`\r\n                  }\r\n                  ${p.isWebhook ? html`<span style='font-weight:bold; pointer-events: none; margin-right:8px; font-size: calc(var(--font-size-small) - 2px)'>WEBHOOK</span>` : ''}\r\n                  ${this.usePathInNavBar === 'true'\r\n                    ? html`<span style='pointer-events: none;' class='mono-font'>${p.path}</span>`\r\n                    : p.summary || p.shortSummary\r\n                  }\r\n                </span>\r\n              </div>`)}\r\n            </div>\r\n          </div>\r\n        `)\r\n      }\r\n\r\n      <!-- COMPONENTS -->\r\n      ${this.resolvedSpec.components && this.showComponents === 'true' && this.renderStyle === 'focused'\r\n        ? html`\r\n          <div id='link-components' class='nav-bar-section components'>\r\n            <div></div>\r\n            <div class='nav-bar-section-title'>COMPONENTS</div>\r\n          </div>\r\n          ${this.resolvedSpec.components.map((component) => (component.subComponents.length\r\n            ? html`\r\n              <div class='nav-bar-tag'\r\n                part='section-navbar-item section-navbar-tag'\r\n                data-action='navigate' \r\n                data-content-id='cmp--${component.name.toLowerCase()}' \r\n                id='link-cmp--${component.name.toLowerCase()}'\r\n              >\r\n                ${component.name}\r\n              </div>\r\n              ${component.subComponents.filter((p) => p.expanded !== false).map((p) => html`\r\n                <div class='nav-bar-path' data-action='navigate' data-content-id='cmp--${p.id}' id='link-cmp--${p.id}'>\r\n                  <span> ${p.name} </span>\r\n                </div>`)\r\n              }`\r\n            : ''))\r\n          }`\r\n        : ''\r\n      }\r\n    </nav>`\r\n  }\r\n</nav>\r\n`;\r\n}\r\n/* eslint-enable indent */\r\n","import { html } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\nimport { expandedEndpointBodyTemplate } from '~/templates/expanded-endpoint-template';\r\nimport '~/components/api-request';\r\nimport '~/components/api-response';\r\nimport componentsTemplate from '~/templates/components-template';\r\nimport overviewTemplate from '~/templates/overview-template';\r\nimport serverTemplate from '~/templates/server-template';\r\nimport securitySchemeTemplate from '~/templates/security-scheme-template';\r\nimport { expandCollapseNavBarTag } from '~/templates/navbar-template';\r\n\r\nfunction headingRenderer(tagElementId) {\r\n  const renderer = new marked.Renderer();\r\n  renderer.heading = ((text, level, raw, slugger) => `<h${level} class=\"observe-me\" id=\"${tagElementId}--${slugger.slug(raw)}\">${text}</h${level}>`);\r\n  return renderer;\r\n}\r\n\r\nfunction wrapFocusedTemplate(templateToWrap) {\r\n  return html`\r\n    <div class='regular-font section-gap--focused-mode' part=\"section-operations-in-tag\">\r\n      ${templateToWrap}\r\n    </div>`;\r\n}\r\n\r\nfunction defaultContentTemplate() {\r\n  // In focused mode default content is overview or first path\r\n  if (this.showInfo === 'true') {\r\n    return wrapFocusedTemplate(overviewTemplate.call(this));\r\n  }\r\n  const selectedTagObj = this.resolvedSpec.tags[0];\r\n  const selectedPathObj = this.resolvedSpec.tags[0]?.paths[0];\r\n  return (selectedTagObj && selectedPathObj)\r\n    ? wrapFocusedTemplate(expandedEndpointBodyTemplate.call(this, selectedPathObj, selectedTagObj.name))\r\n    : wrapFocusedTemplate('');\r\n}\r\n\r\n/* eslint-disable indent */\r\nfunction focusedTagBodyTemplate(tag) {\r\n  return html`\r\n    <h1 id=\"${tag.elementId}\">${tag.name}</h1>\r\n    ${this.onNavTagClick === 'show-description' && tag.description\r\n      ? html`\r\n        <div class=\"m-markdown\">\r\n          ${\r\n            unsafeHTML(`\r\n            <div class=\"m-markdown regular-font\">\r\n              ${marked(tag.description || '', this.infoDescriptionHeadingsInNavBar === 'true' ? { renderer: headingRenderer(tag.elementId) } : undefined)}\r\n            </div>`)\r\n          }\r\n        </div>`\r\n      : ''\r\n    }\r\n  `;\r\n}\r\n\r\nexport default function focusedEndpointTemplate() {\r\n  if (!this.focusedElementId || !this.resolvedSpec) {\r\n    return;\r\n  }\r\n  const focusElId = this.focusedElementId;\r\n  let selectedPathObj = null;\r\n  let selectedTagObj = null;\r\n  let focusedTemplate;\r\n  let i = 0;\r\n  if (focusElId.startsWith('overview') && this.showInfo === 'true') {\r\n    focusedTemplate = overviewTemplate.call(this);\r\n  } else if (focusElId === 'auth' && this.allowAuthentication === 'true') {\r\n    focusedTemplate = securitySchemeTemplate.call(this);\r\n  } else if (focusElId === 'servers' && this.allowServerSelection === 'true') {\r\n    focusedTemplate = serverTemplate.call(this);\r\n  } else if (focusElId === 'operations-top') {\r\n    focusedTemplate = html`\r\n    <div id=\"operations-top\" class=\"observe-me\">\r\n      <slot name=\"operations-top\"></slot>\r\n    </div>`;\r\n  } else if (focusElId.startsWith('cmp--') && this.showComponents === 'true') {\r\n    focusedTemplate = componentsTemplate.call(this);\r\n  } else if (focusElId.startsWith('tag--')) {\r\n    const idToFocus = focusElId.indexOf('--', 4) > 0 ? focusElId.substring(0, focusElId.indexOf('--', 5)) : focusElId;\r\n    selectedTagObj = this.resolvedSpec.tags.find((v) => v.elementId === idToFocus);\r\n    if (selectedTagObj) {\r\n      focusedTemplate = wrapFocusedTemplate.call(this, focusedTagBodyTemplate.call(this, selectedTagObj));\r\n    } else {\r\n      focusedTemplate = defaultContentTemplate.call(this);\r\n    }\r\n  } else {\r\n    for (i = 0; i < this.resolvedSpec.tags.length; i += 1) {\r\n      selectedTagObj = this.resolvedSpec.tags[i];\r\n      selectedPathObj = this.resolvedSpec.tags[i].paths.find((v) => `${v.elementId}` === focusElId);\r\n      if (selectedPathObj) {\r\n        break;\r\n      }\r\n    }\r\n    if (selectedPathObj) {\r\n      // In focused mode we must expand the nav-bar tag element if it is collapsed\r\n      const newNavEl = this.shadowRoot.getElementById(`link-${focusElId}`);\r\n      expandCollapseNavBarTag(newNavEl, 'expand');\r\n      focusedTemplate = wrapFocusedTemplate.call(\r\n        this,\r\n        expandedEndpointBodyTemplate.call(this, selectedPathObj, (selectedTagObj.name || ''), (selectedTagObj.description || '')),\r\n      );\r\n    } else {\r\n      // if focusedElementId is not found then show the default content (overview or first-path)\r\n      focusedTemplate = defaultContentTemplate.call(this);\r\n    }\r\n  }\r\n  return focusedTemplate;\r\n}\r\n/* eslint-enable indent */\r\n","import { html } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\nimport '~/components/api-request';\r\nimport '~/components/api-response';\r\nimport codeSamplesTemplate from '~/templates/code-samples-template';\r\nimport callbackTemplate from '~/templates/callback-template';\r\nimport { pathSecurityTemplate } from '~/templates/security-scheme-template';\r\nimport { pathIsInSearch, rapidocApiKey } from '~/utils/common-utils';\r\n\r\nfunction toggleExpand(path) {\r\n  if (path.expanded) {\r\n    path.expanded = false; // collapse\r\n    if (this.updateRoute === 'true') {\r\n      this.replaceHistoryState('');\r\n    }\r\n  } else {\r\n    path.expanded = true; // Expand\r\n    if (this.updateRoute === 'true') {\r\n      const newHash = `${this.routePrefix || '#'}${path.elementId}`;\r\n      if (window.location.hash !== newHash) {\r\n        this.replaceHistoryState(path.elementId);\r\n      }\r\n    }\r\n  }\r\n  this.requestUpdate();\r\n}\r\n\r\nexport function expandCollapseAll(operationsRootEl, action = 'expand-all') {\r\n  const elList = [...operationsRootEl.querySelectorAll('.section-tag')];\r\n  if (action === 'expand-all') {\r\n    elList.map((el) => {\r\n      el.classList.replace('collapsed', 'expanded');\r\n    });\r\n  } else {\r\n    elList.map((el) => {\r\n      el.classList.replace('expanded', 'collapsed');\r\n    });\r\n  }\r\n}\r\n\r\nfunction onExpandCollapseAll(e, action = 'expand-all') {\r\n  expandCollapseAll.call(this, e.target.closest('.operations-root'), action);\r\n}\r\n\r\n/* eslint-disable indent */\r\nfunction endpointHeadTemplate(path, pathsExpanded = false) {\r\n  return html`\r\n  <summary @click=\"${(e) => { toggleExpand.call(this, path, e); }}\" part=\"section-endpoint-head-${path.expanded ? 'expanded' : 'collapsed'}\" class='endpoint-head ${path.method} ${path.deprecated ? 'deprecated' : ''} ${pathsExpanded || path.expanded ? 'expanded' : 'collapsed'}'>\r\n    <div part=\"section-endpoint-head-method\" class=\"method ${path.method} ${path.deprecated ? 'deprecated' : ''}\"> ${path.method} </div> \r\n    <div  part=\"section-endpoint-head-path\" class=\"path ${path.deprecated ? 'deprecated' : ''}\"> \r\n      ${path.path} \r\n      ${path.isWebhook ? html`<span style=\"font-family: var(--font-regular); font-size: var(--); font-size: var(--font-size-small); color:var(--primary-color); margin-left: 16px\"> Webhook</span>` : ''}\r\n    </div>\r\n    ${path.deprecated\r\n      ? html`\r\n        <span style=\"font-size:var(--font-size-small); text-transform:uppercase; font-weight:bold; color:var(--red); margin:2px 0 0 5px;\"> \r\n          deprecated \r\n        </span>`\r\n      : ''\r\n    }\r\n    ${this.showSummaryWhenCollapsed\r\n      ? html`\r\n        <div class=\"only-large-screen\" style=\"min-width:60px; flex:1\"></div>\r\n        <div part=\"section-endpoint-head-description\" class=\"descr\">${path.summary || path.shortSummary} </div>`\r\n      : ''\r\n    }\r\n  </summary>\r\n  `;\r\n}\r\n\r\nfunction endpointBodyTemplate(path) {\r\n  const acceptContentTypes = new Set();\r\n  for (const respStatus in path.responses) {\r\n    for (const acceptContentType in (path.responses[respStatus]?.content)) {\r\n      acceptContentTypes.add(acceptContentType.trim());\r\n    }\r\n  }\r\n  const accept = [...acceptContentTypes].join(', ');\r\n  // Filter API Keys that are non-empty and are applicable to the the path\r\n  const nonEmptyApiKeys = this.resolvedSpec.securitySchemes.filter((v) => (v.finalKeyValue && path.security?.some((ps) => (v.securitySchemeId in ps)))) || [];\r\n\r\n  // If a RapiDoc API Key is specified on the element and its value is not hyphen(-) then include it for all paths\r\n  const rapiDocApiKey = this.resolvedSpec.securitySchemes.find((v) => (v.securitySchemeId === rapidocApiKey && v.value !== '-'));\r\n  if (rapiDocApiKey) {\r\n    nonEmptyApiKeys.push(rapiDocApiKey);\r\n  }\r\n\r\n  const codeSampleTabPanel = path.xCodeSamples ? codeSamplesTemplate(path.xCodeSamples) : '';\r\n  return html`\r\n  <div part=\"section-endpoint-body-${path.expanded ? 'expanded' : 'collapsed'}\" class='endpoint-body ${path.method} ${path.deprecated ? 'deprecated' : ''}'>\r\n    <div class=\"summary\">\r\n      ${path.summary\r\n        ? html`<div class=\"title\" part=\"section-endpoint-body-title\">${path.summary}<div>`\r\n        : path.shortSummary !== path.description\r\n          ? html`<div class=\"title\" part=\"section-endpoint-body-title\">${path.shortSummary}</div>`\r\n          : ''\r\n      }\r\n      ${path.xBadges && path.xBadges?.length > 0\r\n        ? html`\r\n          <div style=\"display:flex; flex-wrap:wrap;font-size: var(--font-size-small);\">\r\n            ${path.xBadges.map((v) => (\r\n                html`<span part=\"endpoint-badge\" style=\"margin:1px; margin-right:5px; padding:1px 8px; font-weight:bold; border-radius:12px;  background-color: var(--light-${v.color}, var(--input-bg)); color:var(--${v.color}); border:1px solid var(--${v.color})\">${v.label}</span>`\r\n              ))\r\n            }\r\n          </div>\r\n          `\r\n        : ''\r\n      }\r\n\r\n      ${path.description ? html`<div part=\"section-endpoint-body-description\" class=\"m-markdown\"> ${unsafeHTML(marked(path.description))}</div>` : ''}\r\n      ${path.externalDocs?.url || path.externalDocs?.description\r\n        ? html`<div style=\"background-color:var(--bg3); padding:2px 8px 8px 8px; margin:8px 0; border-radius:var(--border-radius)\"> \r\n            <div class=\"m-markdown\"> ${unsafeHTML(marked(path.externalDocs?.description || ''))} </div>\r\n            ${path.externalDocs?.url\r\n              ? html`<a style=\"font-family:var(--font-mono); font-size:var(--font-size-small)\" href=\"${path.externalDocs?.url}\" target=\"_blank\"> \r\n                  ${path.externalDocs?.url} <div style=\"transform: rotate(270deg) scale(1.5); display: inline-block; margin-left:5px\">⇲</div>\r\n                </a>`\r\n              : ''\r\n            }\r\n          </div>`\r\n        : ''\r\n      }\r\n      <slot name=\"${path.elementId}\"></slot>\r\n      ${pathSecurityTemplate.call(this, path.security)}\r\n      ${codeSampleTabPanel}\r\n    </div>  \r\n    <div class='req-resp-container'> \r\n      <div style=\"display:flex; flex-direction:column\" class=\"view-mode-request ${this.layout}-layout\">\r\n        <api-request\r\n          class = \"${this.renderStyle}-mode ${this.layout}-layout\"\r\n          style = \"width:100%;\"\r\n          webhook = \"${path.isWebhook}\"\r\n          method = \"${path.method}\"\r\n          path = \"${path.path}\"\r\n          .security = \"${path.security}\"\r\n          .parameters = \"${path.parameters}\"\r\n          .request_body = \"${path.requestBody}\"\r\n          .api_keys = \"${nonEmptyApiKeys}\"\r\n          .servers = \"${path.servers}\" \r\n          server-url = \"${path.servers && path.servers.length > 0 ? path.servers[0].url : this.selectedServer.computedUrl}\" \r\n          active-schema-tab = \"${this.defaultSchemaTab}\"\r\n          fill-request-fields-with-example = \"${this.fillRequestFieldsWithExample}\"\r\n          allow-try = \"${this.allowTry}\"\r\n          show-curl-before-try = \"${this.showCurlBeforeTry}\"\r\n          accept = \"${accept}\"\r\n          render-style=\"${this.renderStyle}\" \r\n          schema-style = \"${this.schemaStyle}\" \r\n          schema-expand-level = \"${this.schemaExpandLevel}\"\r\n          schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n          allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n          schema-hide-read-only = \"${this.schemaHideReadOnly === 'never' ? 'false' : path.isWebhook ? 'false' : 'true'}\"\r\n          schema-hide-write-only = \"${this.schemaHideWriteOnly === 'never' ? 'false' : path.isWebhook ? 'true' : 'false'}\"\r\n          fetch-credentials = \"${this.fetchCredentials}\"\r\n          exportparts = \"wrap-request-btn:wrap-request-btn, btn:btn, btn-fill:btn-fill, btn-outline:btn-outline, btn-try:btn-try, btn-clear:btn-clear, btn-clear-resp:btn-clear-resp,\r\n            file-input:file-input, textbox:textbox, textbox-param:textbox-param, textarea:textarea, textarea-param:textarea-param, \r\n            anchor:anchor, anchor-param-example:anchor-param-example, schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n          > </api-request>\r\n\r\n          ${path.callbacks ? callbackTemplate.call(this, path.callbacks) : ''}\r\n        </div>  \r\n\r\n        <api-response\r\n          class = \"${this.renderStyle}-mode\"\r\n          style = \"width:100%;\"\r\n          webhook = \"${path.isWebhook}\"\r\n          .responses=\"${path.responses}\"\r\n          active-schema-tab = \"${this.defaultSchemaTab}\" \r\n          render-style=\"${this.renderStyle}\" \r\n          schema-style=\"${this.schemaStyle}\"\r\n          schema-expand-level = \"${this.schemaExpandLevel}\"\r\n          schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n          allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n          schema-hide-read-only = \"${this.schemaHideReadOnly === 'never' ? 'false' : path.isWebhook ? 'true' : 'false'}\"\r\n          schema-hide-write-only = \"${this.schemaHideWriteOnly === 'never' ? 'false' : path.isWebhook ? 'false' : 'true'}\"\r\n          selected-status = \"${Object.keys(path.responses || {})[0] || ''}\"\r\n          exportparts = \"btn:btn, btn-fill:btn-fill, btn-outline:btn-outline, btn-try:btn-try, file-input:file-input, \r\n          textbox:textbox, textbox-param:textbox-param, textarea:textarea, textarea-param:textarea-param, anchor:anchor, anchor-param-example:anchor-param-example, btn-clear-resp:btn-clear-resp,\r\n          schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n        > </api-response>\r\n      </div>\r\n  </div>`;\r\n}\r\n\r\nexport default function endpointTemplate(showExpandCollapse = true, showTags = true, pathsExpanded = false) {\r\n  if (!this.resolvedSpec) { return ''; }\r\n  return html`\r\n    ${showExpandCollapse\r\n      ? html`\r\n        <div style=\"display:flex; justify-content:flex-end;\"> \r\n          <span @click=\"${(e) => onExpandCollapseAll(e, 'expand-all')}\" style=\"color:var(--primary-color); cursor:pointer;\">\r\n            Expand all\r\n          </span> \r\n          &nbsp;|&nbsp; \r\n          <span @click=\"${(e) => onExpandCollapseAll(e, 'collapse-all')}\" style=\"color:var(--primary-color); cursor:pointer;\" >\r\n            Collapse all\r\n          </span> \r\n          &nbsp; sections\r\n        </div>`\r\n      : ''\r\n    }\r\n    ${this.resolvedSpec.tags.map((tag) => html`\r\n      ${showTags\r\n        ? html` \r\n          <div class='regular-font section-gap section-tag ${tag.expanded ? 'expanded' : 'collapsed'}'> \r\n            <div class='section-tag-header' @click=\"${() => { tag.expanded = !tag.expanded; this.requestUpdate(); }}\">\r\n              <div id='${tag.elementId}' class=\"sub-title tag\" style=\"color:var(--primary-color)\">${tag.name}</div>\r\n            </div>\r\n            <div class='section-tag-body'>\r\n              <slot name=\"${tag.elementId}\"></slot>\r\n              <div class=\"regular-font regular-font-size m-markdown\" style=\"padding-bottom:12px\">\r\n                ${unsafeHTML(marked(tag.description || ''))}\r\n              </div>\r\n              ${tag.paths.filter((v) => {\r\n                if (this.matchPaths) {\r\n                  return pathIsInSearch(this.matchPaths, v, this.matchType);\r\n                }\r\n                return true;\r\n                }).map((path) => html`\r\n                <section part=\"section-endpoint\" id='${path.elementId}' class='m-endpoint regular-font ${path.method} ${pathsExpanded || path.expanded ? 'expanded' : 'collapsed'}'>\r\n                  ${endpointHeadTemplate.call(this, path, pathsExpanded)}      \r\n                  ${pathsExpanded || path.expanded ? endpointBodyTemplate.call(this, path) : ''}\r\n                </section>`)\r\n              }\r\n            </div>\r\n          </div>`\r\n        : html`\r\n          <div class='section-tag-body'>\r\n          ${tag.paths.filter((v) => {\r\n            if (this.matchPaths) {\r\n              return pathIsInSearch(this.matchPaths, v, this.matchType);\r\n            }\r\n            return true;\r\n            }).map((path) => html`\r\n            <section id='${path.elementId}' class='m-endpoint regular-font ${path.method} ${pathsExpanded || path.expanded ? 'expanded' : 'collapsed'}'>\r\n              ${endpointHeadTemplate.call(this, path, pathsExpanded)}      \r\n              ${pathsExpanded || path.expanded ? endpointBodyTemplate.call(this, path) : ''}\r\n            </section>`)\r\n          }\r\n          </div>\r\n        `\r\n      }\r\n  `)\r\n  }`;\r\n}\r\n/* eslint-enable indent */\r\n","import { html } from 'lit';\r\n\r\n/* eslint-disable indent */\r\nexport default function logoTemplate(style) {\r\nreturn html`\r\n  <div style=${style}>\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"1 0 511 512\">\r\n      <path d=\"M351 411a202 202 0 01-350 0 203 203 0 01333-24 203 203 0 0117 24zm0 0\" fill=\"#adc165\"/>\r\n      <path d=\"M334 387a202 202 0 01-216-69 202 202 0 01216 69zm78 32H85a8 8 0 01-8-8 8 8 0 018-8h327a8 8 0 017 8 8 8 0 01-7 8zm0 0\" fill=\"#99aa52\"/>\r\n      <path d=\"M374 338l-5 30a202 202 0 01-248-248 203 203 0 01253 218zm0 0\" fill=\"#ffc73b\"/>\r\n      <path d=\"M374 338a202 202 0 01-100-197 203 203 0 01100 197zm38 81l-6-2-231-231a8 8 0 0111-11l231 230a8 8 0 01-5 14zm0 0\" fill=\"#efb025\"/>\r\n      <path d=\"M311 175c0 75 40 140 101 175a202 202 0 000-350 202 202 0 00-101 175zm0 0\" fill=\"#ff903e\"/>\r\n      <path d=\"M412 419a8 8 0 01-8-8V85a8 8 0 0115 0v326a8 8 0 01-7 8zm0 0\" fill=\"#e87425\"/>\r\n    </svg>\r\n  </div>    \r\n`;\r\n}\r\n/* eslint-enable indent */\r\n","import { html } from 'lit';\r\nimport logoTemplate from '~/templates/logo-template';\r\n\r\n/* eslint-disable indent */\r\nexport default function headerTemplate() {\r\n  return html`\r\n  <header class=\"row main-header regular-font\" part=\"section-header\" style=\"padding:8px 4px 8px 4px;min-height:48px;\">\r\n    <div class=\"only-large-screen-flex\" style=\"align-items: center;\">\r\n      <slot name=\"logo\" class=\"logo\" part=\"section-logo\">\r\n        ${logoTemplate('height:36px;width:36px;margin-left:5px')}\r\n        <!-- m-logo style=\"height:36px;width:36px;margin-left:5px\"></m-logo -->\r\n      </slot>  \r\n      <div class=\"header-title\" part=\"label-header-title\">${this.headingText}</div>\r\n    </div>  \r\n    <div style=\"margin: 0px 8px;display:flex;flex:1\">\r\n      ${(this.allowSpecUrlLoad === 'false')\r\n        ? ''\r\n        : html`\r\n          <input id=\"spec-url\" \r\n            type=\"text\" \r\n            style=\"font-size:var(--font-size-small)\" \r\n            class=\"header-input mono-font\"\r\n            part=\"textbox textbox-spec-url\" \r\n            placeholder=\"Spec URL\" \r\n            value=\"${this.specUrl || ''}\" \r\n            @change=\"${this.onSpecUrlChange}\" \r\n            spellcheck=\"false\"\r\n          >\r\n          <div style=\"margin: 6px 5px 0 -24px; font-size:var(--font-size-regular); cursor:pointer;\">&#x21a9;</div> \r\n        `\r\n      } \r\n      ${(this.allowSpecFileLoad === 'false')\r\n        ? ''\r\n        : html`\r\n          <input id=\"spec-file\" \r\n            part = \"file-input\"\r\n            type=\"file\" \r\n            style=\"display:none\" \r\n            value=\"${this.specFile || ''}\" \r\n            @change=\"${this.onSpecFileChange}\" \r\n            spellcheck=\"false\"\r\n           >\r\n          <button class=\"m-btn primary only-large-screen\" style=\"margin-left:10px;\" part=\"btn btn-fill\" @click=\"${this.onFileLoadClick}\"> LOCAL JSON FILE </button>\r\n        `\r\n      }\r\n      <slot name=\"header\"></slot>\r\n      ${(this.allowSearch === 'false' || 'read focused'.includes(this.renderStyle))\r\n        ? ''\r\n        : html`  \r\n          <input id=\"search\" class=\"header-input\" type=\"text\" part=\"textbox textbox-header-filter\" placeholder=\"Filter\" @change=\"${this.onSearchChange}\" style=\"max-width:130px;margin-left:10px;\" spellcheck=\"false\" >\r\n          <div style=\"margin: 6px 5px 0 -24px; font-size:var(--font-size-regular); cursor:pointer;\">&#x21a9;</div>\r\n        `\r\n      }\r\n      \r\n      ${(this.allowAdvancedSearch === 'false' || 'read focused'.includes(this.renderStyle))\r\n        ? ''\r\n        : html`\r\n          <button class=\"m-btn primary only-large-screen\" part=\"btn btn-fill btn-search\" style=\"margin-left:10px;\" @click=\"${this.onShowSearchModalClicked}\">\r\n            Search\r\n          </button>\r\n        `\r\n      }\r\n    </div>\r\n    </header>`;\r\n  }\r\n/* eslint-enable indent */\r\n","import { LitElement, html, css } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\nimport { schemaInObjectNotation, generateExample } from '~/utils/schema-utils';\r\nimport FontStyles from '~/styles/font-styles';\r\nimport FlexStyles from '~/styles/flex-styles';\r\nimport TableStyles from '~/styles/table-styles';\r\nimport InputStyles from '~/styles/input-styles';\r\nimport TabStyles from '~/styles/tab-styles';\r\nimport BorderStyles from '~/styles/border-styles';\r\nimport CustomStyles from '~/styles/custom-styles';\r\nimport '~/components/json-tree';\r\nimport '~/components/schema-tree';\r\nimport '~/components/schema-table';\r\n\r\nexport default class ApiResponse extends LitElement {\r\n  constructor() {\r\n    super();\r\n    this.selectedStatus = '';\r\n    this.headersForEachRespStatus = {};\r\n    this.mimeResponsesForEachStatus = {};\r\n    this.activeSchemaTab = 'schema';\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      callback: { type: String },\r\n      webhook: { type: String },\r\n      responses: { type: Object },\r\n      parser: { type: Object },\r\n      schemaStyle: { type: String, attribute: 'schema-style' },\r\n      renderStyle: { type: String, attribute: 'render-style' },\r\n      selectedStatus: { type: String, attribute: 'selected-status' },\r\n      selectedMimeType: { type: String, attribute: 'selected-mime-type' },\r\n      activeSchemaTab: { type: String, attribute: 'active-schema-tab' },\r\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\r\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\r\n      allowSchemaDescriptionExpandToggle: { type: String, attribute: 'allow-schema-description-expand-toggle' },\r\n      schemaHideReadOnly: { type: String, attribute: 'schema-hide-read-only' },\r\n      schemaHideWriteOnly: { type: String, attribute: 'schema-hide-write-only' },\r\n    };\r\n  }\r\n\r\n  static get styles() {\r\n    return [\r\n      FontStyles,\r\n      FlexStyles,\r\n      TabStyles,\r\n      TableStyles,\r\n      InputStyles,\r\n      BorderStyles,\r\n      css`\r\n      :where(button, input[type=\"checkbox\"], [tabindex=\"0\"]):focus-visible { box-shadow: var(--focus-shadow); }\r\n      :where(input[type=\"text\"], input[type=\"password\"], select, textarea):focus-visible { border-color: var(--primary-color); }\r\n      .resp-head{\r\n        vertical-align: middle;\r\n        padding:16px 0 8px;\r\n      }\r\n      .resp-head.divider{\r\n        border-top: 1px solid var(--border-color);\r\n        margin-top:10px;\r\n      }\r\n      .resp-status{ \r\n        font-weight:bold;\r\n        font-size:calc(var(--font-size-small) + 1px);\r\n      }\r\n      .resp-descr{\r\n        font-size:calc(var(--font-size-small) + 1px);\r\n        color:var(--light-fg);\r\n        text-align:left;\r\n      }\r\n      .top-gap{margin-top:16px;}\r\n      .example-panel{\r\n        font-size:var(--font-size-small);\r\n        margin:0;\r\n      }\r\n      .focused-mode,\r\n      .read-mode {\r\n        padding-top:24px;\r\n        margin-top:12px;\r\n        border-top: 1px dashed var(--border-color);\r\n      }`,\r\n      CustomStyles,\r\n    ];\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n    <div class=\"col regular-font response-panel ${this.renderStyle}-mode\">\r\n      <div class=\" ${this.callback === 'true' ? 'tiny-title' : 'req-res-title'} \"> \r\n        ${this.callback === 'true' ? 'CALLBACK RESPONSE' : 'RESPONSE'}\r\n      </div>\r\n      <div>\r\n        ${this.responseTemplate()}\r\n      <div>  \r\n    </div>  \r\n    `;\r\n  }\r\n\r\n  resetSelection() {\r\n    this.selectedStatus = '';\r\n    this.selectedMimeType = '';\r\n  }\r\n\r\n  /* eslint-disable indent */\r\n  responseTemplate() {\r\n    if (!this.responses) { return ''; }\r\n    for (const statusCode in this.responses) {\r\n      if (!this.selectedStatus) {\r\n        this.selectedStatus = statusCode;\r\n      }\r\n      const allMimeResp = {};\r\n      for (const mimeResp in this.responses[statusCode]?.content) {\r\n        const mimeRespObj = this.responses[statusCode].content[mimeResp];\r\n        if (!this.selectedMimeType) {\r\n          this.selectedMimeType = mimeResp;\r\n        }\r\n        // Generate Schema\r\n        const schemaTree = schemaInObjectNotation(mimeRespObj.schema, {});\r\n        // Generate Example\r\n        const respExamples = generateExample(\r\n          mimeRespObj.schema,\r\n          mimeResp,\r\n          mimeRespObj.examples,\r\n          mimeRespObj.example,\r\n          this.callback === 'true' || this.webhook === 'true' ? false : true, // eslint-disable-line no-unneeded-ternary\r\n          this.callback === 'true' || this.webhook === 'true' ? true : false, // eslint-disable-line no-unneeded-ternary\r\n          mimeResp.includes('json') ? 'json' : 'text',\r\n        );\r\n        allMimeResp[mimeResp] = {\r\n          description: this.responses[statusCode].description,\r\n          examples: respExamples,\r\n          selectedExample: respExamples[0]?.exampleId || '',\r\n          schemaTree,\r\n        };\r\n      }\r\n      // Headers for each response status\r\n      const tempHeaders = [];\r\n      for (const key in this.responses[statusCode]?.headers) {\r\n        tempHeaders.push({ name: key, ...this.responses[statusCode].headers[key] });\r\n      }\r\n      this.headersForEachRespStatus[statusCode] = tempHeaders;\r\n      this.mimeResponsesForEachStatus[statusCode] = allMimeResp;\r\n    }\r\n    return html`\r\n      ${Object.keys(this.responses).length > 1\r\n        ? html`<div class='row' style='flex-wrap:wrap'>\r\n          ${Object.keys(this.responses).map((respStatus) => html`\r\n            ${respStatus === '$$ref' // Swagger-Client parser creates '$$ref' object if JSON references are used to create responses - this should be ignored\r\n              ? ''\r\n              : html`\r\n                <button \r\n                  @click=\"${() => {\r\n                    this.selectedStatus = respStatus;\r\n                    if (this.responses[respStatus].content && Object.keys(this.responses[respStatus].content)[0]) {\r\n                      this.selectedMimeType = Object.keys(this.responses[respStatus].content)[0]; // eslint-disable-line prefer-destructuring\r\n                    } else {\r\n                      this.selectedMimeType = undefined;\r\n                    }\r\n                  }}\"\r\n                  class='m-btn small ${this.selectedStatus === respStatus ? 'primary' : ''}'\r\n                  part=\"btn ${this.selectedStatus === respStatus ? 'btn-response-status btn-selected-response-status' : ' btn-response-status'}\"\r\n                  style='margin: 8px 4px 0 0'\r\n                > \r\n                  ${respStatus} \r\n                </button>`\r\n              }`)\r\n          }`\r\n        : html`<span>${Object.keys(this.responses)[0]}</span>`\r\n      }\r\n      </div>\r\n\r\n      ${Object.keys(this.responses).map((status) => html`\r\n        <div style = 'display: ${status === this.selectedStatus ? 'block' : 'none'}' >\r\n          <div class=\"top-gap\">\r\n            <span class=\"resp-descr m-markdown \">${unsafeHTML(marked(this.responses[status]?.description || ''))}</span>\r\n            ${(this.headersForEachRespStatus[status] && this.headersForEachRespStatus[status]?.length > 0)\r\n              ? html`${this.responseHeaderListTemplate(this.headersForEachRespStatus[status])}`\r\n              : ''\r\n            }\r\n          </div>\r\n          ${Object.keys(this.mimeResponsesForEachStatus[status]).length === 0\r\n            ? ''\r\n            : html`  \r\n              <div class=\"tab-panel col\">\r\n                <div class=\"tab-buttons row\" @click=\"${(e) => { if (e.target.tagName.toLowerCase() === 'button') { this.activeSchemaTab = e.target.dataset.tab; } }}\" >\r\n                  <button class=\"tab-btn ${this.activeSchemaTab === 'example' ? 'active' : ''}\" data-tab = 'example'>EXAMPLE </button>\r\n                  <button class=\"tab-btn ${this.activeSchemaTab !== 'example' ? 'active' : ''}\" data-tab = 'schema' >SCHEMA</button>\r\n                  <div style=\"flex:1\"></div>\r\n                  ${Object.keys(this.mimeResponsesForEachStatus[status]).length === 1\r\n                    ? html`<span class='small-font-size gray-text' style='align-self:center; margin-top:8px;'> ${Object.keys(this.mimeResponsesForEachStatus[status])[0]} </span>`\r\n                    : html`${this.mimeTypeDropdownTemplate(Object.keys(this.mimeResponsesForEachStatus[status]))}`\r\n                  }\r\n                </div>\r\n                ${this.activeSchemaTab === 'example'\r\n                  ? html`<div class ='tab-content col' style = 'flex:1;'>\r\n                      ${this.mimeExampleTemplate(this.mimeResponsesForEachStatus[status][this.selectedMimeType])}\r\n                    </div>`\r\n                  : html`<div class ='tab-content col' style = 'flex:1;'>\r\n                      ${this.mimeSchemaTemplate(this.mimeResponsesForEachStatus[status][this.selectedMimeType])}\r\n                    </div>`\r\n                }\r\n              </div>\r\n            `\r\n          }`)\r\n        }\r\n    `;\r\n  }\r\n\r\n  responseHeaderListTemplate(respHeaders) {\r\n    return html`\r\n      <div style=\"padding:16px 0 8px 0\" class=\"resp-headers small-font-size bold-text\">RESPONSE HEADERS</div> \r\n      <table role=\"presentation\" style=\"border-collapse: collapse; margin-bottom:16px; border:1px solid var(--border-color); border-radius: var(--border-radius)\" class=\"small-font-size mono-font\">\r\n        ${respHeaders.map((v) => html`\r\n          <tr>\r\n            <td style=\"padding:8px; vertical-align: baseline; min-width:120px; border-top: 1px solid var(--light-border-color); text-overflow: ellipsis;\">\r\n              ${v.name || ''}\r\n            </td> \r\n            <td style=\"padding:4px; vertical-align: baseline; padding:0 5px; border-top: 1px solid var(--light-border-color); text-overflow: ellipsis;\">\r\n              ${v.schema?.type || ''}\r\n            </td> \r\n            <td style=\"padding:8px; vertical-align: baseline; border-top: 1px solid var(--light-border-color);text-overflow: ellipsis;\">\r\n              <div class=\"m-markdown-small regular-font\" >${unsafeHTML(marked(v.description || ''))}</div>\r\n            </td>\r\n            <td style=\"padding:8px; vertical-align: baseline; border-top: 1px solid var(--light-border-color); text-overflow: ellipsis;\">\r\n              ${v.schema?.example || ''}\r\n            </td>\r\n          </tr>\r\n        `)}\r\n    </table>`;\r\n  }\r\n\r\n  mimeTypeDropdownTemplate(mimeTypes) {\r\n    return html`\r\n      <select aria-label='mime types' @change=\"${(e) => { this.selectedMimeType = e.target.value; }}\" style='margin-bottom: -1px; z-index:1'>\r\n        ${mimeTypes.map((mimeType) => html`<option value='${mimeType}' ?selected = '${mimeType === this.selectedMimeType}'> ${mimeType} </option>`)}\r\n      </select>`;\r\n  }\r\n\r\n  onSelectExample(e) {\r\n    const exampleContainerEl = e.target.closest('.example-panel');\r\n    const exampleEls = [...exampleContainerEl.querySelectorAll('.example')];\r\n\r\n    exampleEls.forEach((v) => {\r\n      v.style.display = v.dataset.example === e.target.value ? 'block' : 'none';\r\n    });\r\n  }\r\n\r\n  mimeExampleTemplate(mimeRespDetails) {\r\n    if (!mimeRespDetails) {\r\n      return html`\r\n        <pre style='color:var(--red)' class = '${this.renderStyle === 'read' ? 'read example-panel border pad-8-16' : 'example-panel border-top'}'> No example provided </pre>\r\n      `;\r\n    }\r\n    return html`\r\n      ${mimeRespDetails.examples.length === 1\r\n        ? html`\r\n          ${mimeRespDetails.examples[0].exampleFormat === 'json'\r\n            ? html`\r\n              ${mimeRespDetails.examples[0].exampleSummary && mimeRespDetails.examples[0].exampleSummary.length > 80 ? html`<div style=\"padding: 4px 0\"> ${mimeRespDetails.examples[0].exampleSummary} </div>` : ''}\r\n              ${mimeRespDetails.examples[0].exampleDescription ? html`<div class=\"m-markdown-small\" style=\"padding: 4px 0\"> ${unsafeHTML(marked(mimeRespDetails.examples[0].exampleDescription || ''))} </div>` : ''}\r\n              <json-tree \r\n                render-style = '${this.renderStyle}'\r\n                .data=\"${mimeRespDetails.examples[0].exampleValue}\"\r\n                class = 'example-panel ${this.renderStyle === 'read' ? 'border pad-8-16' : 'border-top pad-top-8'}'\r\n                exportparts = \"btn:btn, btn-fill:btn-fill, btn-copy:btn-copy\" \r\n              ></json-tree>`\r\n            : html`\r\n              ${mimeRespDetails.examples[0].exampleSummary && mimeRespDetails.examples[0].exampleSummary.length > 80 ? html`<div style=\"padding: 4px 0\"> ${mimeRespDetails.examples[0].exampleSummary} </div>` : ''}\r\n              ${mimeRespDetails.examples[0].exampleDescription ? html`<div class=\"m-markdown-small\" style=\"padding: 4px 0\"> ${unsafeHTML(marked(mimeRespDetails.examples[0].exampleDescription || ''))} </div>` : ''}\r\n              <pre class = 'example-panel ${this.renderStyle === 'read' ? 'border pad-8-16' : 'border-top pad-top-8'}'>${mimeRespDetails.examples[0].exampleValue}</pre>\r\n            `\r\n          }`\r\n        : html`\r\n          <span class = 'example-panel ${this.renderStyle === 'read' ? 'border pad-8-16' : 'border-top pad-top-8'}'>\r\n            <select aria-label='response examples' style=\"min-width:100px; max-width:100%\" @change='${(e) => this.onSelectExample(e)}'>\r\n              ${mimeRespDetails.examples.map((v) => html`<option value=\"${v.exampleId}\" ?selected=${v.exampleId === mimeRespDetails.selectedExample} > \r\n                ${v.exampleSummary.length > 80 ? v.exampleId : v.exampleSummary} \r\n              </option>`)}\r\n            </select>\r\n            ${mimeRespDetails.examples.map((v) => html`\r\n              <div class=\"example\" data-example = '${v.exampleId}' style = \"display: ${v.exampleId === mimeRespDetails.selectedExample ? 'block' : 'none'}\">\r\n                ${v.exampleSummary && v.exampleSummary.length > 80 ? html`<div style=\"padding: 4px 0\"> ${v.exampleSummary} </div>` : ''}\r\n                ${v.exampleDescription ? html`<div class=\"m-markdown-small\"  style=\"padding: 4px 0\"> ${unsafeHTML(marked(v.exampleDescription || ''))} </div>` : ''}\r\n                ${v.exampleFormat === 'json'\r\n                  ? html`\r\n                    <json-tree \r\n                      render-style = '${this.renderStyle}'\r\n                      .data = '${v.exampleValue}'\r\n                      exportparts = \"btn:btn, btn-fill:btn-fill, btn-copy:btn-copy\" \r\n                    ></json-tree>`\r\n                  : html`<pre>${v.exampleValue}</pre>`\r\n                }\r\n              </div>  \r\n            `)}\r\n          </span>  \r\n        `\r\n      }\r\n    `;\r\n  }\r\n\r\n  mimeSchemaTemplate(mimeRespDetails) {\r\n    if (!mimeRespDetails) {\r\n      return html`\r\n        <pre style='color:var(--red)' class = '${this.renderStyle === 'read' ? 'border pad-8-16' : 'border-top'}'> Schema not found</pre>\r\n      `;\r\n    }\r\n    return html`\r\n      ${this.schemaStyle === 'table'\r\n        ? html`\r\n          <schema-table\r\n            .data = \"${mimeRespDetails.schemaTree}\"\r\n            schema-expand-level = \"${this.schemaExpandLevel}\"\r\n            schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n            allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n            schema-hide-read-only = \"${this.schemaHideReadOnly}\"\r\n            schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\r\n            exportparts = \"schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n          > </schema-table> `\r\n        : html`\r\n          <schema-tree\r\n            .data = '${mimeRespDetails.schemaTree}'\r\n            schema-expand-level = \"${this.schemaExpandLevel}\"\r\n            schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n            allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n            schema-hide-read-only = \"${this.schemaHideReadOnly}\"\r\n            schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\r\n            exportparts = \"schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\r\n          > </schema-tree>`\r\n      }`;\r\n  }\r\n  /* eslint-enable indent */\r\n}\r\n\r\n// Register the element with the browser\r\ncustomElements.define('api-response', ApiResponse);\r\n","import { html } from 'lit';\r\nimport '~/components/dialog-box';\r\n\r\n/* eslint-disable indent */\r\nexport default function searchByPropertiesModalTemplate() {\r\n  document.addEventListener('close', () => { this.showAdvancedSearchDialog = false; });\r\n  document.addEventListener('open', this.onOpenSearchDialog);\r\n\r\n  return html`\r\n    <dialog-box \r\n      heading=\"Search\" \r\n      show=\"${(!!this.showAdvancedSearchDialog)}\"\r\n    >\r\n      <span class=\"advanced-search-options\">\r\n        <input\r\n          style=\"width:100%; padding-right:20px;\"\r\n          type=\"text\"\r\n          part=\"textbox textbox-search-dialog\"\r\n          placeholder=\"search text...\"\r\n          spellcheck=\"false\"\r\n          @keyup = \"${(e) => this.onAdvancedSearch(e, 400)}\"\r\n        >\r\n        <div style=\"display:flex; margin:8px 0 24px;\">\r\n          <div>\r\n            <input style=\"cursor:pointer;\" type=\"checkbox\" part=\"checkbox checkbox-search-dialog\" id=\"search-api-path\" checked @change = \"${(e) => this.onAdvancedSearch(e, 0)}\">\r\n            <label for=\"search-api-path\" style=\"cursor:pointer;\"> API Path </label>\r\n            </div>\r\n          <div style=\"margin-left: 16px;\">\r\n            <input style=\"cursor:pointer;\" type=\"checkbox\" part=\"checkbox checkbox-search-dialog\" id=\"search-api-descr\" checked @change = \"${(e) => this.onAdvancedSearch(e, 0)}\">\r\n            <label style=\"cursor:pointer;\" for=\"search-api-descr\"> API Description </label>\r\n          </div>\r\n          <div style=\"margin-left: 16px;\">\r\n            <input style=\"cursor:pointer;\" type=\"checkbox\" part=\"checkbox checkbox-search-dialog\" id=\"search-api-params\" @change = \"${(e) => this.onAdvancedSearch(e, 0)}\">\r\n            <label style=\"cursor:pointer;\" for=\"search-api-params\"> API Parameters </label>\r\n          </div>\r\n          <div style=\"margin-left: 16px;\">\r\n            <input style=\"cursor:pointer;\" type=\"checkbox\" part=\"checkbox checkbox-search-dialog\" id=\"search-api-request-body\" @change = \"${(e) => this.onAdvancedSearch(e, 0)}\">\r\n            <label style=\"cursor:pointer;\" for=\"search-api-request-body\"> Request Body Parameters </label>\r\n          </div>\r\n          <div style=\"margin-left: 16px;\">\r\n            <input style=\"cursor:pointer;\" type=\"checkbox\" part=\"checkbox checkbox-search-dialog\" id=\"search-api-resp-descr\" @change = \"${(e) => this.onAdvancedSearch(e, 0)}\">\r\n            <label style=\"cursor:pointer;\" for=\"search-api-resp-descr\"> Response Description </label>\r\n          </div>\r\n        </div>\r\n      </span>\r\n      \r\n      ${this.advancedSearchMatches?.map((path) => html`\r\n      <div\r\n        class=\"mono-font small-font-size hover-bg\"\r\n        style='padding: 5px; cursor: pointer; border-bottom: 1px solid var(--light-border-color); ${path.deprecated ? 'filter:opacity(0.5);' : ''}' \r\n        data-content-id='${path.elementId}'\r\n        tabindex = '0'\r\n        @click=\"${\r\n          (e) => {\r\n            this.matchPaths = ''; // clear quick filter if applied\r\n            this.showAdvancedSearchDialog = false; // Hide Search Dialog\r\n            this.requestUpdate();\r\n            this.scrollToEventTarget(e, true);\r\n          }\r\n        }\"\r\n      > \r\n        <span class=\"upper bold-text method-fg ${path.method}\">${path.method}</span> \r\n        <span>${path.path}</span>\r\n        <span class=\"regular-font gray-text\">${path.summary}</span>\r\n      </div>\r\n    `)\r\n    }\r\n    </dialog-box>\r\n  `;\r\n}\r\n/* eslint-enable indent */\r\n","import { LitElement, html } from 'lit';\r\nimport DialogBoxStyles from '~/styles/dialog-box-styles';\r\n\r\nexport default class DialogBox extends LitElement {\r\n  static get properties() {\r\n    return {\r\n      heading: { type: String, attribute: 'heading' },\r\n      show: { type: String, attribute: 'show' },\r\n    };\r\n  }\r\n\r\n  static get styles() {\r\n    return [DialogBoxStyles];\r\n  }\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    document.addEventListener('keydown', (e) => {\r\n      if (e.code === 'Escape') {\r\n        this.onClose();\r\n      }\r\n    });\r\n  }\r\n\r\n  attributeChangedCallback(name, oldVal, newVal) {\r\n    if (oldVal !== newVal) {\r\n      if (name === 'heading') {\r\n        this.heading = newVal;\r\n      }\r\n      if (name === 'show') {\r\n        this.show = newVal;\r\n        if (newVal === 'true') {\r\n          document.dispatchEvent(new CustomEvent('open', {\r\n            bubbles: true,\r\n            composed: true,\r\n            detail: this,\r\n          }));\r\n        }\r\n      }\r\n    }\r\n    super.attributeChangedCallback(name, oldVal, newVal);\r\n  }\r\n\r\n  /* eslint-disable indent */\r\n  render() {\r\n    return html`\r\n    ${this.show === 'true'\r\n      ? html`\r\n        <div class=\"dialog-box-overlay\">\r\n          <div class=\"dialog-box\">\r\n            <header class=\"dialog-box-header\">\r\n              <span class=\"dialog-box-title\">${this.heading}</span>\r\n              <button type=\"button\" @click=\"${this.onClose}\">&times;</button>\r\n            </header>\r\n            <div class=\"dialog-box-content\">\r\n              <slot></slot>\r\n            </div>\r\n          </div>\r\n        </div>`\r\n      : ''\r\n    }`;\r\n  }\r\n  /* eslint-enable indent */\r\n\r\n  onClose() {\r\n    document.dispatchEvent(new CustomEvent('close', {\r\n      bubbles: true,\r\n      composed: true,\r\n    }));\r\n  }\r\n}\r\n\r\ncustomElements.define('dialog-box', DialogBox);\r\n","import { html } from 'lit';\r\nimport ColorUtils from '~/utils/color-utils';\r\n/* Generates an schema object containing type and constraint info */\r\nexport default function setTheme(baseTheme, theme = {}) {\r\n  let newTheme = {};\r\n\r\n  // Common Theme colors\r\n  const primaryColor = theme.primaryColor ? theme.primaryColor : baseTheme === 'dark' ? '#1546cf' : '#ff591e';\r\n  const primaryColorInvert = ColorUtils.color.invert(primaryColor);\r\n  const primaryColorTrans = ColorUtils.color.opacity(primaryColor, '0.4');\r\n\r\n  // Dark and Light Theme colors\r\n  if (baseTheme === 'dark') {\r\n    const bg1 = theme.bg1 ? theme.bg1 : '#2a2b2c';\r\n    const fg1 = theme.fg1 ? theme.fg1 : '#bbb';\r\n\r\n    const bg2 = theme.bg2 ? theme.bg2 : ColorUtils.color.brightness(bg1, 5); // or #383838;\r\n    const bg3 = theme.bg3 ? theme.bg3 : ColorUtils.color.brightness(bg1, 17); // or #444;\r\n    const lightBg = theme.bg3 ? theme.bg3 : ColorUtils.color.brightness(bg1, 35);\r\n    const fg2 = theme.fg2 ? theme.fg2 : ColorUtils.color.brightness(fg1, -15); // or #ababab\r\n    const fg3 = theme.fg3 ? theme.fg3 : ColorUtils.color.brightness(fg1, -20); // or #aaa\r\n    const lightFg = theme.fg3 ? theme.fg3 : ColorUtils.color.brightness(fg1, -65); // or #777\r\n    const inlineCodeFg = theme.inlineCodeFg ? theme.inlineCodeFg : '#aaa';\r\n    const selectionBg = '#bbb';\r\n    const selectionFg = '#eee';\r\n\r\n    const headerColor = theme.headerColor ? theme.headerColor : ColorUtils.color.brightness(bg1, 10);\r\n\r\n    const navBgColor = theme.navBgColor ? theme.navBgColor : ColorUtils.color.brightness(bg1, 10);\r\n    const navTextColor = theme.navTextColor ? theme.navTextColor : ColorUtils.color.opacity(ColorUtils.color.invert(navBgColor), '0.50');\r\n    const navHoverBgColor = theme.navHoverBgColor ? theme.navHoverBgColor : ColorUtils.color.brightness(navBgColor, -15);\r\n    const navHoverTextColor = theme.navHoverTextColor ? theme.navHoverTextColor : ColorUtils.color.invert(navBgColor);\r\n    const navAccentColor = theme.navAccentColor ? theme.navAccentColor : ColorUtils.color.brightness(primaryColor, 25);\r\n    const navAccentTextColor = theme.navAccentTextColor ? theme.navAccenttextColor : ColorUtils.color.invert(navAccentColor);\r\n\r\n    const overlayBg = 'rgba(80, 80, 80, 0.4)';\r\n\r\n    newTheme = {\r\n      bg1,\r\n      bg2,\r\n      bg3,\r\n      lightBg,\r\n      fg1,\r\n      fg2,\r\n      fg3,\r\n      lightFg,\r\n      inlineCodeFg,\r\n      primaryColor,\r\n      primaryColorTrans,\r\n      primaryColorInvert,\r\n      selectionBg,\r\n      selectionFg,\r\n      overlayBg,\r\n      navBgColor,\r\n      navTextColor,\r\n      navHoverBgColor,\r\n      navHoverTextColor,\r\n      navAccentColor,\r\n      navAccentTextColor,\r\n      headerColor,\r\n      headerColorInvert: ColorUtils.color.invert(headerColor),\r\n      headerColorDarker: ColorUtils.color.brightness(headerColor, -20),\r\n      headerColorBorder: ColorUtils.color.brightness(headerColor, 10),\r\n\r\n      borderColor: theme.borderColor || ColorUtils.color.brightness(bg1, 20), // #555\r\n      lightBorderColor: theme.lightBorderColor || ColorUtils.color.brightness(bg1, 15), // #444\r\n      codeBorderColor: theme.codeBorderColor || ColorUtils.color.brightness(bg1, 30),\r\n\r\n      inputBg: theme.inputBg || ColorUtils.color.brightness(bg1, -5), // #2f2f2f\r\n      placeHolder: theme.placeHolder || ColorUtils.color.opacity(fg1, '0.3'),\r\n      hoverColor: theme.hoverColor || ColorUtils.color.brightness(bg1, -10), // #2a2a2a\r\n\r\n      red: theme.red ? theme.red : '#F06560',\r\n      lightRed: theme.lightRed ? theme.lightRed : ColorUtils.color.brightness(bg1, -10), // #2a2a2a\r\n\r\n      pink: theme.pink ? theme.pink : '#ffb2b2',\r\n      lightPink: theme.lightPink || ColorUtils.color.brightness(bg1, -10),\r\n\r\n      green: theme.green || '#7ec699',\r\n      lightGreen: theme.lightGreen || ColorUtils.color.brightness(bg1, -10), // #2a2a2a\r\n\r\n      blue: theme.blue || '#71b7ff',\r\n      lightBlue: theme.lightBlue || ColorUtils.color.brightness(bg1, -10), // #2a2a2a\r\n\r\n      orange: theme.orange ? theme.orange : '#f08d49',\r\n      lightOrange: theme.lightOrange || ColorUtils.color.brightness(bg1, -10), // #2a2a2a\r\n\r\n      yellow: theme.yellow || '#827717',\r\n      lightYellow: theme.lightYellow || ColorUtils.color.brightness(bg1, -10), // #2a2a2a\r\n\r\n      purple: theme.purple || '#786FF1',\r\n      brown: theme.brown || '#D4AC0D',\r\n\r\n      codeBg: theme.codeBg || ColorUtils.color.opacity(ColorUtils.color.brightness(bg1, -15), 0.7),\r\n      codeFg: theme.codeFg || '#aaa',\r\n      codePropertyColor: theme.codePropertyColor || '#f8c555',\r\n      codeKeywordColor: theme.codeKeywordColor || '#cc99cd',\r\n      codeOperatorColor: theme.codeOperatorColor || '#67cdcc',\r\n    };\r\n  } else {\r\n    const bg1 = (theme.bg1 ? theme.bg1 : '#fafbfc');\r\n    const fg1 = (theme.fg1 ? theme.fg1 : '#444444');\r\n    const bg2 = theme.bg2 ? theme.bg2 : ColorUtils.color.brightness(bg1, -5); // or '#fafafa'\r\n    const bg3 = theme.bg3 ? theme.bg3 : ColorUtils.color.brightness(bg1, -15); // or '#f6f6f6'\r\n    const lightBg = theme.bg3 ? theme.bg3 : ColorUtils.color.brightness(bg1, -45);\r\n    const fg2 = theme.fg2 ? theme.fg2 : ColorUtils.color.brightness(fg1, 17); // or '#555'\r\n    const fg3 = theme.fg3 ? theme.fg3 : ColorUtils.color.brightness(fg1, 30); // or #666\r\n    const lightFg = theme.fg3 ? theme.fg3 : ColorUtils.color.brightness(fg1, 70); // or #999\r\n    const inlineCodeFg = theme.inlineCodeFg ? theme.inlineCodeFg : 'brown';\r\n\r\n    const selectionBg = '#444';\r\n    const selectionFg = '#eee';\r\n\r\n    const headerColor = theme.headerColor ? theme.headerColor : ColorUtils.color.brightness(bg1, -180);\r\n\r\n    /*\r\n    const navBgColor = theme.navBgColor ? theme.navBgColor : ColorUtils.color.brightness(bg1, -10);\r\n    const navTextColor = theme.navTextColor ? theme.navTextColor : ColorUtils.color.brightness(fg1, 5);\r\n    const navHoverBgColor = theme.navHoverBgColor ? theme.navHoverBgColor : bg1;\r\n    const navHoverTextColor = theme.navHoverTextColor ? theme.navHoverTextColor : primaryColor;\r\n    const navAccentColor = theme.navAccentColor ? theme.navAccentColor : primaryColor;\r\n    */\r\n    const navBgColor = theme.navBgColor ? theme.navBgColor : ColorUtils.color.brightness(bg1, -200);\r\n    const navTextColor = theme.navTextColor ? theme.navTextColor : ColorUtils.color.opacity(ColorUtils.color.invert(navBgColor), '0.65');\r\n    const navHoverBgColor = theme.navHoverBgColor ? theme.navHoverBgColor : ColorUtils.color.brightness(navBgColor, -15);\r\n    const navHoverTextColor = theme.navHoverTextColor ? theme.navHoverTextColor : ColorUtils.color.invert(navBgColor);\r\n    const navAccentColor = theme.navAccentColor ? theme.navAccentColor : ColorUtils.color.brightness(primaryColor, 25);\r\n    const navAccentTextColor = theme.navAccentTextColor ? theme.navAccenttextColor : ColorUtils.color.invert(navAccentColor);\r\n    const overlayBg = 'rgba(0, 0, 0, 0.4)';\r\n\r\n    newTheme = {\r\n      bg1,\r\n      bg2,\r\n      bg3,\r\n      lightBg,\r\n      fg1,\r\n      fg2,\r\n      fg3,\r\n      lightFg,\r\n      inlineCodeFg,\r\n      primaryColor,\r\n      primaryColorTrans,\r\n      primaryColorInvert,\r\n      selectionBg,\r\n      selectionFg,\r\n      overlayBg,\r\n      navBgColor,\r\n      navTextColor,\r\n      navHoverBgColor,\r\n      navHoverTextColor,\r\n      navAccentColor,\r\n      navAccentTextColor,\r\n      headerColor,\r\n      headerColorInvert: ColorUtils.color.invert(headerColor),\r\n      headerColorDarker: ColorUtils.color.brightness(headerColor, -20),\r\n      headerColorBorder: ColorUtils.color.brightness(headerColor, 10),\r\n\r\n      borderColor: theme.borderColor || ColorUtils.color.brightness(bg1, -38),\r\n      lightBorderColor: theme.lightBorderColor || ColorUtils.color.brightness(bg1, -23),\r\n      codeBorderColor: theme.codeBorderColor || 'transparent',\r\n\r\n      inputBg: theme.inputBg || ColorUtils.color.brightness(bg1, 10), // #fff\r\n      placeHolder: theme.placeHolder || ColorUtils.color.brightness(lightFg, 20), // #dedede\r\n      hoverColor: theme.hoverColor || ColorUtils.color.brightness(bg1, -5), // # f1f1f1\r\n\r\n      red: theme.red || '#F06560',\r\n      lightRed: theme.lightRed || '#fff0f0',\r\n\r\n      pink: theme.pink ? theme.pink : '#990055',\r\n      lightPink: theme.lightPink ? theme.lightPink : '#ffb2b2',\r\n\r\n      green: theme.green || '#690',\r\n      lightGreen: theme.lightGreen || '#fbfff0',\r\n\r\n      blue: theme.blue || '#47AFE8',\r\n      lightBlue: theme.lightBlue || '#eff8fd',\r\n\r\n      orange: theme.orange || '#FF9900',\r\n      lightOrange: theme.lightOrange || '#fff5e6',\r\n\r\n      yellow: theme.yellow || '#827717',\r\n      lightYellow: theme.lightYellow || '#fff5cc',\r\n\r\n      purple: theme.purple || '#786FF1',\r\n      brown: theme.brown || '#D4AC0D',\r\n\r\n      codeBg: theme.codeBg || ColorUtils.color.opacity(ColorUtils.color.brightness(bg1, -15), 0.7),\r\n      codeFg: theme.codeFg || '#666',\r\n      codePropertyColor: theme.codePropertyColor || '#905',\r\n      codeKeywordColor: theme.codeKeywordColor || '#07a',\r\n      codeOperatorColor: theme.codeOperatorColor || '#9a6e3a',\r\n    };\r\n  }\r\n  return html`\r\n  <style>\r\n  *, *:before, *:after { box-sizing: border-box; }\r\n  \r\n  :host {\r\n    /* Common Styles - irrespective of themes */  \r\n    --border-radius: 2px;\r\n    --layout: ${this.layout || 'row'};\r\n    --font-mono: ${this.monoFont || 'Monaco, \"Andale Mono\", \"Roboto Mono\", Consolas, monospace'};\r\n    --font-regular: ${this.regularFont || '\"Open Sans\", Avenir, \"Segoe UI\", Arial, sans-serif'};\r\n    --scroll-bar-width: 8px;\r\n    --nav-item-padding: ${this.navItemSpacing === 'relaxed'\r\n    ? '10px 16px 10px 10px'\r\n    : (this.navItemSpacing === 'compact'\r\n      ? '5px 16px 5px 10px'\r\n      : '7px 16px 7px 10px')};\r\n    \r\n    --resp-area-height: ${this.responseAreaHeight};\r\n    --font-size-small: ${this.fontSize === 'default' ? '12px' : (this.fontSize === 'large' ? '13px' : '14px')};\r\n    --font-size-mono: ${this.fontSize === 'default' ? '13px' : (this.fontSize === 'large' ? '14px' : '15px')};\r\n    --font-size-regular: ${this.fontSize === 'default' ? '14px' : (this.fontSize === 'large' ? '15px' : '16px')};\r\n    --dialog-z-index: 1000;\r\n\r\n    --focus-shadow: 0 0 0 1px transparent, 0 0 0 3px ${newTheme.primaryColorTrans};\r\n\r\n    /* Theme specific styles */  \r\n    --bg:${newTheme.bg1};\r\n    --bg2:${newTheme.bg2};\r\n    --bg3:${newTheme.bg3};\r\n    --light-bg:${newTheme.lightBg};\r\n    --fg:${newTheme.fg1};\r\n    --fg2:${newTheme.fg2};\r\n    --fg3:${newTheme.fg3};\r\n    --light-fg:${newTheme.lightFg};\r\n    --selection-bg:${newTheme.selectionBg};\r\n    --selection-fg:${newTheme.selectionFg};\r\n    --overlay-bg:${newTheme.overlayBg};\r\n    \r\n    /* Border Colors */\r\n    --border-color:${newTheme.borderColor};\r\n    --light-border-color:${newTheme.lightBorderColor};\r\n    --code-border-color:${newTheme.codeBorderColor};\r\n\r\n    --input-bg:${newTheme.inputBg};\r\n    --placeholder-color:${newTheme.placeHolder};\r\n    --hover-color:${newTheme.hoverColor};\r\n    --red:${newTheme.red};\r\n    --light-red:${newTheme.lightRed};\r\n    --pink:${newTheme.pink};\r\n    --light-pink:${newTheme.lightPink};\r\n    --green:${newTheme.green};\r\n    --light-green:${newTheme.lightGreen};\r\n    --blue:${newTheme.blue};\r\n    --light-blue:${newTheme.lightBlue};\r\n    --orange:${newTheme.orange};\r\n    --light-orange:${newTheme.lightOrange};\r\n    --yellow:${newTheme.yellow};\r\n    --light-yellow:${newTheme.lightYellow};\r\n    --purple:${newTheme.purple};\r\n    --brown:${newTheme.brown};\r\n\r\n    /* Header Color */\r\n    --header-bg:${newTheme.headerColor};\r\n    --header-fg:${newTheme.headerColorInvert};\r\n    --header-color-darker:${newTheme.headerColorDarker};\r\n    --header-color-border:${newTheme.headerColorBorder};\r\n\r\n    /* Nav Colors */  \r\n    --nav-bg-color:${newTheme.navBgColor};\r\n    --nav-text-color:${newTheme.navTextColor};\r\n    --nav-hover-bg-color:${newTheme.navHoverBgColor};\r\n    --nav-hover-text-color:${newTheme.navHoverTextColor};\r\n    --nav-accent-color:${newTheme.navAccentColor};\r\n    --nav-accent-text-color:${newTheme.navAccentTextColor};\r\n\r\n    /* Nav API Method Colors*/\r\n    --nav-get-color:${newTheme.blue};\r\n    --nav-put-color:${newTheme.orange};\r\n    --nav-post-color:${newTheme.green};\r\n    --nav-delete-color:${newTheme.red};\r\n    --nav-head-color:${newTheme.yellow};\r\n\r\n    /* Primary Colors */  \r\n    --primary-color:${newTheme.primaryColor};\r\n    --primary-color-invert:${newTheme.primaryColorInvert};\r\n    --primary-color-trans:${newTheme.primaryColorTrans};\r\n\r\n    /*Code Syntax Color*/\r\n    --code-bg:${newTheme.codeBg};\r\n    --code-fg:${newTheme.codeFg};\r\n    --inline-code-fg:${newTheme.inlineCodeFg};\r\n    --code-property-color:${newTheme.codePropertyColor};\r\n    --code-keyword-color:${newTheme.codeKeywordColor};\r\n    --code-operator-color:${newTheme.codeOperatorColor};\r\n  }\r\n  </style>`;\r\n}\r\n","import { html } from 'lit';\r\n\r\n// Templates\r\nimport expandedEndpointTemplate from '~/templates/expanded-endpoint-template';\r\nimport focusedEndpointTemplate from '~/templates/focused-endpoint-template';\r\nimport overviewTemplate from '~/templates/overview-template';\r\nimport endpointTemplate from '~/templates/endpoint-template';\r\nimport serverTemplate from '~/templates/server-template';\r\nimport securitySchemeTemplate, { recoverPersistedApiKeys } from '~/templates/security-scheme-template';\r\nimport headerTemplate from '~/templates/header-template';\r\nimport navbarTemplate from '~/templates/navbar-template';\r\nimport advancedSearchTemplate from '~/templates/advance-search-template';\r\nimport SetTheme from '~/utils/theme';\r\nimport { isValidHexColor } from '~/utils/color-utils';\r\n\r\nexport default function mainBodyTemplate(isMini = false, showExpandCollapse = true, showTags = true, pathsExpanded = false) {\r\n  if (!this.resolvedSpec) {\r\n    return '';\r\n  }\r\n  if (this.persistAuth === 'true') {\r\n    recoverPersistedApiKeys.call(this);\r\n  }\r\n  const newTheme = {\r\n    bg1: isValidHexColor(this.bgColor) ? this.bgColor : '',\r\n    fg1: isValidHexColor(this.textColor) ? this.textColor : '',\r\n    headerColor: isValidHexColor(this.headerColor) ? this.headerColor : '',\r\n    primaryColor: isValidHexColor(this.primaryColor) ? this.primaryColor : '',\r\n    navBgColor: isValidHexColor(this.navBgColor) ? this.navBgColor : '',\r\n    navTextColor: isValidHexColor(this.navTextColor) ? this.navTextColor : '',\r\n    navHoverBgColor: isValidHexColor(this.navHoverBgColor) ? this.navHoverBgColor : '',\r\n    navHoverTextColor: isValidHexColor(this.navHoverTextColor) ? this.navHoverTextColor : '',\r\n    navAccentColor: isValidHexColor(this.navAccentColor) ? this.navAccentColor : '',\r\n    navAccentTextColor: isValidHexColor(this.navAccentTextColor) ? this.navAccentTextColor : '',\r\n  };\r\n  /* eslint-disable indent */\r\n  if (this.resolvedSpec.specLoadError) {\r\n    if (isMini) {\r\n      return html`\r\n        ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\r\n        <div style='display:flex; align-items:center; border:1px dashed var(--border-color); height:42px; padding:5px; font-size:var(--font-size-small); color:var(--red); font-family:var(--font-mono)'> ${this.resolvedSpec.info.description} </div>\r\n      `;\r\n    }\r\n    return html`\r\n      ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\r\n      <!-- Header -->\r\n      ${headerTemplate.call(this)}\r\n      <main class='main-content regular-font' part='section-main-content'>\r\n        <slot></slot>\r\n        <div style='margin:24px; text-align: center;'>\r\n          <h1 style='color: var(--red)'> ${this.resolvedSpec.info.title} </h1>\r\n          <div style='font-family:var(--font-mono)'> ${this.resolvedSpec.info.description} </div>\r\n        </div>\r\n      </main>  \r\n    `;\r\n  }\r\n  if (this.resolvedSpec.isSpecLoading) {\r\n    return html`\r\n      ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\r\n      <main class='main-content regular-font' part='section-main-content'>\r\n        <slot></slot>\r\n        <div class='main-content-inner--${this.renderStyle}-mode'>\r\n          <div class='loader'></div>\r\n        </div>\r\n      </main>\r\n    `;\r\n  }\r\n\r\n  return html`\r\n    ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\r\n\r\n    <!-- Header -->\r\n    ${this.showHeader === 'false' ? '' : headerTemplate.call(this)}\r\n    \r\n    <!-- Advanced Search -->\r\n    ${this.allowAdvancedSearch === 'false' ? '' : advancedSearchTemplate.call(this)}\r\n\r\n    <div id='the-main-body' class='body ${this.cssClasses}' dir='${this.pageDirection}' >\r\n      <!-- Side Nav -->\r\n      ${((this.renderStyle === 'read' || this.renderStyle === 'focused')\r\n          && this.showSideNav === 'true'\r\n          && this.resolvedSpec\r\n        ) ? navbarTemplate.call(this) : ''\r\n      }\r\n\r\n      <!-- Main Content -->\r\n      <main class='main-content regular-font' tabindex='-1' part='section-main-content'>\r\n        <slot></slot>\r\n        <div class='main-content-inner--${this.renderStyle}-mode'>\r\n          ${this.loading === true\r\n            ? html`<div class='loader'></div>`\r\n            : html`\r\n              ${this.loadFailed === true\r\n                ? html`<div style='text-align: center;margin: 16px;'> Unable to load the Spec</div>`\r\n                : html`\r\n                  <div class='operations-root' @click='${(e) => { this.handleHref(e); }}'>\r\n                  ${this.renderStyle === 'focused'\r\n                    ? html`${focusedEndpointTemplate.call(this)}`\r\n                    : html`\r\n                      ${this.showInfo === 'true' ? overviewTemplate.call(this) : ''}\r\n                      ${this.allowServerSelection === 'true' ? serverTemplate.call(this) : ''}\r\n                      ${this.allowAuthentication === 'true' ? securitySchemeTemplate.call(this) : ''}\r\n                      <div id='operations-top' class='observe-me'>\r\n                        <slot name='operations-top'></slot>\r\n                      </div>  \r\n                      ${this.renderStyle === 'read'\r\n                        ? expandedEndpointTemplate.call(this)\r\n                        : endpointTemplate.call(this, showExpandCollapse, showTags, pathsExpanded)\r\n                      }\r\n                    `\r\n                  }\r\n                  </div>\r\n                `\r\n              }`\r\n          }\r\n        </div>\r\n        <slot name='footer'></slot>\r\n      </main>\r\n    </div>  \r\n  `;\r\n}\r\n/* eslint-enable indent */\r\n","import { css, LitElement, unsafeCSS } from 'lit';\r\nimport { marked } from 'marked';\r\nimport Prism from 'prismjs';\r\nimport 'prismjs/components/prism-css';\r\nimport 'prismjs/components/prism-yaml';\r\nimport 'prismjs/components/prism-go';\r\nimport 'prismjs/components/prism-java';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-bash';\r\nimport 'prismjs/components/prism-python';\r\nimport 'prismjs/components/prism-http';\r\nimport 'prismjs/components/prism-csharp';\r\n\r\n// Styles\r\nimport FontStyles from '~/styles/font-styles';\r\nimport InputStyles from '~/styles/input-styles';\r\nimport FlexStyles from '~/styles/flex-styles';\r\nimport TableStyles from '~/styles/table-styles';\r\nimport EndpointStyles from '~/styles/endpoint-styles';\r\nimport PrismStyles from '~/styles/prism-styles';\r\nimport TabStyles from '~/styles/tab-styles';\r\nimport NavStyles from '~/styles/nav-styles';\r\nimport InfoStyles from '~/styles/info-styles';\r\nimport CustomStyles from '~/styles/custom-styles';\r\n// import { expandCollapseNavBarTag } from '@/templates/navbar-template';\r\nimport { advancedSearch, pathIsInSearch, componentIsInSearch, rapidocApiKey, sleep } from '~/utils/common-utils';\r\nimport ProcessSpec from '~/utils/spec-parser';\r\nimport mainBodyTemplate from '~/templates/main-body-template';\r\nimport { applyApiKey, onClearAllApiKeys } from '~/templates/security-scheme-template';\r\nimport { setApiServer } from '~/templates/server-template';\r\n\r\nexport default class RapiDoc extends LitElement {\r\n  constructor() {\r\n    super();\r\n    const intersectionObserverOptions = {\r\n      root: this.getRootNode().host,\r\n      rootMargin: '-50px 0px -50px 0px', // when the element is visible 100px from bottom\r\n      threshold: 0,\r\n    };\r\n    this.showSummaryWhenCollapsed = true;\r\n    // Will activate intersection observer only after spec load and hash analyze\r\n    // to scroll to the proper element without being reverted by observer behavior\r\n    this.isIntersectionObserverActive = false;\r\n    this.intersectionObserver = new IntersectionObserver((entries) => { this.onIntersect(entries); }, intersectionObserverOptions);\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      // Heading\r\n      headingText: { type: String, attribute: 'heading-text' },\r\n      gotoPath: { type: String, attribute: 'goto-path' },\r\n\r\n      // Spec\r\n      updateRoute: { type: String, attribute: 'update-route' },\r\n      routePrefix: { type: String, attribute: 'route-prefix' },\r\n      specUrl: { type: String, attribute: 'spec-url' },\r\n      sortTags: { type: String, attribute: 'sort-tags' },\r\n      generateMissingTags: { type: String, attribute: 'generate-missing-tags' },\r\n      sortEndpointsBy: { type: String, attribute: 'sort-endpoints-by' },\r\n      specFile: { type: String, attribute: false },\r\n\r\n      // UI Layouts\r\n      layout: { type: String },\r\n      renderStyle: { type: String, attribute: 'render-style' },\r\n      defaultSchemaTab: { type: String, attribute: 'default-schema-tab' },\r\n      responseAreaHeight: { type: String, attribute: 'response-area-height' },\r\n      fillRequestFieldsWithExample: { type: String, attribute: 'fill-request-fields-with-example' },\r\n      persistAuth: { type: String, attribute: 'persist-auth' },\r\n      onNavTagClick: { type: String, attribute: 'on-nav-tag-click' },\r\n\r\n      // Schema Styles\r\n      schemaStyle: { type: String, attribute: 'schema-style' },\r\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\r\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\r\n      schemaHideReadOnly: { type: String, attribute: 'schema-hide-read-only' },\r\n      schemaHideWriteOnly: { type: String, attribute: 'schema-hide-write-only' },\r\n\r\n      // API Server\r\n      apiKeyName: { type: String, attribute: 'api-key-name' },\r\n      apiKeyLocation: { type: String, attribute: 'api-key-location' },\r\n      apiKeyValue: { type: String, attribute: 'api-key-value' },\r\n      defaultApiServerUrl: { type: String, attribute: 'default-api-server' },\r\n      serverUrl: { type: String, attribute: 'server-url' },\r\n      oauthReceiver: { type: String, attribute: 'oauth-receiver' },\r\n\r\n      // Hide/Show Sections & Enable Disable actions\r\n      showHeader: { type: String, attribute: 'show-header' },\r\n      showSideNav: { type: String, attribute: 'show-side-nav' },\r\n      showInfo: { type: String, attribute: 'show-info' },\r\n      allowAuthentication: { type: String, attribute: 'allow-authentication' },\r\n      allowTry: { type: String, attribute: 'allow-try' },\r\n      showCurlBeforeTry: { type: String, attribute: 'show-curl-before-try' },\r\n      allowSpecUrlLoad: { type: String, attribute: 'allow-spec-url-load' },\r\n      allowSpecFileLoad: { type: String, attribute: 'allow-spec-file-load' },\r\n      allowSpecFileDownload: { type: String, attribute: 'allow-spec-file-download' },\r\n      allowSearch: { type: String, attribute: 'allow-search' },\r\n      allowAdvancedSearch: { type: String, attribute: 'allow-advanced-search' },\r\n      allowServerSelection: { type: String, attribute: 'allow-server-selection' },\r\n      allowSchemaDescriptionExpandToggle: { type: String, attribute: 'allow-schema-description-expand-toggle' },\r\n      showComponents: { type: String, attribute: 'show-components' },\r\n      pageDirection: { type: String, attribute: 'page-direction' },\r\n\r\n      // Main Colors and Font\r\n      theme: { type: String },\r\n      bgColor: { type: String, attribute: 'bg-color' },\r\n      textColor: { type: String, attribute: 'text-color' },\r\n      headerColor: { type: String, attribute: 'header-color' },\r\n      primaryColor: { type: String, attribute: 'primary-color' },\r\n      fontSize: { type: String, attribute: 'font-size' },\r\n      regularFont: { type: String, attribute: 'regular-font' },\r\n      monoFont: { type: String, attribute: 'mono-font' },\r\n      loadFonts: { type: String, attribute: 'load-fonts' },\r\n      cssFile: { type: String, attribute: 'css-file' },\r\n      cssClasses: { type: String, attribute: 'css-classes' },\r\n\r\n      // Nav Bar Colors\r\n      navBgColor: { type: String, attribute: 'nav-bg-color' },\r\n      navTextColor: { type: String, attribute: 'nav-text-color' },\r\n      navHoverBgColor: { type: String, attribute: 'nav-hover-bg-color' },\r\n      navHoverTextColor: { type: String, attribute: 'nav-hover-text-color' },\r\n      navAccentColor: { type: String, attribute: 'nav-accent-color' },\r\n      navAccentTextColor: { type: String, attribute: 'nav-accent-text-color' },\r\n      navActiveItemMarker: { type: String, attribute: 'nav-active-item-marker' },\r\n      navItemSpacing: { type: String, attribute: 'nav-item-spacing' },\r\n      showMethodInNavBar: { type: String, attribute: 'show-method-in-nav-bar' },\r\n      usePathInNavBar: { type: String, attribute: 'use-path-in-nav-bar' },\r\n      infoDescriptionHeadingsInNavBar: { type: String, attribute: 'info-description-headings-in-navbar' },\r\n\r\n      // Fetch Options\r\n      fetchCredentials: { type: String, attribute: 'fetch-credentials' },\r\n\r\n      // Filters\r\n      matchPaths: { type: String, attribute: 'match-paths' },\r\n      matchType: { type: String, attribute: 'match-type' },\r\n\r\n      // Internal Properties\r\n      loading: { type: Boolean }, // indicates spec is being loaded\r\n      focusedElementId: { type: String }, // updating the focusedElementId will automatically render appropriate section in focused mode\r\n      showAdvancedSearchDialog: { type: Boolean },\r\n      advancedSearchMatches: { type: Object },\r\n    };\r\n  }\r\n\r\n  static get styles() {\r\n    return [\r\n      FontStyles,\r\n      InputStyles,\r\n      FlexStyles,\r\n      TableStyles,\r\n      EndpointStyles,\r\n      PrismStyles,\r\n      TabStyles,\r\n      NavStyles,\r\n      InfoStyles,\r\n      css`\r\n      :host {\r\n        display:flex;\r\n        flex-direction: column;\r\n        min-width:360px;\r\n        width:100%;\r\n        height:100%;\r\n        margin:0;\r\n        padding:0;\r\n        overflow: hidden;\r\n        letter-spacing:normal;\r\n        color:var(--fg);\r\n        background-color:var(--bg);\r\n        font-family:var(--font-regular);\r\n      }\r\n      :where(button, input[type=\"checkbox\"], [tabindex=\"0\"]):focus-visible { box-shadow: var(--focus-shadow); }\r\n      :where(input[type=\"text\"], input[type=\"password\"], select, textarea):focus-visible { border-color: var(--primary-color); }\r\n    .body {\r\n        display:flex;\r\n        height:100%;\r\n        width:100%;\r\n        overflow:hidden;\r\n      }\r\n      .main-content { \r\n        margin:0;\r\n        padding: 0; \r\n        display:block;\r\n        flex:1;\r\n        height:100%;\r\n        overflow-y: auto;\r\n        overflow-x: hidden;\r\n        scrollbar-width: thin;\r\n        scrollbar-color: var(--border-color) transparent;\r\n      }\r\n\r\n      .main-content-inner--view-mode {\r\n        padding: 0 8px;\r\n      }\r\n      .main-content::-webkit-scrollbar {\r\n        width: 8px;\r\n        height: 8px;\r\n      }\r\n      .main-content::-webkit-scrollbar-track {\r\n        background:transparent;\r\n      }\r\n      .main-content::-webkit-scrollbar-thumb {\r\n        background-color: var(--border-color);\r\n      }\r\n\r\n      .section-gap.section-tag {\r\n        border-bottom:1px solid var(--border-color);\r\n      }\r\n      .section-gap,\r\n      .section-gap--focused-mode,\r\n      .section-gap--read-mode { \r\n        padding: 0px 4px; \r\n      }\r\n      .section-tag-header {\r\n        position:relative;\r\n        cursor: n-resize;\r\n        padding: 12px 0;\r\n      }\r\n      .collapsed .section-tag-header:hover{\r\n        cursor: s-resize;\r\n      }\r\n\r\n      .section-tag-header:hover{\r\n        background-image: linear-gradient(to right, rgba(0,0,0,0), var(--border-color), rgba(0,0,0,0));\r\n      }\r\n\r\n      .section-tag-header:hover::after {\r\n        position:absolute;\r\n        margin-left:-24px;\r\n        font-size:20px;\r\n        top: calc(50% - 14px);\r\n        color:var(--primary-color);\r\n        content: '⬆'; \r\n      }\r\n\r\n      .collapsed .section-tag-header::after {\r\n        position:absolute;\r\n        margin-left:-24px;\r\n        font-size:20px;\r\n        top: calc(50% - 14px);\r\n        color: var(--border-color);\r\n        content: '⬇'; \r\n      }\r\n      .collapsed .section-tag-header:hover::after {\r\n        color:var(--primary-color);\r\n      }\r\n\r\n      .collapsed .section-tag-body {\r\n        display:none;\r\n      }\r\n\r\n      .logo {\r\n        height:36px;\r\n        width:36px;\r\n        margin-left:5px; \r\n      }\r\n      .only-large-screen-flex,\r\n      .only-large-screen{\r\n        display:none;\r\n      }\r\n      .tag.title {\r\n        text-transform: uppercase;\r\n      }\r\n      .main-header {\r\n        background-color:var(--header-bg);\r\n        color:var(--header-fg);\r\n        width:100%;\r\n      }\r\n      .header-title {\r\n        font-size:calc(var(--font-size-regular) + 8px); \r\n        padding:0 8px;\r\n      }\r\n      input.header-input{\r\n        background:var(--header-color-darker);\r\n        color:var(--header-fg);\r\n        border:1px solid var(--header-color-border);\r\n        flex:1; \r\n        padding-right:24px;\r\n        border-radius:3px;\r\n      }\r\n      input.header-input::placeholder {\r\n        opacity:0.4;\r\n      }\r\n      .loader {\r\n        margin: 16px auto 16px auto; \r\n        border: 4px solid var(--bg3);\r\n        border-radius: 50%;\r\n        border-top: 4px solid var(--primary-color);\r\n        width: 36px;\r\n        height: 36px;\r\n        animation: spin 2s linear infinite;\r\n      }\r\n      .expanded-endpoint-body { \r\n        position: relative;\r\n        padding: 6px 0px; \r\n      }\r\n      .expanded-endpoint-body .tag-description {\r\n        background: var(--code-bg);\r\n        border-radius: var(--border-radius);\r\n        transition: max-height .2s ease-out;\r\n      }\r\n      .expanded-endpoint-body .tag-icon {\r\n        transition: transform .2s ease-out;\r\n      }\r\n      .expanded-endpoint-body .tag-icon.expanded {\r\n        transform: rotate(180deg);\r\n      }\r\n      .divider { \r\n        border-top: 2px solid var(--border-color);\r\n        margin: 24px 0;\r\n        width:100%;\r\n      }\r\n\r\n      .tooltip {\r\n        cursor:pointer;\r\n        border: 1px solid var(--border-color);\r\n        border-left-width: 4px;\r\n        margin-left:2px;\r\n      }\r\n      .tooltip a {\r\n        color: var(--fg2);\r\n        text-decoration: none;\r\n      }\r\n      .tooltip-text {\r\n        color: var(--fg2);\r\n        max-width: 400px;\r\n        position: absolute;\r\n        z-index:1;\r\n        background-color: var(--bg2);\r\n        visibility: hidden;\r\n\r\n        overflow-wrap: break-word;\r\n      }\r\n      .tooltip:hover {\r\n        color: var(--primary-color);\r\n        border-color: var(--primary-color);\r\n      }\r\n      .tooltip:hover a:hover {\r\n        color: var(--primary-color);\r\n      }\r\n\r\n      .tooltip:hover .tooltip-text {\r\n        visibility: visible;\r\n      }\r\n\r\n      @keyframes spin {\r\n        0% { transform: rotate(0deg); }\r\n        100% { transform: rotate(360deg); }\r\n      }\r\n\r\n      .nav-method { font-weight: bold; margin-right: 4px; font-size: calc(var(--font-size-small) - 2px); white-space: nowrap; }\r\n      .nav-method.false { display: none; }\r\n\r\n      .nav-method.as-colored-text.get { color:var(--nav-get-color); }\r\n      .nav-method.as-colored-text.put { color:var(--nav-put-color); }\r\n      .nav-method.as-colored-text.post { color:var(--nav-post-color); }\r\n      .nav-method.as-colored-text.delete { color:var(--nav-delete-color); }\r\n      .nav-method.as-colored-text.head, .nav-method.as-colored-text.patch, .nav-method.as-colored-text.options { color:var(--nav-head-color); }\r\n      \r\n      .nav-method.as-colored-block {\r\n        padding: 1px 4px;\r\n        min-width: 30px;\r\n        border-radius: 4px 0 0 4px;\r\n        color: #000;\r\n      }\r\n      .colored-block .nav-method.as-colored-block {\r\n        outline: 1px solid;\r\n      }\r\n\r\n      .nav-method.as-colored-block.get { background-color: var(--blue); }\r\n      .nav-method.as-colored-block.put { background-color: var(--orange); }\r\n      .nav-method.as-colored-block.post { background-color: var(--green); }\r\n      .nav-method.as-colored-block.delete { background-color: var(--red); }\r\n      .nav-method.as-colored-block.head, .nav-method.as-colored-block.patch , .nav-method.as-colored-block.options { \r\n        background-color: var(--yellow); \r\n      }\r\n\r\n      @media only screen and (min-width: 768px) {\r\n        .nav-bar {\r\n          width: 260px;\r\n          display:flex;\r\n        }\r\n        .only-large-screen{\r\n          display:block;\r\n        }\r\n        .only-large-screen-flex{\r\n          display:flex;\r\n        }\r\n        .section-gap { \r\n          padding: 0 0 0 24px; \r\n        }\r\n        .section-gap--focused-mode {\r\n          padding: 24px 8px; \r\n        }\r\n        .section-gap--read-mode { \r\n          padding: 24px 8px; \r\n        }\r\n        .endpoint-body {\r\n          position: relative;\r\n          padding:36px 0 48px 0;\r\n        }\r\n      }\r\n\r\n      @media only screen and (min-width: 1024px) {\r\n        .nav-bar {\r\n          width: ${unsafeCSS(this.fontSize === 'default' ? '300px' : this.fontSize === 'large' ? '315px' : '330px')};\r\n          display:flex;\r\n        }\r\n        .section-gap--focused-mode { \r\n          padding: 12px 80px 12px 80px; \r\n        }\r\n        .section-gap--read-mode { \r\n          padding: 24px 80px 12px 80px; \r\n        }\r\n      }`,\r\n      CustomStyles,\r\n    ];\r\n  }\r\n\r\n  // Startup\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    const parent = this.parentElement;\r\n    if (parent) {\r\n      if (parent.offsetWidth === 0 && parent.style.width === '') {\r\n        parent.style.width = '100vw';\r\n      }\r\n      if (parent.offsetHeight === 0 && parent.style.height === '') {\r\n        parent.style.height = '100vh';\r\n      }\r\n      if (parent.tagName === 'BODY') {\r\n        if (!parent.style.marginTop) { parent.style.marginTop = '0'; }\r\n        if (!parent.style.marginRight) { parent.style.marginRight = '0'; }\r\n        if (!parent.style.marginBottom) { parent.style.marginBottom = '0'; }\r\n        if (!parent.style.marginLeft) { parent.style.marginLeft = '0'; }\r\n      }\r\n    }\r\n\r\n    if (this.loadFonts !== 'false') {\r\n      const fontDescriptor = {\r\n        family: 'Open Sans',\r\n        style: 'normal',\r\n        weight: '300',\r\n        unicodeRange: 'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD',\r\n      };\r\n      const fontWeight300 = new FontFace(\r\n        'Open Sans',\r\n        \"url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UN_r8OUuhpKKSTjw.woff2) format('woff2')\",\r\n        fontDescriptor,\r\n      );\r\n      fontDescriptor.weight = '600';\r\n      const fontWeight600 = new FontFace(\r\n        'Open Sans',\r\n        \"url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UNirkOUuhpKKSTjw.woff2) format('woff2')\",\r\n        fontDescriptor,\r\n      );\r\n      fontWeight300.load().then((font) => { document.fonts.add(font); });\r\n      fontWeight600.load().then((font) => { document.fonts.add(font); });\r\n    }\r\n\r\n    if (!this.layout || !'row, column,'.includes(`${this.layout},`)) { this.layout = 'row'; }\r\n    if (!this.renderStyle || !'read, view, focused,'.includes(`${this.renderStyle},`)) { this.renderStyle = 'focused'; }\r\n    if (!this.schemaStyle || !'tree, table,'.includes(`${this.schemaStyle},`)) { this.schemaStyle = 'tree'; }\r\n    if (!this.theme || !'light, dark,'.includes(`${this.theme},`)) {\r\n      this.theme = (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) ? 'light' : 'dark';\r\n    }\r\n    if (!this.defaultSchemaTab || !'example, schema, model,'.includes(`${this.defaultSchemaTab},`)) {\r\n      this.defaultSchemaTab = 'example';\r\n    } else if (this.defaultSchemaTab === 'model') {\r\n      this.defaultSchemaTab = 'schema';\r\n    }\r\n    if (!this.schemaExpandLevel || this.schemaExpandLevel < 1) { this.schemaExpandLevel = 99999; }\r\n    if (!this.schemaDescriptionExpanded || !'true, false,'.includes(`${this.schemaDescriptionExpanded},`)) { this.schemaDescriptionExpanded = 'false'; }\r\n\r\n    if (!this.schemaHideReadOnly || !'default, never,'.includes(`${this.schemaHideReadOnly},`)) { this.schemaHideReadOnly = 'default'; }\r\n    if (!this.schemaHideWriteOnly || !'default, never,'.includes(`${this.schemaHideWriteOnly},`)) { this.schemaHideWriteOnly = 'default'; }\r\n\r\n    if (!this.fillRequestFieldsWithExample || !'true, false,'.includes(`${this.fillRequestFieldsWithExample},`)) { this.fillRequestFieldsWithExample = 'true'; }\r\n    if (!this.persistAuth || !'true, false,'.includes(`${this.persistAuth},`)) { this.persistAuth = 'false'; }\r\n    if (!this.responseAreaHeight) {\r\n      this.responseAreaHeight = '400px';\r\n    }\r\n\r\n    if (!this.allowSearch || !'true, false,'.includes(`${this.allowSearch},`)) { this.allowSearch = 'true'; }\r\n    if (!this.allowAdvancedSearch || !'true, false,'.includes(`${this.allowAdvancedSearch},`)) { this.allowAdvancedSearch = 'true'; }\r\n\r\n    if (!this.allowTry || !'true, false,'.includes(`${this.allowTry},`)) { this.allowTry = 'true'; }\r\n    if (!this.apiKeyValue) { this.apiKeyValue = '-'; }\r\n    if (!this.apiKeyLocation) { this.apiKeyLocation = 'header'; }\r\n    if (!this.apiKeyName) { this.apiKeyName = ''; }\r\n\r\n    if (!this.oauthReceiver) { this.oauthReceiver = 'oauth-receiver.html'; }\r\n    if (!this.updateRoute || !'true, false,'.includes(`${this.updateRoute},`)) { this.updateRoute = 'true'; }\r\n    if (!this.routePrefix) { this.routePrefix = '#'; }\r\n    if (!this.sortTags || !'true, false,'.includes(`${this.sortTags},`)) { this.sortTags = 'false'; }\r\n    if (!this.generateMissingTags || !'true, false,'.includes(`${this.generateMissingTags},`)) { this.generateMissingTags = 'false'; }\r\n    if (!this.sortEndpointsBy || !'method, path, summary, none,'.includes(`${this.sortEndpointsBy},`)) { this.sortEndpointsBy = 'path'; }\r\n\r\n    if (!this.onNavTagClick || !'expand-collapse, show-description,'.includes(`${this.onNavTagClick},`)) { this.onNavTagClick = 'expand-collapse'; }\r\n    if (!this.navItemSpacing || !'compact, relaxed, default,'.includes(`${this.navItemSpacing},`)) { this.navItemSpacing = 'default'; }\r\n    if (!this.showMethodInNavBar || !'false, as-plain-text, as-colored-text, as-colored-block,'.includes(`${this.showMethodInNavBar},`)) { this.showMethodInNavBar = 'false'; }\r\n    if (!this.usePathInNavBar || !'true, false,'.includes(`${this.usePathInNavBar},`)) { this.usePathInNavBar = 'false'; }\r\n    if (!this.navActiveItemMarker || !'left-bar, colored-block'.includes(`${this.navActiveItemMarker},`)) { this.navActiveItemMarker = 'left-bar'; }\r\n\r\n    if (!this.fontSize || !'default, large, largest,'.includes(`${this.fontSize},`)) { this.fontSize = 'default'; }\r\n    if (!this.showInfo || !'true, false,'.includes(`${this.showInfo},`)) { this.showInfo = 'true'; }\r\n    if (!this.allowServerSelection || !'true, false,'.includes(`${this.allowServerSelection},`)) { this.allowServerSelection = 'true'; }\r\n    if (!this.allowAuthentication || !'true, false,'.includes(`${this.allowAuthentication},`)) { this.allowAuthentication = 'true'; }\r\n    if (!this.allowSchemaDescriptionExpandToggle || !'true, false,'.includes(`${this.allowSchemaDescriptionExpandToggle},`)) { this.allowSchemaDescriptionExpandToggle = 'true'; }\r\n\r\n    if (!this.showSideNav || !'true false'.includes(this.showSideNav)) { this.showSideNav = 'true'; }\r\n    if (!this.showComponents || !'true false'.includes(this.showComponents)) { this.showComponents = 'false'; }\r\n    if (!this.infoDescriptionHeadingsInNavBar || !'true, false,'.includes(`${this.infoDescriptionHeadingsInNavBar},`)) { this.infoDescriptionHeadingsInNavBar = 'false'; }\r\n    if (!this.fetchCredentials || !'omit, same-origin, include,'.includes(`${this.fetchCredentials},`)) { this.fetchCredentials = ''; }\r\n    if (!this.matchType || !'includes regex'.includes(this.matchType)) { this.matchType = 'includes'; }\r\n\r\n    if (!this.showAdvancedSearchDialog) { this.showAdvancedSearchDialog = false; }\r\n\r\n    if (!this.cssFile) { this.cssFile = null; }\r\n    if (!this.cssClasses) { this.cssClasses = ''; }\r\n\r\n    marked.setOptions({\r\n      highlight: (code, lang) => {\r\n        if (Prism.languages[lang]) {\r\n          return Prism.highlight(code, Prism.languages[lang], lang);\r\n        }\r\n        return code;\r\n      },\r\n    });\r\n\r\n    window.addEventListener('hashchange', () => {\r\n      this.scrollToPath(this.getElementIDFromURL());\r\n    }, true);\r\n  }\r\n\r\n  // Cleanup\r\n  disconnectedCallback() {\r\n    if (this.intersectionObserver) {\r\n      this.intersectionObserver.disconnect();\r\n    }\r\n    super.disconnectedCallback();\r\n  }\r\n\r\n  infoDescriptionHeadingRenderer() {\r\n    const renderer = new marked.Renderer();\r\n    renderer.heading = ((text, level, raw, slugger) => `<h${level} class=\"observe-me\" id=\"${slugger.slug(raw)}\">${text}</h${level}>`);\r\n    return renderer;\r\n  }\r\n\r\n  render() {\r\n    // return render(mainBodyTemplate(this), this.shadowRoot, { eventContext: this });\r\n    const cssLinkEl = document.querySelector(`link[href*=\"${this.cssFile}\"]`);\r\n    // adding custom style for RapiDoc\r\n    if (cssLinkEl) {\r\n      this.shadowRoot.appendChild(cssLinkEl.cloneNode());\r\n    }\r\n    return mainBodyTemplate.call(this);\r\n  }\r\n\r\n  observeExpandedContent() {\r\n    // Main Container\r\n    const observeOverviewEls = this.shadowRoot.querySelectorAll('.observe-me');\r\n    observeOverviewEls.forEach((targetEl) => {\r\n      this.intersectionObserver.observe(targetEl);\r\n    });\r\n  }\r\n\r\n  attributeChangedCallback(name, oldVal, newVal) {\r\n    if (name === 'spec-url') {\r\n      if (oldVal !== newVal) {\r\n        // put it at the end of event-loop to load all the attributes\r\n        window.setTimeout(async () => {\r\n          await this.loadSpec(newVal);\r\n          // If goto-path is provided and no location-hash is present then try to scroll there\r\n          if (this.gotoPath && !window.location.hash) {\r\n            this.scrollToPath(this.gotoPath);\r\n          }\r\n        }, 0);\r\n      }\r\n    }\r\n    if (name === 'render-style') {\r\n      if (newVal === 'read') {\r\n        window.setTimeout(() => {\r\n          this.observeExpandedContent();\r\n        }, 100);\r\n      } else {\r\n        this.intersectionObserver.disconnect();\r\n      }\r\n    }\r\n    if (name === 'api-key-name' || name === 'api-key-location' || name === 'api-key-value') {\r\n      let updateSelectedApiKey = false;\r\n      let apiKeyName = '';\r\n      let apiKeyLocation = '';\r\n      let apiKeyValue = '';\r\n\r\n      if (name === 'api-key-name') {\r\n        if (this.getAttribute('api-key-location') && this.getAttribute('api-key-value')) {\r\n          apiKeyName = newVal;\r\n          apiKeyLocation = this.getAttribute('api-key-location');\r\n          apiKeyValue = this.getAttribute('api-key-value');\r\n          updateSelectedApiKey = true;\r\n        }\r\n      } else if (name === 'api-key-location') {\r\n        if (this.getAttribute('api-key-name') && this.getAttribute('api-key-value')) {\r\n          apiKeyLocation = newVal;\r\n          apiKeyName = this.getAttribute('api-key-name');\r\n          apiKeyValue = this.getAttribute('api-key-value');\r\n          updateSelectedApiKey = true;\r\n        }\r\n      } else if (name === 'api-key-value') {\r\n        if (this.getAttribute('api-key-name') && this.getAttribute('api-key-location')) {\r\n          apiKeyValue = newVal;\r\n          apiKeyLocation = this.getAttribute('api-key-location');\r\n          apiKeyName = this.getAttribute('api-key-name');\r\n          updateSelectedApiKey = true;\r\n        }\r\n      }\r\n\r\n      if (updateSelectedApiKey) {\r\n        if (this.resolvedSpec) {\r\n          const rapiDocApiKey = this.resolvedSpec.securitySchemes.find((v) => v.securitySchemeId === rapidocApiKey);\r\n          if (!rapiDocApiKey) {\r\n            this.resolvedSpec.securitySchemes.push({\r\n              securitySchemeId: rapidocApiKey,\r\n              description: 'api-key provided in rapidoc element attributes',\r\n              type: 'apiKey',\r\n              name: apiKeyName,\r\n              in: apiKeyLocation,\r\n              value: apiKeyValue,\r\n              finalKeyValue: apiKeyValue,\r\n            });\r\n          } else {\r\n            rapiDocApiKey.name = apiKeyName;\r\n            rapiDocApiKey.in = apiKeyLocation;\r\n            rapiDocApiKey.value = apiKeyValue;\r\n            rapiDocApiKey.finalKeyValue = apiKeyValue;\r\n          }\r\n          this.requestUpdate();\r\n        }\r\n      }\r\n    }\r\n    super.attributeChangedCallback(name, oldVal, newVal);\r\n  }\r\n\r\n  onSpecUrlChange() {\r\n    this.setAttribute('spec-url', this.shadowRoot.getElementById('spec-url').value);\r\n  }\r\n\r\n  onSpecFileChange(e) {\r\n    this.setAttribute('spec-file', this.shadowRoot.getElementById('spec-file').value);\r\n    const specFile = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      try {\r\n        const specObj = JSON.parse(reader.result);\r\n        this.loadSpec(specObj);\r\n        this.shadowRoot.getElementById('spec-url').value = '';\r\n      } catch (err) {\r\n        console.error('RapiDoc: Unable to read or parse json'); // eslint-disable-line no-console\r\n      }\r\n    };\r\n    // Read the Text file\r\n    reader.readAsText(specFile);\r\n  }\r\n\r\n  onFileLoadClick() {\r\n    this.shadowRoot.getElementById('spec-file').click();\r\n  }\r\n\r\n  onSearchChange(e) {\r\n    this.matchPaths = e.target.value;\r\n    this.resolvedSpec.tags.forEach((tag) => tag.paths.filter((v) => {\r\n      if (this.matchPaths) {\r\n        // v.expanded = false;\r\n        if (pathIsInSearch(this.matchPaths, v, this.matchType)) {\r\n          tag.expanded = true;\r\n        }\r\n      }\r\n    }));\r\n    this.resolvedSpec.components.forEach((component) => component.subComponents.filter((v) => {\r\n      v.expanded = false;\r\n      if (!this.matchPaths || componentIsInSearch(this.matchPaths, v)) {\r\n        v.expanded = true;\r\n      }\r\n    }));\r\n    this.requestUpdate();\r\n  }\r\n\r\n  onClearSearch() {\r\n    const searchEl = this.shadowRoot.getElementById('nav-bar-search');\r\n    searchEl.value = '';\r\n    this.matchPaths = '';\r\n    this.resolvedSpec.components.forEach((component) => component.subComponents.filter((v) => {\r\n      v.expanded = true;\r\n    }));\r\n  }\r\n\r\n  onShowSearchModalClicked() {\r\n    this.showAdvancedSearchDialog = true;\r\n  }\r\n\r\n  // Event Handler on Dialog-Box is opened\r\n  async onOpenSearchDialog(e) {\r\n    // Set focus to text input\r\n    const inputEl = e.detail.querySelector('input');\r\n    await sleep(0);\r\n    if (inputEl) {\r\n      inputEl.focus();\r\n    }\r\n  }\r\n\r\n  // Public Method\r\n  async loadSpec(specUrl) {\r\n    if (!specUrl) {\r\n      return;\r\n    }\r\n    this.matchPaths = '';\r\n    try {\r\n      this.resolvedSpec = {\r\n        specLoadError: false,\r\n        isSpecLoading: true,\r\n        tags: [],\r\n      };\r\n      this.loading = true;\r\n      this.loadFailed = false;\r\n      const spec = await ProcessSpec.call(\r\n        this,\r\n        specUrl,\r\n        this.generateMissingTags === 'true',\r\n        this.sortTags === 'true',\r\n        this.getAttribute('sort-endpoints-by'),\r\n        this.getAttribute('api-key-name'),\r\n        this.getAttribute('api-key-location'),\r\n        this.getAttribute('api-key-value'),\r\n        this.getAttribute('server-url'),\r\n      );\r\n      this.loading = false;\r\n      this.afterSpecParsedAndValidated(spec);\r\n    } catch (err) {\r\n      this.loading = false;\r\n      this.loadFailed = true;\r\n      this.resolvedSpec = null;\r\n      console.error(`RapiDoc: Unable to resolve the API spec..  ${err.message}`); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  async afterSpecParsedAndValidated(spec) {\r\n    this.resolvedSpec = spec;\r\n    this.selectedServer = undefined;\r\n    if (this.defaultApiServerUrl) {\r\n      if (this.defaultApiServerUrl === this.serverUrl) {\r\n        this.selectedServer = {\r\n          url: this.serverUrl,\r\n          computedUrl: this.serverUrl,\r\n        };\r\n      } else if (this.resolvedSpec.servers) {\r\n        this.selectedServer = this.resolvedSpec.servers.find((v) => (v.url === this.defaultApiServerUrl));\r\n      }\r\n    }\r\n    if (!this.selectedServer) {\r\n      if (this.resolvedSpec.servers) {\r\n        this.selectedServer = this.resolvedSpec.servers[0]; // eslint-disable-line prefer-destructuring\r\n      }\r\n    }\r\n    this.requestUpdate();\r\n    // eslint-disable-next-line no-await-in-loop\r\n    while (!await this.updateComplete);\r\n    const specLoadedEvent = new CustomEvent('spec-loaded', { detail: spec });\r\n    this.dispatchEvent(specLoadedEvent);\r\n\r\n    // Initiate IntersectionObserver and put it at the end of event loop, to allow loading all the child elements (must for larger specs)\r\n    this.intersectionObserver.disconnect();\r\n    if (this.renderStyle === 'read') {\r\n      await sleep(100);\r\n      this.observeExpandedContent(); // This will auto-highlight the selected nav-item in read-mode\r\n    }\r\n\r\n    this.isIntersectionObserverActive = true;\r\n\r\n    // On first time Spec load, try to navigate to location hash if provided\r\n    const elementId = this.getElementIDFromURL();\r\n\r\n    if (elementId) {\r\n      if (this.renderStyle === 'view') {\r\n        this.expandAndGotoOperation(elementId, true, true);\r\n      } else {\r\n        this.scrollToPath(elementId);\r\n      }\r\n    } else if (this.renderStyle === 'focused') {\r\n      // If goto-path is provided and no location-hash is present then try to scroll to default element\r\n      if (!this.gotoPath) {\r\n        const defaultElementId = this.showInfo ? 'overview' : this.resolvedSpec.tags[0]?.paths[0];\r\n        this.scrollToPath(defaultElementId);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the URL from where is served the RapiDoc component, removing any hash and route prefix\r\n   */\r\n  getComponentBaseURL() {\r\n    const { href } = window.location;\r\n\r\n    // Remove end of string # or /\r\n    const cleanRouterPrefix = this.routePrefix.replace(/(#|\\/)$/, '');\r\n\r\n    if (!cleanRouterPrefix) {\r\n      return href.split('#')[0];\r\n    }\r\n\r\n    const indexOfRoutePrefix = href.lastIndexOf(cleanRouterPrefix);\r\n\r\n    if (indexOfRoutePrefix === -1) {\r\n      return href;\r\n    }\r\n\r\n    return href.slice(0, indexOfRoutePrefix);\r\n  }\r\n\r\n  /**\r\n   * From the URL return the ID of the element whether it is in the hash or if used a router prefix without a hash\r\n   */\r\n  getElementIDFromURL() {\r\n    const baseURL = this.getComponentBaseURL();\r\n    const elementId = window.location.href.replace(baseURL + this.routePrefix, '');\r\n    return elementId;\r\n  }\r\n\r\n  replaceHistoryState(hashId) {\r\n    const baseURL = this.getComponentBaseURL();\r\n    window.history.replaceState(null, null, `${baseURL}${this.routePrefix || '#'}${hashId}`);\r\n  }\r\n\r\n  expandAndGotoOperation(elementId, scrollToElement = true) {\r\n    if (!this.resolvedSpec) {\r\n      return;\r\n    }\r\n    // Expand full operation and tag\r\n    let isExpandingNeeded = true;\r\n    const tmpElementId = elementId.indexOf('#') === -1 ? elementId : elementId.substring(1);\r\n    if (tmpElementId.startsWith('overview') || tmpElementId === 'servers' || tmpElementId === 'auth') {\r\n      isExpandingNeeded = false;\r\n    } else {\r\n      for (let i = 0; i < this.resolvedSpec.tags?.length; i++) {\r\n        const tag = this.resolvedSpec.tags[i];\r\n        const path = tag.paths?.find((p) => p.elementId === elementId);\r\n        if (path) {\r\n          if (path.expanded && tag.expanded) {\r\n            isExpandingNeeded = false;\r\n          } else {\r\n            path.expanded = true;\r\n            tag.expanded = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (scrollToElement) {\r\n      // requestUpdate() and delay required, else we cant find element\r\n      if (isExpandingNeeded) {\r\n        this.requestUpdate();\r\n      }\r\n      window.setTimeout(() => {\r\n        const gotoEl = this.shadowRoot.getElementById(tmpElementId);\r\n        if (gotoEl) {\r\n          gotoEl.scrollIntoView({ behavior: 'auto', block: 'start' });\r\n          if (this.updateRoute === 'true') {\r\n            this.replaceHistoryState(tmpElementId);\r\n          }\r\n        }\r\n      }, isExpandingNeeded ? 150 : 0);\r\n    }\r\n  }\r\n\r\n  isValidTopId(id) {\r\n    return (id.startsWith('overview') || id === 'servers' || id === 'auth');\r\n  }\r\n\r\n  isValidPathId(id) {\r\n    if (id === 'overview' && this.showInfo) {\r\n      return true;\r\n    }\r\n    if (id === 'servers' && this.allowServerSelection) {\r\n      return true;\r\n    }\r\n    if (id === 'auth' && this.allowAuthentication) {\r\n      return true;\r\n    }\r\n    if (id.startsWith('tag--')) {\r\n      return this.resolvedSpec?.tags?.find((tag) => tag.elementId === id);\r\n    }\r\n    return this.resolvedSpec?.tags?.find((tag) => tag.paths.find((path) => path.elementId === id));\r\n  }\r\n\r\n  onIntersect(entries) {\r\n    if (this.isIntersectionObserverActive === false) {\r\n      return;\r\n    }\r\n\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting && entry.intersectionRatio > 0) {\r\n        const oldNavEl = this.shadowRoot.querySelector('.nav-bar-tag.active, .nav-bar-path.active, .nav-bar-info.active, .nav-bar-h1.active, .nav-bar-h2.active, .operations.active');\r\n        const newNavEl = this.shadowRoot.getElementById(`link-${entry.target.id}`);\r\n\r\n        // Add active class in the new element\r\n        if (newNavEl) {\r\n          if (this.updateRoute === 'true') {\r\n            this.replaceHistoryState(entry.target.id);\r\n          }\r\n          newNavEl.scrollIntoView({ behavior: 'auto', block: 'center' });\r\n          newNavEl.classList.add('active');\r\n          newNavEl.part.add('section-navbar-active-item');\r\n        }\r\n\r\n        // Remove active class from previous element\r\n        // if it is different from the new one (edge case on loading in read render style)\r\n        if (oldNavEl && oldNavEl !== newNavEl) {\r\n          oldNavEl.classList.remove('active');\r\n          oldNavEl.part.remove('section-navbar-active-item');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Called by anchor tags created using markdown\r\n  handleHref(e) {\r\n    if (e.target.tagName.toLowerCase() === 'a') {\r\n      if (e.target.getAttribute('href').startsWith('#')) {\r\n        const gotoEl = this.shadowRoot.getElementById(e.target.getAttribute('href').replace('#', ''));\r\n        if (gotoEl) {\r\n          gotoEl.scrollIntoView({ behavior: 'auto', block: 'start' });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called by\r\n   *  - onClick of Navigation Bar\r\n   *  - onClick of Advanced Search items\r\n   *\r\n   * Functionality:\r\n   *  1. First deactivate IntersectionObserver\r\n   *  2. Scroll to the element\r\n   *  3. Activate IntersectionObserver (after little delay)\r\n   *\r\n  */\r\n  async scrollToEventTarget(event, scrollNavItemToView = true) {\r\n    if (!(event.type === 'click' || (event.type === 'keyup' && event.keyCode === 13))) {\r\n      return;\r\n    }\r\n    const navEl = event.target;\r\n    if (!navEl.dataset.contentId) {\r\n      return;\r\n    }\r\n    this.isIntersectionObserverActive = false;\r\n    if (this.renderStyle === 'focused') {\r\n      const requestEl = this.shadowRoot.querySelector('api-request');\r\n      if (requestEl) {\r\n        requestEl.beforeNavigationFocusedMode();\r\n      }\r\n    }\r\n    this.scrollToPath(navEl.dataset.contentId, true, scrollNavItemToView);\r\n    setTimeout(() => {\r\n      this.isIntersectionObserverActive = true;\r\n    }, 300);\r\n  }\r\n\r\n  // Public Method (scrolls to a given path and highlights the left-nav selection)\r\n  async scrollToPath(elementId, expandPath = true, scrollNavItemToView = true) {\r\n    if (this.renderStyle === 'focused') {\r\n      // for focused mode update this.focusedElementId to update the rendering, else it wont find the needed html elements\r\n      // focusedElementId will get validated in the template\r\n      this.focusedElementId = elementId;\r\n      await sleep(0);\r\n    }\r\n    if (this.renderStyle === 'view') {\r\n      this.expandAndGotoOperation(elementId, expandPath, true);\r\n    } else {\r\n      let isValidElementId = false;\r\n      const contentEl = this.shadowRoot.getElementById(elementId);\r\n      if (contentEl) {\r\n        isValidElementId = true;\r\n        contentEl.scrollIntoView({ behavior: 'auto', block: 'start' });\r\n      } else {\r\n        isValidElementId = false;\r\n      }\r\n      if (isValidElementId) {\r\n        // for focused style it is important to reset request-body-selection and response selection which maintains the state for in case of multiple req-body or multiple response mime-type\r\n        if (this.renderStyle === 'focused') {\r\n          const requestEl = this.shadowRoot.querySelector('api-request');\r\n          if (requestEl) {\r\n            requestEl.afterNavigationFocusedMode();\r\n          }\r\n          const responseEl = this.shadowRoot.querySelector('api-response');\r\n          if (responseEl) {\r\n            responseEl.resetSelection();\r\n          }\r\n        }\r\n\r\n        // Update Location Hash\r\n        if (this.updateRoute === 'true') {\r\n          this.replaceHistoryState(elementId);\r\n        }\r\n\r\n        // Update NavBar View and Styles\r\n        const newNavEl = this.shadowRoot.getElementById(`link-${elementId}`);\r\n\r\n        if (newNavEl) {\r\n          if (scrollNavItemToView) {\r\n            newNavEl.scrollIntoView({ behavior: 'auto', block: 'center' });\r\n          }\r\n          await sleep(0);\r\n          const oldNavEl = this.shadowRoot.querySelector('.nav-bar-tag.active, .nav-bar-path.active, .nav-bar-info.active, .nav-bar-h1.active, .nav-bar-h2.active, .operations.active');\r\n          if (oldNavEl) {\r\n            oldNavEl.classList.remove('active');\r\n            oldNavEl.part.remove('active');\r\n            oldNavEl.part.remove('section-navbar-active-item');\r\n          }\r\n          newNavEl.classList.add('active'); // must add the class after scrolling\r\n          newNavEl.part.add('section-navbar-active-item');\r\n          // this.requestUpdate();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Public Method - to update security-scheme of type http\r\n  setHttpUserNameAndPassword(securitySchemeId, username, password) {\r\n    return applyApiKey.call(this, securitySchemeId, username, password);\r\n  }\r\n\r\n  // Public Method - to update security-scheme of type apiKey or OAuth\r\n  setApiKey(securitySchemeId, apiKeyValue) {\r\n    return applyApiKey.call(this, securitySchemeId, '', '', apiKeyValue);\r\n  }\r\n\r\n  // Public Method\r\n  removeAllSecurityKeys() {\r\n    return onClearAllApiKeys.call(this);\r\n  }\r\n\r\n  // Public Method\r\n  setApiServer(apiServerUrl) {\r\n    // return apiServerUrl;\r\n    return setApiServer.call(this, apiServerUrl);\r\n  }\r\n\r\n  // Event handler for Advanced Search text-inputs and checkboxes\r\n  onAdvancedSearch(ev, delay) {\r\n    const eventTargetEl = ev.target;\r\n    clearTimeout(this.timeoutId);\r\n    this.timeoutId = setTimeout(() => {\r\n      let searchInputEl;\r\n      if (eventTargetEl.type === 'text') {\r\n        searchInputEl = eventTargetEl;\r\n      } else {\r\n        searchInputEl = eventTargetEl.closest('.advanced-search-options').querySelector('input[type=text]');\r\n      }\r\n      const searchOptions = [...eventTargetEl.closest('.advanced-search-options').querySelectorAll('input:checked')].map((v) => v.id);\r\n      this.advancedSearchMatches = advancedSearch(searchInputEl.value, this.resolvedSpec.tags, searchOptions);\r\n    }, delay);\r\n  }\r\n}\r\ncustomElements.define('rapi-doc', RapiDoc);\r\n","import { css, LitElement } from 'lit';\r\nimport { marked } from 'marked';\r\nimport Prism from 'prismjs';\r\nimport 'prismjs/components/prism-css';\r\nimport 'prismjs/components/prism-yaml';\r\nimport 'prismjs/components/prism-go';\r\nimport 'prismjs/components/prism-java';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-bash';\r\nimport 'prismjs/components/prism-python';\r\nimport 'prismjs/components/prism-http';\r\nimport 'prismjs/components/prism-csharp';\r\n\r\n// Styles\r\nimport FontStyles from '~/styles/font-styles';\r\nimport InputStyles from '~/styles/input-styles';\r\nimport FlexStyles from '~/styles/flex-styles';\r\nimport TableStyles from '~/styles/table-styles';\r\nimport PrismStyles from '~/styles/prism-styles';\r\nimport TabStyles from '~/styles/tab-styles';\r\nimport NavStyles from '~/styles/nav-styles';\r\nimport InfoStyles from '~/styles/info-styles';\r\n\r\nimport EndpointStyles from '~/styles/endpoint-styles';\r\nimport { rapidocApiKey } from '~/utils/common-utils';\r\nimport ProcessSpec from '~/utils/spec-parser';\r\nimport mainBodyTemplate from '~/templates/main-body-template';\r\nimport { applyApiKey, onClearAllApiKeys } from '~/templates/security-scheme-template';\r\nimport { setApiServer } from '~/templates/server-template';\r\n\r\nexport default class RapiDocMini extends LitElement {\r\n  constructor() {\r\n    super();\r\n    this.isMini = true;\r\n    this.updateRoute = 'false';\r\n    this.renderStyle = 'view';\r\n    this.showHeader = 'false';\r\n    this.allowAdvancedSearch = 'false';\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      // Spec\r\n      specUrl: { type: String, attribute: 'spec-url' },\r\n      sortEndpointsBy: { type: String, attribute: 'sort-endpoints-by' },\r\n\r\n      // UI Layouts\r\n      layout: { type: String },\r\n      pathsExpanded: { type: String, attribute: 'paths-expanded' },\r\n      defaultSchemaTab: { type: String, attribute: 'default-schema-tab' },\r\n      responseAreaHeight: { type: String, attribute: 'response-area-height' },\r\n      showSummaryWhenCollapsed: { type: String, attribute: 'show-summary-when-collapsed' },\r\n      fillRequestFieldsWithExample: { type: String, attribute: 'fill-request-fields-with-example' },\r\n      persistAuth: { type: String, attribute: 'persist-auth' },\r\n\r\n      // Schema Styles\r\n      schemaStyle: { type: String, attribute: 'schema-style' },\r\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\r\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\r\n\r\n      // API Server\r\n      apiKeyName: { type: String, attribute: 'api-key-name' },\r\n      apiKeyLocation: { type: String, attribute: 'api-key-location' },\r\n      apiKeyValue: { type: String, attribute: 'api-key-value' },\r\n      defaultApiServerUrl: { type: String, attribute: 'default-api-server' },\r\n      serverUrl: { type: String, attribute: 'server-url' },\r\n      oauthReceiver: { type: String, attribute: 'oauth-receiver' },\r\n\r\n      allowTry: { type: String, attribute: 'allow-try' },\r\n\r\n      // Main Colors and Font\r\n      theme: { type: String },\r\n      bgColor: { type: String, attribute: 'bg-color' },\r\n      textColor: { type: String, attribute: 'text-color' },\r\n      primaryColor: { type: String, attribute: 'primary-color' },\r\n      fontSize: { type: String, attribute: 'font-size' },\r\n      regularFont: { type: String, attribute: 'regular-font' },\r\n      monoFont: { type: String, attribute: 'mono-font' },\r\n      loadFonts: { type: String, attribute: 'load-fonts' },\r\n\r\n      // Fetch Options\r\n      fetchCredentials: { type: String, attribute: 'fetch-credentials' },\r\n\r\n      // Filters\r\n      matchPaths: { type: String, attribute: 'match-paths' },\r\n      matchType: { type: String, attribute: 'match-type' },\r\n\r\n      // Internal Properties\r\n      loading: { type: Boolean }, // indicates spec is being loaded\r\n    };\r\n  }\r\n\r\n  static get styles() {\r\n    return [\r\n      FontStyles,\r\n      InputStyles,\r\n      FlexStyles,\r\n      TableStyles,\r\n      EndpointStyles,\r\n      PrismStyles,\r\n      TabStyles,\r\n      NavStyles,\r\n      InfoStyles,\r\n      css`\r\n      :host {\r\n        display:flex;\r\n        flex-direction: column;\r\n        min-width:360px;\r\n        width:100%;\r\n        height:100%;\r\n        margin:0;\r\n        padding:0;\r\n        overflow: hidden;\r\n        letter-spacing:normal;\r\n        color:var(--fg);\r\n        background-color:var(--bg);\r\n        font-family:var(--font-regular);\r\n      }\r\n\r\n      @media only screen and (min-width: 768px) {\r\n        .only-large-screen{\r\n          display:block;\r\n        }\r\n        .only-large-screen-flex{\r\n          display:flex;\r\n        }\r\n      }`,\r\n    ];\r\n  }\r\n\r\n  // Startup\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    if (this.loadFonts !== 'false') {\r\n      const fontDescriptor = {\r\n        family: 'Open Sans',\r\n        style: 'normal',\r\n        weight: '300',\r\n        unicodeRange: 'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD',\r\n      };\r\n      const fontWeight300 = new FontFace(\r\n        'Open Sans',\r\n        \"url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UN_r8OUuhpKKSTjw.woff2) format('woff2')\",\r\n        fontDescriptor,\r\n      );\r\n      fontDescriptor.weight = '600';\r\n      const fontWeight600 = new FontFace(\r\n        'Open Sans',\r\n        \"url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UNirkOUuhpKKSTjw.woff2) format('woff2')\",\r\n        fontDescriptor,\r\n      );\r\n      fontWeight300.load().then((font) => { document.fonts.add(font); });\r\n      fontWeight600.load().then((font) => { document.fonts.add(font); });\r\n    }\r\n\r\n    if (!this.showSummaryWhenCollapsed || !'true, false,'.includes(`${this.showSummaryWhenCollapsed},`)) { this.showSummaryWhenCollapsed = 'true'; }\r\n    if (!this.layout || !'row, column,'.includes(`${this.layout},`)) { this.layout = 'row'; }\r\n    if (!this.schemaStyle || !'tree, table,'.includes(`${this.schemaStyle},`)) { this.schemaStyle = 'tree'; }\r\n    if (!this.theme || !'light, dark,'.includes(`${this.theme},`)) {\r\n      this.theme = (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) ? 'light' : 'dark';\r\n    }\r\n    if (!this.defaultSchemaTab || !'example, schema, model,'.includes(`${this.defaultSchemaTab},`)) {\r\n      this.defaultSchemaTab = 'example';\r\n    } else if (this.defaultSchemaTab === 'model') {\r\n      this.defaultSchemaTab = 'schema';\r\n    }\r\n    this.pathsExpanded = this.pathsExpanded === 'true';\r\n    if (!this.schemaExpandLevel || this.schemaExpandLevel < 1) { this.schemaExpandLevel = 99999; }\r\n    if (!this.schemaDescriptionExpanded || !'true, false,'.includes(`${this.schemaDescriptionExpanded},`)) { this.schemaDescriptionExpanded = 'false'; }\r\n    if (!this.fillRequestFieldsWithExample || !'true, false,'.includes(`${this.fillRequestFieldsWithExample},`)) { this.fillRequestFieldsWithExample = 'true'; }\r\n    if (!this.persistAuth || !'true, false,'.includes(`${this.persistAuth},`)) { this.persistAuth = 'false'; }\r\n    if (!this.responseAreaHeight) { this.responseAreaHeight = '300px'; }\r\n\r\n    if (!this.allowTry || !'true, false,'.includes(`${this.allowTry},`)) { this.allowTry = 'true'; }\r\n    if (!this.apiKeyValue) { this.apiKeyValue = '-'; }\r\n    if (!this.apiKeyLocation) { this.apiKeyLocation = 'header'; }\r\n    if (!this.apiKeyName) { this.apiKeyName = ''; }\r\n\r\n    if (!this.oauthReceiver) { this.oauthReceiver = 'oauth-receiver.html'; }\r\n    if (!this.sortTags || !'true, false,'.includes(`${this.sortTags},`)) { this.sortTags = 'false'; }\r\n    if (!this.sortEndpointsBy || !'method, path, summary,'.includes(`${this.sortEndpointsBy},`)) { this.sortEndpointsBy = 'path'; }\r\n    if (!this.fontSize || !'default, large, largest,'.includes(`${this.fontSize},`)) { this.fontSize = 'default'; }\r\n    if (!this.matchType || !'includes regex'.includes(this.matchType)) { this.matchType = 'includes'; }\r\n\r\n    if (!this.allowSchemaDescriptionExpandToggle || !'true, false,'.includes(`${this.allowSchemaDescriptionExpandToggle},`)) { this.allowSchemaDescriptionExpandToggle = 'true'; }\r\n    if (!this.fetchCredentials || !'omit, same-origin, include,'.includes(`${this.fetchCredentials},`)) { this.fetchCredentials = ''; }\r\n\r\n    marked.setOptions({\r\n      highlight: (code, lang) => {\r\n        if (Prism.languages[lang]) {\r\n          return Prism.highlight(code, Prism.languages[lang], lang);\r\n        }\r\n        return code;\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return mainBodyTemplate.call(this, true, false, false, this.pathsExpanded);\r\n  }\r\n\r\n  attributeChangedCallback(name, oldVal, newVal) {\r\n    if (name === 'spec-url') {\r\n      if (oldVal !== newVal) {\r\n        // put it at the end of event-loop to load all the attributes\r\n        window.setTimeout(async () => {\r\n          await this.loadSpec(newVal);\r\n        }, 0);\r\n      }\r\n    }\r\n    if (name === 'api-key-name' || name === 'api-key-location' || name === 'api-key-value') {\r\n      let updateSelectedApiKey = false;\r\n      let apiKeyName = '';\r\n      let apiKeyLocation = '';\r\n      let apiKeyValue = '';\r\n\r\n      if (name === 'api-key-name') {\r\n        if (this.getAttribute('api-key-location') && this.getAttribute('api-key-value')) {\r\n          apiKeyName = newVal;\r\n          apiKeyLocation = this.getAttribute('api-key-location');\r\n          apiKeyValue = this.getAttribute('api-key-value');\r\n          updateSelectedApiKey = true;\r\n        }\r\n      } else if (name === 'api-key-location') {\r\n        if (this.getAttribute('api-key-name') && this.getAttribute('api-key-value')) {\r\n          apiKeyLocation = newVal;\r\n          apiKeyName = this.getAttribute('api-key-name');\r\n          apiKeyValue = this.getAttribute('api-key-value');\r\n          updateSelectedApiKey = true;\r\n        }\r\n      } else if (name === 'api-key-value') {\r\n        if (this.getAttribute('api-key-name') && this.getAttribute('api-key-location')) {\r\n          apiKeyValue = newVal;\r\n          apiKeyLocation = this.getAttribute('api-key-location');\r\n          apiKeyName = this.getAttribute('api-key-name');\r\n          updateSelectedApiKey = true;\r\n        }\r\n      }\r\n\r\n      if (updateSelectedApiKey) {\r\n        if (this.resolvedSpec) {\r\n          const rapiDocApiKey = this.resolvedSpec.securitySchemes.find((v) => v.securitySchemeId === rapidocApiKey);\r\n          if (!rapiDocApiKey) {\r\n            this.resolvedSpec.securitySchemes.push({\r\n              apiKeyId: rapidocApiKey,\r\n              description: 'api-key provided in rapidoc element attributes',\r\n              type: 'apiKey',\r\n              name: apiKeyName,\r\n              in: apiKeyLocation,\r\n              value: apiKeyValue,\r\n              finalKeyValue: apiKeyValue,\r\n            });\r\n          } else {\r\n            rapiDocApiKey.name = apiKeyName;\r\n            rapiDocApiKey.in = apiKeyLocation;\r\n            rapiDocApiKey.value = apiKeyValue;\r\n            rapiDocApiKey.finalKeyValue = apiKeyValue;\r\n          }\r\n          this.requestUpdate();\r\n        }\r\n      }\r\n    }\r\n    super.attributeChangedCallback(name, oldVal, newVal);\r\n  }\r\n\r\n  onSpecUrlChange() {\r\n    this.setAttribute('spec-url', this.shadowRoot.getElementById('spec-url').value);\r\n  }\r\n\r\n  // Public Method\r\n  async loadSpec(specUrl) {\r\n    if (!specUrl) {\r\n      return;\r\n    }\r\n    try {\r\n      this.resolvedSpec = {\r\n        specLoadError: false,\r\n        isSpecLoading: true,\r\n        tags: [],\r\n      };\r\n      this.loading = true;\r\n      this.loadFailed = false;\r\n      this.requestUpdate();\r\n      const spec = await ProcessSpec.call(\r\n        this,\r\n        specUrl,\r\n        this.generateMissingTags === 'true',\r\n        this.sortTags === 'true',\r\n        this.getAttribute('sort-endpoints-by'),\r\n        this.getAttribute('api-key-name'),\r\n        this.getAttribute('api-key-location'),\r\n        this.getAttribute('api-key-value'),\r\n        this.getAttribute('server-url'),\r\n      );\r\n      this.loading = false;\r\n      this.afterSpecParsedAndValidated(spec);\r\n    } catch (err) {\r\n      this.loading = false;\r\n      this.loadFailed = true;\r\n      this.resolvedSpec = null;\r\n      console.error(`RapiDoc: Unable to resolve the API spec..  ${err.message}`); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  // Public Method - to update security-scheme of type http\r\n  setHttpUserNameAndPassword(securitySchemeId, username, password) {\r\n    return applyApiKey.call(this, securitySchemeId, username, password);\r\n  }\r\n\r\n  // Public Method - to update security-scheme of type apiKey or OAuth\r\n  setApiKey(securitySchemeId, apiKeyValue) {\r\n    return applyApiKey.call(this, securitySchemeId, '', '', apiKeyValue);\r\n  }\r\n\r\n  // Public Method\r\n  removeAllSecurityKeys() {\r\n    return onClearAllApiKeys.call(this);\r\n  }\r\n\r\n  // Public Method\r\n  setApiServer(apiServerUrl) {\r\n    // return apiServerUrl;\r\n    return setApiServer.call(this, apiServerUrl);\r\n  }\r\n\r\n  async afterSpecParsedAndValidated(spec) {\r\n    this.resolvedSpec = spec;\r\n    this.selectedServer = undefined;\r\n    if (this.defaultApiServerUrl) {\r\n      if (this.defaultApiServerUrl === this.serverUrl) {\r\n        this.selectedServer = {\r\n          url: this.serverUrl,\r\n          computedUrl: this.serverUrl,\r\n        };\r\n      } else if (this.resolvedSpec.servers) {\r\n        this.selectedServer = this.resolvedSpec.servers.find((v) => (v.url === this.defaultApiServerUrl));\r\n      }\r\n    }\r\n    if (!this.selectedServer) {\r\n      if (this.resolvedSpec.servers) {\r\n        this.selectedServer = this.resolvedSpec.servers[0]; // eslint-disable-line prefer-destructuring\r\n      }\r\n    }\r\n    this.requestUpdate();\r\n    // eslint-disable-next-line no-await-in-loop\r\n    while (!await this.updateComplete);\r\n    const specLoadedEvent = new CustomEvent('spec-loaded', { detail: spec });\r\n    this.dispatchEvent(specLoadedEvent);\r\n  }\r\n\r\n  // Called by anchor tags created using markdown\r\n  handleHref(e) {\r\n    if (e.target.tagName.toLowerCase() === 'a') {\r\n      if (e.target.getAttribute('href').startsWith('#')) {\r\n        const gotoEl = this.shadowRoot.getElementById(e.target.getAttribute('href').replace('#', ''));\r\n        if (gotoEl) {\r\n          gotoEl.scrollIntoView({ behavior: 'auto', block: 'start' });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\ncustomElements.define('rapi-doc-mini', RapiDocMini);\r\n","import { html } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\r\nimport { marked } from 'marked';\r\n\r\n// Templates\r\nimport overviewTemplate from '~/templates/overview-template';\r\nimport headerTemplate from '~/templates/header-template';\r\nimport { schemaInObjectNotation, generateExample } from '~/utils/schema-utils';\r\nimport '~/components/json-tree';\r\nimport '~/components/schema-tree';\r\nimport SetTheme from '~/utils/theme';\r\nimport { isValidHexColor } from '~/utils/color-utils';\r\n\r\n/* eslint-disable indent */\r\n// Json Schema Nav Template\r\nfunction jsonSchemaNavTemplate() {\r\n  return html`\r\n  <nav class='nav-bar' part=\"section-navbar\">\r\n    <slot name=\"nav-logo\" class=\"logo\"></slot>\r\n    <div style=\"display:flex;line-height:22px; padding:8px\">\r\n      <input id=\"nav-bar-search\" \r\n        part = \"textbox textbox-nav-filter\"\r\n        style = \"width:100%; height: 26px; padding-right:20px; color:var(--nav-hover-text-color); border-color:var(--nav-accent-color); background-color:var(--nav-hover-bg-color)\" \r\n        type = \"text\"\r\n        placeholder = \"Filter\" \r\n        @change = \"${this.onSearchChange}\"  \r\n        spellcheck = \"false\" \r\n      >\r\n      <div style=\"margin: 6px 5px 0 -24px; font-size:var(--font-size-regular); cursor:pointer;\">&#x21a9;</div>\r\n    </div>\r\n    <nav style=\"flex:1\" class='nav-scroll' part=\"section-navbar-scroll\">\r\n      ${this.resolvedSpec.schemaAndExamples.map((v) => html`\r\n        <div class='nav-bar-path' data-content-id='${v.elementId}' id='link-${v.elementId}'\r\n          @click = '${(e) => {\r\n            this.scrollToEventTarget(e, false);\r\n          }}'\r\n        > \r\n          ${v.name}\r\n        </div>`)\r\n      }\r\n    </nav>  \r\n  </nav>\r\n  `;\r\n}\r\n\r\n// Json Schema Body Template\r\nfunction jsonSchemaBodyTemplate() {\r\n  return html`\r\n    ${this.showInfo === 'true' ? overviewTemplate.call(this) : ''}\r\n    <div style=\"font-size:var(--font-size-regular);\">\r\n    ${this.resolvedSpec.schemaAndExamples.map((jSchemaBody) => {\r\n      const examplesObj = generateExample(jSchemaBody.schema, 'json', jSchemaBody.examples, jSchemaBody.example, true, false, 'json', true);\r\n      jSchemaBody.selectedExample = examplesObj[0]?.exampleId;\r\n      return html`\r\n        <section id='${jSchemaBody.elementId}' class='json-schema-and-example regular-font' style=\"display:flex; flex-direction: column; border:1px solid var(--border-color); margin-bottom:32px; border-top: 5px solid var(--border-color)\">\r\n          <div style=\"padding:16px; border-bottom: 1px solid var(--border-color)\">\r\n            <div style=\"font-size:var(--font-size-small); font-weight:bold\">${jSchemaBody.name}</div>\r\n            <span class=\"json-schema-description m-markdown \">${unsafeHTML(marked(jSchemaBody.description || ''))}</span>\r\n          </div>  \r\n          <div style=\"display:flex; flex-direction: row; gap:16px;\">\r\n            <div class=\"json-schema-def\" style=\"flex:1; padding:16px 0 16px 16px; \">\r\n              <schema-tree\r\n                .data = \"${schemaInObjectNotation(jSchemaBody.schema, {})}\"\r\n                schema-expand-level = \"${this.schemaExpandLevel}\"\r\n                schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\r\n                allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\r\n                schema-hide-read-only = \"false\"\r\n                schema-hide-write-only = \"false\"\r\n              > </schema-tree>\r\n            </div>\r\n            <div class=\"json-schema-example-panel\" style=\"width:400px; background-color: var(--input-bg); padding:16px 0 16px 16px; border-left: 1px dashed var(--border-color);\">\r\n              ${examplesObj.length > 1\r\n                ? html`<select style=\"min-width:100px; max-width:100%\" @change='${(e) => this.onSelectExample(e, jSchemaBody)}'>\r\n                    ${examplesObj.map((v) => html`\r\n                      <option value=\"${v.exampleId}\" ?selected=${(v.exampleId === jSchemaBody.selectedExample)}> \r\n                        ${v.exampleSummary.length > 80 ? v.exampleId : v.exampleSummary}\r\n                      </option>`)\r\n                    }\r\n                  </select>`\r\n                : html`<div style=\"font-size: var(--font-size-small);font-weight:700; margin:5px 0\"> ${examplesObj[0].exampleSummary}</div>`\r\n              }\r\n              ${examplesObj.map((v) => html`\r\n                <json-tree \r\n                  .data = \"${v.exampleValue}\"\r\n                  data-example = \"${v.exampleId}\"\r\n                  class = \"example\"\r\n                  style = \"margin-top:16px; display: ${v.exampleId === jSchemaBody.selectedExample ? 'flex' : 'none'}\"\r\n                ></json-tree>`)\r\n              }\r\n            </div>\r\n          </div>\r\n        </section>`;\r\n      })\r\n    }\r\n    </div>\r\n  `;\r\n}\r\n/* eslint-enable indent */\r\n\r\n// Json Schema Root Template\r\nexport default function jsonSchemaViewerTemplate(isMini = false) {\r\n// export default function jsonSchemaViewerTemplate(isMini = false, showExpandCollapse = true, showTags = true, pathsExpanded = false) {\r\n  if (!this.resolvedSpec) {\r\n    return '';\r\n  }\r\n  const newTheme = {\r\n    bg1: isValidHexColor(this.bgColor) ? this.bgColor : '',\r\n    fg1: isValidHexColor(this.textColor) ? this.textColor : '',\r\n    headerColor: isValidHexColor(this.headerColor) ? this.headerColor : '',\r\n    primaryColor: isValidHexColor(this.primaryColor) ? this.primaryColor : '',\r\n    navBgColor: isValidHexColor(this.navBgColor) ? this.navBgColor : '',\r\n    navTextColor: isValidHexColor(this.navTextColor) ? this.navTextColor : '',\r\n    navHoverBgColor: isValidHexColor(this.navHoverBgColor) ? this.navHoverBgColor : '',\r\n    navHoverTextColor: isValidHexColor(this.navHoverTextColor) ? this.navHoverTextColor : '',\r\n    navAccentColor: isValidHexColor(this.navAccentColor) ? this.navAccentColor : '',\r\n    navAccenttextColor: isValidHexColor(this.navAccentTextColor) ? this.navAccentTextColor : '',\r\n  };\r\n  /* eslint-disable indent */\r\n  if (this.resolvedSpec.specLoadError) {\r\n    if (isMini) {\r\n      return html`\r\n        ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\r\n        <div style=\"display:flex; align-items:center; border:1px dashed var(--border-color); height:42px; padding:5px; font-size:var(--font-size-small); color:var(--red); font-family:var(--font-mono)\"> ${this.resolvedSpec.info.description} </div>\r\n      `;\r\n    }\r\n    return html`\r\n      ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\r\n      <!-- Header -->\r\n      ${headerTemplate.call(this)}\r\n      <h1> Header </h1>\r\n      <main class=\"main-content regular-font\" part=\"section-main-content\">\r\n        <slot></slot>\r\n        <div style=\"margin:24px; text-align: center;\">\r\n          <h1 style=\"color: var(--red)\"> ${this.resolvedSpec.info.title} </h1>\r\n          <div style=\"font-family:var(--font-mono)\"> ${this.resolvedSpec.info.description} </div>\r\n        </div>\r\n      </main>  \r\n    `;\r\n  }\r\n  if (this.resolvedSpec.isSpecLoading) {\r\n    return html`\r\n      ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\r\n      <main class=\"main-content regular-font\" part=\"section-main-content\">\r\n        <slot></slot>\r\n        <div class=\"main-content-inner--${this.renderStyle}-mode\">\r\n          <div class=\"loader\"></div>\r\n        </div>\r\n      </main>  \r\n    `;\r\n  }\r\n\r\n  return html`\r\n    ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\r\n\r\n    <!-- Header -->\r\n    ${this.showHeader === 'false' ? '' : headerTemplate.call(this)}\r\n    \r\n    <div id='the-main-body' class=\"body ${this.cssClasses}\" dir= ${this.pageDirection}>\r\n\r\n      <!-- Side Nav -->\r\n      ${jsonSchemaNavTemplate.call(this)}\r\n\r\n      <!-- Main Content -->\r\n      <main class=\"main-content regular-font\" part=\"section-main-content\">\r\n        <slot></slot>\r\n        <div class=\"main-content-inner--${this.renderStyle}-mode\">\r\n          ${this.loading === true\r\n            ? html`<div class=\"loader\"></div>`\r\n            : html`\r\n              ${this.loadFailed === true\r\n                ? html`<div style=\"text-align: center;margin: 16px;\"> Unable to load the Spec</div>`\r\n                : html`\r\n                  <div class=\"operations-root\" @click=\"${(e) => { this.handleHref(e); }}\">\r\n                    ${jsonSchemaBodyTemplate.call(this)}\r\n                  </div>\r\n                `\r\n              }`\r\n          }\r\n        </div>\r\n        <slot name=\"footer\"></slot>\r\n      </main>\r\n    </div>  \r\n  `;\r\n}\r\n/* eslint-enable indent */\r\n","import { css, LitElement } from 'lit';\r\nimport { marked } from 'marked';\r\nimport Prism from 'prismjs';\r\nimport 'prismjs/components/prism-css';\r\nimport 'prismjs/components/prism-yaml';\r\nimport 'prismjs/components/prism-go';\r\nimport 'prismjs/components/prism-java';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-bash';\r\nimport 'prismjs/components/prism-python';\r\nimport 'prismjs/components/prism-http';\r\nimport 'prismjs/components/prism-csharp';\r\n\r\n// Styles\r\nimport FontStyles from '~/styles/font-styles';\r\nimport InputStyles from '~/styles/input-styles';\r\nimport FlexStyles from '~/styles/flex-styles';\r\nimport TableStyles from '~/styles/table-styles';\r\nimport PrismStyles from '~/styles/prism-styles';\r\nimport TabStyles from '~/styles/tab-styles';\r\nimport NavStyles from '~/styles/nav-styles';\r\nimport InfoStyles from '~/styles/info-styles';\r\n\r\nimport EndpointStyles from '~/styles/endpoint-styles';\r\nimport ProcessSpec from '~/utils/spec-parser';\r\nimport jsonSchemaViewerTemplate from '~/templates/json-schema-viewer-template';\r\n\r\nexport default class JsonSchemaViewer extends LitElement {\r\n  constructor() {\r\n    super();\r\n    this.isMini = false;\r\n    this.updateRoute = 'false';\r\n    this.renderStyle = 'focused';\r\n    this.showHeader = 'true';\r\n    this.allowAdvancedSearch = 'false';\r\n    this.selectedExampleForEachSchema = {};\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      // Spec\r\n      specUrl: { type: String, attribute: 'spec-url' },\r\n\r\n      // Schema Styles\r\n      schemaStyle: { type: String, attribute: 'schema-style' },\r\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\r\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\r\n      allowSchemaDescriptionExpandToggle: { type: String, attribute: 'allow-schema-description-expand-toggle' },\r\n\r\n      // Hide/show Sections\r\n      showHeader: { type: String, attribute: 'show-header' },\r\n      showSideNav: { type: String, attribute: 'show-side-nav' },\r\n      showInfo: { type: String, attribute: 'show-info' },\r\n\r\n      // Allow or restrict features\r\n      allowSpecUrlLoad: { type: String, attribute: 'allow-spec-url-load' },\r\n      allowSpecFileLoad: { type: String, attribute: 'allow-spec-file-load' },\r\n      allowSpecFileDownload: { type: String, attribute: 'allow-spec-file-download' },\r\n      allowSearch: { type: String, attribute: 'allow-search' },\r\n\r\n      // Main Colors and Font\r\n      theme: { type: String },\r\n      bgColor: { type: String, attribute: 'bg-color' },\r\n      textColor: { type: String, attribute: 'text-color' },\r\n      primaryColor: { type: String, attribute: 'primary-color' },\r\n      fontSize: { type: String, attribute: 'font-size' },\r\n      regularFont: { type: String, attribute: 'regular-font' },\r\n      monoFont: { type: String, attribute: 'mono-font' },\r\n      loadFonts: { type: String, attribute: 'load-fonts' },\r\n\r\n      // Internal Properties\r\n      loading: { type: Boolean }, // indicates spec is being loaded\r\n    };\r\n  }\r\n\r\n  static get styles() {\r\n    return [\r\n      FontStyles,\r\n      InputStyles,\r\n      FlexStyles,\r\n      TableStyles,\r\n      EndpointStyles,\r\n      PrismStyles,\r\n      TabStyles,\r\n      NavStyles,\r\n      InfoStyles,\r\n      css`\r\n      :host {\r\n        display:flex;\r\n        flex-direction: column;\r\n        min-width:360px;\r\n        width:100%;\r\n        height:100%;\r\n        margin:0;\r\n        padding:0;\r\n        overflow: hidden;\r\n        letter-spacing:normal;\r\n        color:var(--fg);\r\n        background-color:var(--bg);\r\n        font-family:var(--font-regular);\r\n      }\r\n      .body {\r\n        display:flex;\r\n        height:100%;\r\n        width:100%;\r\n        overflow:hidden;\r\n      }\r\n      .nav-bar {\r\n        width: 230px;\r\n        display:flex;\r\n      }\r\n\r\n      .main-content { \r\n        margin:0;\r\n        padding: 16px; \r\n        display:block;\r\n        flex:1;\r\n        height:100%;\r\n        overflow-y: auto;\r\n        overflow-x: hidden;\r\n        scrollbar-width: thin;\r\n        scrollbar-color: var(--border-color) transparent;\r\n      }\r\n      .main-content-inner--view-mode {\r\n        padding: 0 8px;\r\n      }\r\n      .main-content::-webkit-scrollbar {\r\n        width: 8px;\r\n        height: 8px;\r\n      }\r\n      .main-content::-webkit-scrollbar-track {\r\n        background:transparent;\r\n      }\r\n      .main-content::-webkit-scrollbar-thumb {\r\n        background-color: var(--border-color);\r\n      }\r\n      .main-header {\r\n        background-color:var(--header-bg);\r\n        color:var(--header-fg);\r\n        width:100%;\r\n      }\r\n      .header-title {\r\n        font-size:calc(var(--font-size-regular) + 8px); \r\n        padding:0 8px;\r\n      }\r\n      input.header-input{\r\n        background:var(--header-color-darker);\r\n        color:var(--header-fg);\r\n        border:1px solid var(--header-color-border);\r\n        flex:1; \r\n        padding-right:24px;\r\n        border-radius:3px;\r\n      }\r\n      input.header-input::placeholder {\r\n        opacity:0.4;\r\n      }\r\n      .loader {\r\n        margin: 16px auto 16px auto; \r\n        border: 4px solid var(--bg3);\r\n        border-radius: 50%;\r\n        border-top: 4px solid var(--primary-color);\r\n        width: 36px;\r\n        height: 36px;\r\n        animation: spin 2s linear infinite;\r\n      }\r\n      @media only screen and (min-width: 768px) {\r\n        .only-large-screen{\r\n          display:block;\r\n        }\r\n        .only-large-screen-flex{\r\n          display:flex;\r\n        }\r\n      }`,\r\n    ];\r\n  }\r\n\r\n  // Startup\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    const parent = this.parentElement;\r\n    if (parent) {\r\n      if (parent.offsetWidth === 0 && parent.style.width === '') {\r\n        parent.style.width = '100vw';\r\n      }\r\n      if (parent.offsetHeight === 0 && parent.style.height === '') {\r\n        parent.style.height = '100vh';\r\n      }\r\n      if (parent.tagName === 'BODY') {\r\n        if (!parent.style.marginTop) { parent.style.marginTop = '0'; }\r\n        if (!parent.style.marginRight) { parent.style.marginRight = '0'; }\r\n        if (!parent.style.marginBottom) { parent.style.marginBottom = '0'; }\r\n        if (!parent.style.marginLeft) { parent.style.marginLeft = '0'; }\r\n      }\r\n    }\r\n\r\n    if (this.loadFonts !== 'false') {\r\n      const fontDescriptor = {\r\n        family: 'Open Sans',\r\n        style: 'normal',\r\n        weight: '300',\r\n        unicodeRange: 'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD',\r\n      };\r\n      const fontWeight300 = new FontFace(\r\n        'Open Sans',\r\n        \"url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UN_r8OUuhpKKSTjw.woff2) format('woff2')\",\r\n        fontDescriptor,\r\n      );\r\n      fontDescriptor.weight = '600';\r\n      const fontWeight600 = new FontFace(\r\n        'Open Sans',\r\n        \"url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UNirkOUuhpKKSTjw.woff2) format('woff2')\",\r\n        fontDescriptor,\r\n      );\r\n      fontWeight300.load().then((font) => { document.fonts.add(font); });\r\n      fontWeight600.load().then((font) => { document.fonts.add(font); });\r\n    }\r\n\r\n    this.renderStyle = 'focused';\r\n    this.pathsExpanded = this.pathsExpanded === 'true';\r\n\r\n    if (!this.showInfo || !'true, false,'.includes(`${this.showInfo},`)) { this.showInfo = 'true'; }\r\n    if (!this.showSideNav || !'true false'.includes(this.showSideNav)) { this.showSideNav = 'true'; }\r\n    if (!this.showHeader || !'true, false,'.includes(`${this.showHeader},`)) { this.showHeader = 'true'; }\r\n\r\n    if (!this.schemaStyle || !'tree, table,'.includes(`${this.schemaStyle},`)) { this.schemaStyle = 'tree'; }\r\n    if (!this.theme || !'light, dark,'.includes(`${this.theme},`)) {\r\n      this.theme = (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) ? 'light' : 'dark';\r\n    }\r\n    if (!this.allowSearch || !'true, false,'.includes(`${this.allowSearch},`)) { this.allowSearch = 'true'; }\r\n    if (!this.schemaExpandLevel || this.schemaExpandLevel < 1) { this.schemaExpandLevel = 99999; }\r\n    if (!this.schemaDescriptionExpanded || !'true, false,'.includes(`${this.schemaDescriptionExpanded},`)) { this.schemaDescriptionExpanded = 'false'; }\r\n    if (!this.fontSize || !'default, large, largest,'.includes(`${this.fontSize},`)) { this.fontSize = 'default'; }\r\n    if (!this.matchType || !'includes regex'.includes(this.matchType)) { this.matchType = 'includes'; }\r\n    if (!this.allowSchemaDescriptionExpandToggle || !'true, false,'.includes(`${this.allowSchemaDescriptionExpandToggle},`)) { this.allowSchemaDescriptionExpandToggle = 'true'; }\r\n\r\n    marked.setOptions({\r\n      highlight: (code, lang) => {\r\n        if (Prism.languages[lang]) {\r\n          return Prism.highlight(code, Prism.languages[lang], lang);\r\n        }\r\n        return code;\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return jsonSchemaViewerTemplate.call(this, true, false, false, this.pathsExpanded);\r\n  }\r\n\r\n  attributeChangedCallback(name, oldVal, newVal) {\r\n    if (name === 'spec-url') {\r\n      if (oldVal !== newVal) {\r\n        // put it at the end of event-loop to load all the attributes\r\n        window.setTimeout(async () => {\r\n          await this.loadSpec(newVal);\r\n        }, 0);\r\n      }\r\n    }\r\n    super.attributeChangedCallback(name, oldVal, newVal);\r\n  }\r\n\r\n  onSpecUrlChange() {\r\n    this.setAttribute('spec-url', this.shadowRoot.getElementById('spec-url').value);\r\n  }\r\n\r\n  onSearchChange(e) {\r\n    // Todo: Filter Search\r\n    this.matchPaths = e.target.value;\r\n  }\r\n\r\n  // Public Method\r\n  async loadSpec(specUrl) {\r\n    if (!specUrl) {\r\n      return;\r\n    }\r\n    try {\r\n      this.resolvedSpec = {\r\n        specLoadError: false,\r\n        isSpecLoading: true,\r\n        tags: [],\r\n      };\r\n      this.loading = true;\r\n      this.loadFailed = false;\r\n      this.requestUpdate();\r\n      const spec = await ProcessSpec.call(\r\n        this,\r\n        specUrl,\r\n        this.generateMissingTags === 'true',\r\n        this.sortTags === 'true',\r\n        this.getAttribute('sort-endpoints-by'),\r\n      );\r\n      this.loading = false;\r\n      this.afterSpecParsedAndValidated(spec);\r\n    } catch (err) {\r\n      this.loading = false;\r\n      this.loadFailed = true;\r\n      this.resolvedSpec = null;\r\n      console.error(`RapiDoc: Unable to resolve the API spec..  ${err.message}`); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  async afterSpecParsedAndValidated(spec) {\r\n    this.resolvedSpec = spec;\r\n    const specLoadedEvent = new CustomEvent('spec-loaded', { detail: spec });\r\n    this.dispatchEvent(specLoadedEvent);\r\n  }\r\n\r\n  // Called by anchor tags created using markdown\r\n  handleHref(e) {\r\n    if (e.target.tagName.toLowerCase() === 'a') {\r\n      if (e.target.getAttribute('href').startsWith('#')) {\r\n        const gotoEl = this.shadowRoot.getElementById(e.target.getAttribute('href').replace('#', ''));\r\n        if (gotoEl) {\r\n          gotoEl.scrollIntoView({ behavior: 'auto', block: 'start' });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Example Dropdown @change Handler\r\n  onSelectExample(e) {\r\n    const exampleContainerEl = e.target.closest('.json-schema-example-panel');\r\n    const exampleEls = [...exampleContainerEl.querySelectorAll('.example')];\r\n    exampleEls.forEach((v) => {\r\n      v.style.display = v.dataset.example === e.target.value ? 'flex' : 'none';\r\n    });\r\n  }\r\n\r\n  async scrollToEventTarget(event) {\r\n    const navEl = event.currentTarget;\r\n    if (!navEl.dataset.contentId) {\r\n      return;\r\n    }\r\n    const contentEl = this.shadowRoot.getElementById(navEl.dataset.contentId);\r\n    if (contentEl) {\r\n      contentEl.scrollIntoView({ behavior: 'auto', block: 'start' });\r\n    }\r\n  }\r\n}\r\ncustomElements.define('json-schema-viewer', JsonSchemaViewer);\r\n"],"names":[],"sourceRoot":""}